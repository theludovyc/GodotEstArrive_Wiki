__NOTOC__Built-in GDScript functions.== Description ==List of core built-in GDScript functions. Math functions and other utilities. Everything else is provided by objects. (Keywords: builtin, built in, global functions.)== Methods =={| class="wikitable | [[Color GD|Color]]|| [[@GDScript_method_Color8 GD|Color8]] '''(''' int r8, int g8, int b8, int a8=255 ''')'''                                                                    |-| [[Color GD|Color]]|| [[@GDScript_method_ColorN GD|ColorN]] '''(''' [[String GD|String]] name, float alpha=1.0 ''')'''                                                                                                         |-| float|| [[#abs|abs]] '''(''' float s ''')'''                                                                                                                                                         |-| float|| [[#acos|acos]] '''(''' float s ''')'''                                                                                                                                                       |-| float|| [[#asin|asin]] '''(''' float s ''')'''                                                                                                                                                       |-| void|| [[#assert|assert]] '''(''' bool condition ''')'''                                                                                                                                             |-| float|| [[#atan|atan]] '''(''' float s ''')'''                                                                                                                                                       |-| float|| [[#atan2|atan2]] '''(''' float y, float x ''')'''                                                                                                                        |-| [[Variant GD|Variant]]|| [[#bytes2var|bytes2var]] '''(''' [[PackedByteArray GD|PackedByteArray]] bytes, bool allow_objects=false ''')'''                                                                        |-| [[Vector2 GD|Vector2]]|| [[#cartesian2polar|cartesian2polar]] '''(''' float x, float y ''')'''                                                                                                    |-| float|| [[#ceil|ceil]] '''(''' float s ''')'''                                                                                                                                                       |-| [[String GD|String]]|| [[#char|char]] '''(''' int code ''')'''                                                                                                                                                        |-| float|| [[#clamp|clamp]] '''(''' float value, float min, float max ''')'''                                                                                   |-| [[Variant GD|Variant]]|| [[#convert|convert]] '''(''' [[Variant GD|Variant]] what, int type ''')'''                                                                                                              |-| float|| [[#cos|cos]] '''(''' float s ''')'''                                                                                                                                                         |-| float|| [[#cosh|cosh]] '''(''' float s ''')'''                                                                                                                                                       |-| float|| [[#db2linear|db2linear]] '''(''' float db ''')'''                                                                                                                                            |-| float|| [[#dectime|dectime]] '''(''' float value, float amount, float step ''')'''                                                                           |-| float|| [[#deg2rad|deg2rad]] '''(''' float deg ''')'''                                                                                                                                               |-| [[Object GD|Object]]|| [[#dict2inst|dict2inst]] '''(''' [[Dictionary GD|Dictionary]] dict ''')'''                                                                                                                                |-| float|| [[#ease|ease]] '''(''' float s, float curve ''')'''                                                                                                                      |-| float|| [[#exp|exp]] '''(''' float s ''')'''                                                                                                                                                         |-| float|| [[#floor|floor]] '''(''' float s ''')'''                                                                                                                                                     |-| float|| [[#fmod|fmod]] '''(''' float a, float b ''')'''                                                                                                                          |-| float|| [[#fposmod|fposmod]] '''(''' float a, float b ''')'''                                                                                                                    |-| [[FuncRef GD|FuncRef]]|| [[#funcref|funcref]] '''(''' [[Object GD|Object]] instance, [[String GD|String]] funcname ''')'''                                                                                                  |-| [[Array GD|Array]]|| [[#get_stack|get_stack]] '''(''' ''')'''                                                                                                                                                                         |-| int|| [[#hash|hash]] '''(''' [[Variant GD|Variant]] var ''')'''                                                                                                                                                 |-| [[Dictionary GD|Dictionary]]|| [[#inst2dict|inst2dict]] '''(''' [[Object GD|Object]] inst ''')'''                                                                                                                                        |-| [[Object GD|Object]]|| [[#instance_from_id|instance_from_id]] '''(''' int instance_id ''')'''                                                                                                                         |-| float|| [[#inverse_lerp|inverse_lerp]] '''(''' float from, float to, float weight ''')'''                                                                    |-| bool|| [[#is_equal_approx|is_equal_approx]] '''(''' float a, float b ''')'''                                                                                                    |-| bool|| [[#is_inf|is_inf]] '''(''' float s ''')'''                                                                                                                                                   |-| bool|| [[#is_instance_valid|is_instance_valid]] '''(''' [[Object GD|Object]] instance ''')'''                                                                                                                    |-| bool|| [[#is_nan|is_nan]] '''(''' float s ''')'''                                                                                                                                                   |-| bool|| [[#is_zero_approx|is_zero_approx]] '''(''' float s ''')'''                                                                                                                                   |-| int|| [[#len|len]] '''(''' [[Variant GD|Variant]] var ''')'''                                                                                                                                                   |-| [[Variant GD|Variant]]|| [[#lerp|lerp]] '''(''' [[Variant GD|Variant]] from, [[Variant GD|Variant]] to, float weight ''')'''                                                                            |-| float|| [[#lerp_angle|lerp_angle]] '''(''' float from, float to, float weight ''')'''                                                                        |-| float|| [[#linear2db|linear2db]] '''(''' float nrg ''')'''                                                                                                                                           |-| [[Resource GD|Resource]]|| [[#load|load]] '''(''' [[String GD|String]] path ''')'''                                                                                                                                                  |-| float|| [[#log|log]] '''(''' float s ''')'''                                                                                                                                                         |-| float|| [[#max|max]] '''(''' float a, float b ''')'''                                                                                                                            |-| float|| [[#min|min]] '''(''' float a, float b ''')'''                                                                                                                            |-| float|| [[#move_toward|move_toward]] '''(''' float from, float to, float delta ''')'''                                                                       |-| int|| [[#nearest_po2|nearest_po2]] '''(''' int value ''')'''                                                                                                                                         |-| int|| [[#ord|ord]] '''(''' [[String GD|String]] char ''')'''                                                                                                                                                    |-| [[Variant GD|Variant]]|| [[#parse_json|parse_json]] '''(''' [[String GD|String]] json ''')'''                                                                                                                                      |-| [[Vector2 GD|Vector2]]|| [[#polar2cartesian|polar2cartesian]] '''(''' float r, float th ''')'''                                                                                                   |-| int|| [[#posmod|posmod]] '''(''' int a, int b ''')'''                                                                                                                              |-| float|| [[#pow|pow]] '''(''' float base, float exp ''')'''                                                                                                                       |-| [[Resource GD|Resource]]|| [[#preload|preload]] '''(''' [[String GD|String]] path ''')'''                                                                                                                                            |-| void|| [[#print|print]] '''(''' ... ''')''' vararg                                                                                                                                                                      |-| void|| [[#print_debug|print_debug]] '''(''' ... ''')''' vararg                                                                                                                                                          |-| void|| [[#print_stack|print_stack]] '''(''' ''')'''                                                                                                                                                                     |-| void|| [[#printerr|printerr]] '''(''' ... ''')''' vararg                                                                                                                                                                |-| void|| [[#printraw|printraw]] '''(''' ... ''')''' vararg                                                                                                                                                                |-| void|| [[#prints|prints]] '''(''' ... ''')''' vararg                                                                                                                                                                    |-| void|| [[#printt|printt]] '''(''' ... ''')''' vararg                                                                                                                                                                    |-| void|| [[#push_error|push_error]] '''(''' [[String GD|String]] message ''')'''                                                                                                                                   |-| void|| [[#push_warning|push_warning]] '''(''' [[String GD|String]] message ''')'''                                                                                                                               |-| float|| [[#rad2deg|rad2deg]] '''(''' float rad ''')'''                                                                                                                                               |-| float|| [[#rand_range|rand_range]] '''(''' float from, float to ''')'''                                                                                                          |-| [[Array GD|Array]]|| [[#rand_seed|rand_seed]] '''(''' int seed ''')'''                                                                                                                                              |-| float|| [[#randf|randf]] '''(''' ''')'''                                                                                                                                                                                 |-| int|| [[#randi|randi]] '''(''' ''')'''                                                                                                                                                                                 |-| void|| [[#randomize|randomize]] '''(''' ''')'''                                                                                                                                                                         |-| [[Array GD|Array]]|| [[#range|range]] '''(''' ... ''')''' vararg                                                                                                                                                                      |-| float|| [[#range_lerp|range_lerp]] '''(''' float value, float istart, float istop, float ostart, float ostop ''')''' |-| float|| [[#round|round]] '''(''' float s ''')'''                                                                                                                                                     |-| void|| [[#seed|seed]] '''(''' int seed ''')'''                                                                                                                                                        |-| float|| [[#sign|sign]] '''(''' float s ''')'''                                                                                                                                                       |-| float|| [[#sin|sin]] '''(''' float s ''')'''                                                                                                                                                         |-| float|| [[#sinh|sinh]] '''(''' float s ''')'''                                                                                                                                                       |-| float|| [[#smoothstep|smoothstep]] '''(''' float from, float to, float weight ''')'''                                                                        |-| float|| [[#sqrt|sqrt]] '''(''' float s ''')'''                                                                                                                                                       |-| int|| [[#step_decimals|step_decimals]] '''(''' float step ''')'''                                                                                                                                  |-| float|| [[#stepify|stepify]] '''(''' float s, float step ''')'''                                                                                                                 |-| [[String GD|String]]|| [[#str|str]] '''(''' ... ''')''' vararg                                                                                                                                                                          |-| [[Variant GD|Variant]]|| [[#str2var|str2var]] '''(''' [[String GD|String]] string ''')'''                                                                                                                                          |-| float|| [[#tan|tan]] '''(''' float s ''')'''                                                                                                                                                         |-| float|| [[#tanh|tanh]] '''(''' float s ''')'''                                                                                                                                                       |-| [[String GD|String]]|| [[#to_json|to_json]] '''(''' [[Variant GD|Variant]] var ''')'''                                                                                                                                           |-| bool|| [[#type_exists|type_exists]] '''(''' [[String GD|String]] type ''')'''                                                                                                                                    |-| int|| [[#typeof|typeof]] '''(''' [[Variant GD|Variant]] what ''')'''                                                                                                                                            |-| [[String GD|String]]|| [[#validate_json|validate_json]] '''(''' [[String GD|String]] json ''')'''                                                                                                                                |-| [[PackedByteArray GD|PackedByteArray]]|| [[#var2bytes|var2bytes]] '''(''' [[Variant GD|Variant]] var, bool full_objects=false ''')'''                                                                                           |-| [[String GD|String]]|| [[#var2str|var2str]] '''(''' [[Variant GD|Variant]] var ''')'''                                                                                                                                           |-| [[WeakRef GD|WeakRef]]|| [[#weakref|weakref]] '''(''' [[Object GD|Object]] obj ''')'''                                                                                                                                             |-| float|| [[#wrapf|wrapf]] '''(''' float value, float min, float max ''')'''                                                                                   |-| int|| [[#wrapi|wrapi]] '''(''' int value, int min, int max ''')'''                                                                                               |-| [[GDScriptFunctionState GD|GDScriptFunctionState]]|| [[#yield|yield]] '''(''' [[Object GD|Object]] object=null, [[String GD|String]] signal="" ''')'''                                                                                                  |}== Constants ===== PI ====== TAU ====== INF ====== NAN ===*  '''PI''' = '''3.141593'''  Constant that represents how many times the diameter of a circle fits around its perimeter.*  '''TAU''' = '''6.283185'''  The circle constant, the circumference of the unit circle.*  '''INF''' = '''inf'''  A positive infinity. (For negative infinity, use -INF).*  '''NAN''' = '''nan'''  Macro constant that expands to an expression of type float that represents a NaN.The NaN values are used to identify undefined or non-representable values for floating-point elements, such as the square root of negative numbers or the result of 0/0.== Method Descriptions ===== Color8 ===*  [[Color GD|Color]] '''Color8''' '''(''' int r8, int g8, int b8, int a8=255 ''')'''Returns a color constructed from integer red, green, blue, and alpha channels. Each channel should have 8 bits of information ranging from 0 to 255.{{Span|r8}} red channel{{Span|g8}} green channel{{Span|b8}} blue channel{{Span|a8}} alpha channel::    red = Color8(255, 0, 0)=== ColorN ===*  [[Color GD|Color]] '''ColorN''' '''(''' [[String GD|String]] name, float alpha=1.0 ''')'''Returns a color according to the standardized {{Span|name}} with {{Span|alpha}} ranging from 0 to 1.::    red = ColorN("red", 1)Supported color names are the same as the constants defined in [[Color GD|Color]].=== abs ===*  float '''abs''' '''(''' float s ''')'''Returns the absolute value of parameter {{Span|s}} (i.e. unsigned value, works for integer and float).::    # a is 1    a = abs(-1)=== acos ===*  float '''acos''' '''(''' float s ''')'''Returns the arc cosine of {{Span|s}} in radians. Use to get the angle of cosine {{Span|s}}.::    # c is 0.523599 or 30 degrees if converted with rad2deg(s)    c = acos(0.866025)=== asin ===*  float '''asin''' '''(''' float s ''')'''Returns the arc sine of {{Span|s}} in radians. Use to get the angle of sine {{Span|s}}.::    # s is 0.523599 or 30 degrees if converted with rad2deg(s)    s = asin(0.5)=== assert ===*  void '''assert''' '''(''' bool condition ''')'''Asserts that the {{Span|condition}} is {{Span|true}} . If the {{Span|condition}} is {{Span|false}}, an error is generated and the program is halted until you resume it. Only executes in debug builds, or when running the game from the editor. Use it for debugging purposes, to make sure a statement is {{Span|true}} during development.::    # Imagine we always want speed to be between 0 and 20    speed = -10    assert(speed < 20) # True, the program will continue    assert(speed >= 0) # False, the program will stop    assert(speed >= 0 && speed < 20) # You can also combine the two conditional statements in one check=== atan ===*  float '''atan''' '''(''' float s ''')'''Returns the arc tangent of {{Span|s}} in radians. Use it to get the angle from an angle's tangent in trigonometry: {{Span|atan(tan(angle)) == angle}}.The method cannot know in which quadrant the angle should fall. See [[#atan2|atan2]] if you always want an exact angle.::    a = atan(0.5) # a is 0.463648=== atan2 ===*  float '''atan2''' '''(''' float y, float x ''')'''Returns the arc tangent of {{Span|y/x}} in radians. Use to get the angle of tangent {{Span|y/x}}. To compute the value, the method takes into account the sign of both arguments in order to determine the quadrant.::    a = atan2(0, -1) # a is 3.141593=== bytes2var ===*  [[Variant GD|Variant]] '''bytes2var''' '''(''' [[PackedByteArray GD|PackedByteArray]] bytes, bool allow_objects=false ''')'''Decodes a byte array back to a value. When {{Span|allow_objects}} is {{Span|true}} decoding objects is allowed.'''WARNING:''' Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution).=== cartesian2polar ===*  [[Vector2 GD|Vector2]] '''cartesian2polar''' '''(''' float x, float y ''')'''Converts a 2D point expressed in the cartesian coordinate system (X and Y axis) to the polar coordinate system (a distance from the origin and an angle).=== ceil ===*  float '''ceil''' '''(''' float s ''')'''Rounds {{Span|s}} upward, returning the smallest integral value that is not less than {{Span|s}}.::    i = ceil(1.45)  # i is 2    i = ceil(1.001) # i is 2=== char ===*  [[String GD|String]] '''char''' '''(''' int code ''')'''Returns a character as a String of the given Unicode code point (which is compatible with ASCII code).::    a = char(65)      # a is "A"    a = char(65 + 32) # a is "a"    a = char(8364)    # a is "€"This is the inverse of [[#ord|ord]].=== clamp ===*  float '''clamp''' '''(''' float value, float min, float max ''')'''Clamps {{Span|value}} and returns a value not less than {{Span|min}} and not more than {{Span|max}}.::    speed = 1000    # a is 20    a = clamp(speed, 1, 20)        speed = -10    # a is 1    a = clamp(speed, 1, 20)=== convert ===*  [[Variant GD|Variant]] '''convert''' '''(''' [[Variant GD|Variant]] what, int type ''')'''Converts from a type to another in the best way possible. The {{Span|type}} parameter uses the [[@GlobalScope GD#Variant.Type|Variant.Type]] values.::    a = Vector2(1, 0)    # Prints 1    print(a.length())    a = convert(a, TYPE_STRING)    # Prints 6 as "(1, 0)" is 6 characters    print(a.length())=== cos ===*  float '''cos''' '''(''' float s ''')'''Returns the cosine of angle {{Span|s}} in radians.::    # Prints 1 then -1    print(cos(PI * 2))    print(cos(PI))=== cosh ===*  float '''cosh''' '''(''' float s ''')'''Returns the hyperbolic cosine of {{Span|s}} in radians.::    # Prints 1.543081    print(cosh(1))=== db2linear ===*  float '''db2linear''' '''(''' float db ''')'''Converts from decibels to linear energy (audio).=== dectime ===*  float '''dectime''' '''(''' float value, float amount, float step ''')'''Returns the result of {{Span|value}} decreased by {{Span|step}} \* {{Span|amount}}.::    # a = 59    a = dectime(60, 10, 0.1))=== deg2rad ===*  float '''deg2rad''' '''(''' float deg ''')'''Returns degrees converted to radians.::    # r is 3.141593    r = deg2rad(180)=== dict2inst ===*  [[Object GD|Object]] '''dict2inst''' '''(''' [[Dictionary GD|Dictionary]] dict ''')'''Converts a previously converted instance to a dictionary, back into an instance. Useful for deserializing.=== ease ===*  float '''ease''' '''(''' float s, float curve ''')'''Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.=== exp ===*  float '''exp''' '''(''' float s ''')'''The natural exponential function. It raises the mathematical constant '''e''' to the power of {{Span|s}} and returns it.'''e''' has an approximate value of 2.71828.For exponents to other bases use the method [[#pow|pow]].::    a = exp(2) # Approximately 7.39=== floor ===*  float '''floor''' '''(''' float s ''')'''Rounds {{Span|s}} to the closest smaller integer and returns it.::    # a is 2.0    a = floor(2.99)    # a is -3.0    a = floor(-2.99)'''Note:''' This method returns a float. If you need an integer, you can use {{Span|int(s)}} directly.=== fmod ===*  float '''fmod''' '''(''' float a, float b ''')'''Returns the floating-point remainder of {{Span|a/b}}, keeping the sign of {{Span|a}}.::    # Remainder is 1.5    var remainder = fmod(7, 5.5)For the integer remainder operation, use the % operator.=== fposmod ===*  float '''fposmod''' '''(''' float a, float b ''')'''Returns the floating-point modulus of {{Span|a/b}} that wraps equally in positive and negative.::    var i = -6    while i < 5:        prints(i, fposmod(i, 3))        i += 1Produces:::    -6 0    -5 1    -4 2    -3 0    -2 1    -1 2    0 0    1 1    2 2    3 0    4 1=== funcref ===*  [[FuncRef GD|FuncRef]] '''funcref''' '''(''' [[Object GD|Object]] instance, [[String GD|String]] funcname ''')'''Returns a reference to the specified function {{Span|funcname}} in the {{Span|instance}} node. As functions aren't first-class objects in GDscript, use {{Span|funcref}} to store a [[FuncRef GD|FuncRef]] in a variable and call it later.::    func foo():        return("bar")        a = funcref(self, "foo")    print(a.call_func()) # Prints bar=== get_stack ===*  [[Array GD|Array]] '''get_stack ( )'''Returns an array of dictionaries representing the current call stack.::    func _ready():        foo()        func foo():        bar()        func bar():        print(get_stack())would print::    [{function:bar, line:12, source:res://script.gd}, {function:foo, line:9, source:res://script.gd}, {function:_ready, line:6, source:res://script.gd}]=== hash ===*  int '''hash''' '''(''' [[Variant GD|Variant]] var ''')'''Returns the integer hash of the variable passed.::    print(hash("a")) # Prints 177670=== inst2dict ===*  [[Dictionary GD|Dictionary]] '''inst2dict''' '''(''' [[Object GD|Object]] inst ''')'''Returns the passed instance converted to a dictionary (useful for serializing).::    var foo = "bar"    func _ready():        var d = inst2dict(self)        print(d.keys())        print(d.values())Prints out:::    [@subpath, @path, foo]    [, res://test.gd, bar]=== instance_from_id ===*  [[Object GD|Object]] '''instance_from_id''' '''(''' int instance_id ''')'''Returns the Object that corresponds to {{Span|instance_id}}. All Objects have a unique instance ID.::    var foo = "bar"    func _ready():        var id = get_instance_id()        var inst = instance_from_id(id)        print(inst.foo) # Prints bar=== inverse_lerp ===*  float '''inverse_lerp''' '''(''' float from, float to, float weight ''')'''Returns a normalized value considering the given range. This is the opposite of [[#lerp|lerp]].::    var middle = lerp(20, 30, 0.75)    # `middle` is now 27.5.    # Now, we pretend to have forgotten the original ratio and want to get it back.    var ratio = inverse_lerp(20, 30, 27.5)    # `ratio` is now 0.75.=== is_equal_approx ===*  bool '''is_equal_approx''' '''(''' float a, float b ''')'''Returns {{Span|true}} if {{Span|a}} and {{Span|b}} are approximately equal to each other.=== is_inf ===*  bool '''is_inf''' '''(''' float s ''')'''Returns whether {{Span|s}} is an infinity value (either positive infinity or negative infinity).=== is_instance_valid ===*  bool '''is_instance_valid''' '''(''' [[Object GD|Object]] instance ''')'''Returns whether {{Span|instance}} is a valid object (e.g. has not been deleted from memory).=== is_nan ===*  bool '''is_nan''' '''(''' float s ''')'''Returns whether {{Span|s}} is a NaN (Not-A-Number) value.=== is_zero_approx ===*  bool '''is_zero_approx''' '''(''' float s ''')'''Returns {{Span|true}} if {{Span|s}} is zero or almost zero.=== len ===*  int '''len''' '''(''' [[Variant GD|Variant]] var ''')'''Returns length of Variant {{Span|var}}. Length is the character count of String, element count of Array, size of Dictionary, etc.'''Note:''' Generates a fatal error if Variant can not provide a length.::    a = [1, 2, 3, 4]    len(a) # Returns 4=== lerp ===*  [[Variant GD|Variant]] '''lerp''' '''(''' [[Variant GD|Variant]] from, [[Variant GD|Variant]] to, float weight ''')'''Linearly interpolates between two values by a normalized value. This is the opposite of [[#inverse_lerp|inverse_lerp]].If the {{Span|from}} and {{Span|to}} arguments are of type int or float, the return value is a float.If both are of the same vector type ([[Vector2 GD|Vector2]], [[Vector3 GD|Vector3]] or [[Color GD|Color]]), the return value will be of the same type ({{Span|lerp}} then calls the vector type's {{Span|linear_interpolate}} method).::    lerp(0, 4, 0.75) # Returns 3.0    lerp(Vector2(1, 5), Vector2(3, 2), 0.5) # Returns Vector2(2, 3.5)=== lerp_angle ===*  float '''lerp_angle''' '''(''' float from, float to, float weight ''')'''Linearly interpolates between two angles (in radians) by a normalized value.Similar to [[#lerp|lerp]], but interpolates correctly when the angles wrap around [[@GDScript GD#TAU|TAU]].::    extends Sprite    var elapsed = 0.0    func _process(delta):        var min_angle = deg2rad(0.0)        var max_angle = deg2rad(90.0)        rotation = lerp_angle(min_angle, max_angle, elapsed)        elapsed += delta=== linear2db ===*  float '''linear2db''' '''(''' float nrg ''')'''Converts from linear energy to decibels (audio). This can be used to implement volume sliders that behave as expected (since volume isn't linear). Example:::    # "Slider" refers to a node that inherits Range such as HSlider or VSlider.    # Its range must be configured to go from 0 to 1.    # Change the bus name if you'd like to change the volume of a specific bus only.    AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear2db($Slider.value))=== load ===*  [[Resource GD|Resource]] '''load''' '''(''' [[String GD|String]] path ''')'''Loads a resource from the filesystem located at {{Span|path}}.'''Note:''' Resource paths can be obtained by right-clicking on a resource in the FileSystem dock and choosing '''Copy Path'''.::    # Load a scene called main located in the root of the project directory.    var main = load("res://main.tscn")'''Important:''' The path must be absolute, a local path will just return {{Span|null}}.=== log ===*  float '''log''' '''(''' float s ''')'''Natural logarithm. The amount of time needed to reach a certain level of continuous growth.'''Note:''' This is not the same as the "log" function on most calculators, which uses a base 10 logarithm.::    log(10) # Returns 2.302585=== max ===*  float '''max''' '''(''' float a, float b ''')'''Returns the maximum of two values.::    max(1, 2) # Returns 2    max(-3.99, -4) # Returns -3.99=== min ===*  float '''min''' '''(''' float a, float b ''')'''Returns the minimum of two values.::    min(1, 2) # Returns 1    min(-3.99, -4) # Returns -4=== move_toward ===*  float '''move_toward''' '''(''' float from, float to, float delta ''')'''Moves {{Span|from}} toward {{Span|to}} by the {{Span|delta}} value.Use a negative {{Span|delta}} value to move away.::    move_toward(10, 5, 4) # Returns 6=== nearest_po2 ===*  int '''nearest_po2''' '''(''' int value ''')'''Returns the nearest larger power of 2 for integer {{Span|value}}.::    nearest_po2(3) # Returns 4    nearest_po2(4) # Returns 4    nearest_po2(5) # Returns 8=== ord ===*  int '''ord''' '''(''' [[String GD|String]] char ''')'''Returns an integer representing the Unicode code point of the given Unicode character {{Span|char}}.::    a = ord("A") # a is 65    a = ord("a") # a is 97    a = ord("€") # a is 8364This is the inverse of [[#char|char]].=== parse_json ===*  [[Variant GD|Variant]] '''parse_json''' '''(''' [[String GD|String]] json ''')'''Parse JSON text to a Variant (use [[#typeof|typeof]] to check if it is what you expect).Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.Note that JSON objects do not preserve key order like Godot dictionaries, thus you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:::    p = parse_json('["a", "b", "c"]')    if typeof(p) == TYPE_ARRAY:        print(p[0]) # Prints a    else:        print("unexpected results")=== polar2cartesian ===*  [[Vector2 GD|Vector2]] '''polar2cartesian''' '''(''' float r, float th ''')'''Converts a 2D point expressed in the polar coordinate system (a distance from the origin {{Span|r}} and an angle {{Span|th}}) to the cartesian coordinate system (X and Y axis).=== posmod ===*  int '''posmod''' '''(''' int a, int b ''')'''Returns the integer modulus of {{Span|a/b}} that wraps equally in positive and negative.::    var i = -6    while i < 5:        prints(i, posmod(i, 3))        i += 1Produces:::    -6 0    -5 1    -4 2    -3 0    -2 1    -1 2    0 0    1 1    2 2    3 0    4 1=== pow ===*  float '''pow''' '''(''' float base, float exp ''')'''Returns the result of {{Span|x}} raised to the power of {{Span|y}}.::    pow(2, 5) # Returns 32=== preload ===*  [[Resource GD|Resource]] '''preload''' '''(''' [[String GD|String]] path ''')'''Returns a resource from the filesystem that is loaded during script parsing.'''Note:''' Resource paths can be obtained by right clicking on a resource in the Assets Panel and choosing "Copy Path".::    # Load a scene called main located in the root of the project directory.    var main = preload("res://main.tscn")=== print ===*  void '''print''' '''(''' ... ''')''' varargConverts one or more arguments to strings in the best way possible and prints them to the console.::    a = [1, 2, 3]    print("a", "b", a) # Prints ab[1, 2, 3]=== print_debug ===*  void '''print_debug''' '''(''' ... ''')''' varargLike [[#print|print]], but prints only when used in debug mode.=== print_stack ===*  void '''print_stack ( )'''Prints a stack track at code location, only works when running with debugger turned on.Output in the console would look something like this:::    Frame 0 - res://test.gd:16 in function '_process'=== printerr ===*  void '''printerr''' '''(''' ... ''')''' varargPrints one or more arguments to strings in the best way possible to standard error line.::    printerr("prints to stderr")=== printraw ===*  void '''printraw''' '''(''' ... ''')''' varargPrints one or more arguments to strings in the best way possible to console. No newline is added at the end.::    printraw("A")    printraw("B")    # Prints AB'''Note:''' Due to limitations with Godot's built-in console, this only prints to the terminal. If you need to print in the editor, use another method, such as [[#print|print]].=== prints ===*  void '''prints''' '''(''' ... ''')''' varargPrints one or more arguments to the console with a space between each argument.::    prints("A", "B", "C") # Prints A B C=== printt ===*  void '''printt''' '''(''' ... ''')''' varargPrints one or more arguments to the console with a tab between each argument.::    printt("A", "B", "C") # Prints A       B       C=== push_error ===*  void '''push_error''' '''(''' [[String GD|String]] message ''')'''Pushes an error message to Godot's built-in debugger and to the OS terminal.::    push_error("test error") # Prints "test error" to debugger and terminal as error call=== push_warning ===*  void '''push_warning''' '''(''' [[String GD|String]] message ''')'''Pushes a warning message to Godot's built-in debugger and to the OS terminal.::    push_warning("test warning") # Prints "test warning" to debugger and terminal as warning call=== rad2deg ===*  float '''rad2deg''' '''(''' float rad ''')'''Converts from radians to degrees.::    rad2deg(0.523599) # Returns 30=== rand_range ===*  float '''rand_range''' '''(''' float from, float to ''')'''Random range, any floating point value between {{Span|from}} and {{Span|to}}.::    prints(rand_range(0, 1), rand_range(0, 1)) # Prints e.g. 0.135591 0.405263=== rand_seed ===*  [[Array GD|Array]] '''rand_seed''' '''(''' int seed ''')'''Random from seed: pass a {{Span|seed}}, and an array with both number and new seed is returned. "Seed" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits.=== randf ===*  float '''randf ( )'''Returns a random floating point value on the interval {{Span|[0, 1]}}.::    randf() # Returns e.g. 0.375671=== randi ===*  int '''randi ( )'''Returns a random unsigned 32 bit integer. Use remainder to obtain a random value in the interval {{Span|[0, N - 1]}} (where N is smaller than 2^32).::    randi()           # Returns random integer between 0 and 2^32 - 1    randi() % 20      # Returns random integer between 0 and 19    randi() % 100     # Returns random integer between 0 and 99    randi() % 100 + 1 # Returns random integer between 1 and 100=== randomize ===*  void '''randomize ( )'''Randomizes the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.::    func _ready():        randomize()=== range ===*  [[Array GD|Array]] '''range''' '''(''' ... ''')''' varargReturns an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).::    for i in range(4):        print(i)    for i in range(2, 5):        print(i)    for i in range(0, 6, 2):        print(i)Output:::    0    1    2    3        2    3    4        0    2    4=== range_lerp ===*  float '''range_lerp''' '''(''' float value, float istart, float istop, float ostart, float ostop ''')'''Maps a {{Span|value}} from range {{Span|[istart, istop]}} to {{Span|[ostart, ostop]}}.::    range_lerp(75, 0, 100, -1, 1) # Returns 0.5=== round ===*  float '''round''' '''(''' float s ''')'''Returns the integral value that is nearest to {{Span|s}}, with halfway cases rounded away from zero.::    round(2.6) # Returns 3=== seed ===*  void '''seed''' '''(''' int seed ''')'''Sets seed for the random number generator.::    my_seed = "Godot Rocks"    seed(my_seed.hash())=== sign ===*  float '''sign''' '''(''' float s ''')'''Returns the sign of {{Span|s}}: -1 or 1. Returns 0 if {{Span|s}} is 0.::    sign(-6) # Returns -1    sign(0)  # Returns 0    sign(6)  # Returns 1=== sin ===*  float '''sin''' '''(''' float s ''')'''Returns the sine of angle {{Span|s}} in radians.::    sin(0.523599) # Returns 0.5=== sinh ===*  float '''sinh''' '''(''' float s ''')'''Returns the hyperbolic sine of {{Span|s}}.::    a = log(2.0) # Returns 0.693147    sinh(a) # Returns 0.75=== smoothstep ===*  float '''smoothstep''' '''(''' float from, float to, float weight ''')'''Returns a number smoothly interpolated between the {{Span|from}} and {{Span|to}}, based on the {{Span|weight}}. Similar to [[#lerp|lerp]], but interpolates faster at the beginning and slower at the end.::    smoothstep(0, 2, 0.5) # Returns 0.15    smoothstep(0, 2, 1.0) # Returns 0.5    smoothstep(0, 2, 2.0) # Returns 1.0=== sqrt ===*  float '''sqrt''' '''(''' float s ''')'''Returns the square root of {{Span|s}}.::    sqrt(9) # Returns 3=== step_decimals ===*  int '''step_decimals''' '''(''' float step ''')'''Returns the position of the first non-zero digit, after the decimal point. Note that the maximum return value is 10, which is a design decision in the implementation.::    # n is 0    n = step_decimals(5)    # n is 4    n = step_decimals(1.0005)    # n is 9    n = step_decimals(0.000000005)=== stepify ===*  float '''stepify''' '''(''' float s, float step ''')'''Snaps float value {{Span|s}} to a given {{Span|step}}. This can also be used to round a floating point number to an arbitrary number of decimals.::    stepify(100, 32) # Returns 96    stepify(3.14159, 0.01) # Returns 3.14=== str ===*  [[String GD|String]] '''str''' '''(''' ... ''')''' varargConverts one or more arguments to string in the best way possible.::    var a = [10, 20, 30]    var b = str(a);    len(a) # Returns 3    len(b) # Returns 12=== str2var ===*  [[Variant GD|Variant]] '''str2var''' '''(''' [[String GD|String]] string ''')'''Converts a formatted string that was returned by [[#var2str|var2str]] to the original value.::    a = '{ "a": 1, "b": 2 }'    b = str2var(a)    print(b["a"]) # Prints 1=== tan ===*  float '''tan''' '''(''' float s ''')'''Returns the tangent of angle {{Span|s}} in radians.::    tan(deg2rad(45)) # Returns 1=== tanh ===*  float '''tanh''' '''(''' float s ''')'''Returns the hyperbolic tangent of {{Span|s}}.::    a = log(2.0) # Returns 0.693147    tanh(a)      # Returns 0.6=== to_json ===*  [[String GD|String]] '''to_json''' '''(''' [[Variant GD|Variant]] var ''')'''Converts a Variant {{Span|var}} to JSON text and return the result. Useful for serializing data to store or send over the network.::    a = { "a": 1, "b": 2 }    b = to_json(a)    print(b) # {"a":1, "b":2}=== type_exists ===*  bool '''type_exists''' '''(''' [[String GD|String]] type ''')'''Returns whether the given class exists in [[ClassDB GD|ClassDB]].::    type_exists("Sprite") # Returns true    type_exists("Variant") # Returns false=== typeof ===*  int '''typeof''' '''(''' [[Variant GD|Variant]] what ''')'''Returns the internal type of the given Variant object, using the [[@GlobalScope GD#Variant.Type|Variant.Type]] values.::    p = parse_json('["a", "b", "c"]')    if typeof(p) == TYPE_ARRAY:        print(p[0]) # Prints a    else:        print("unexpected results")=== validate_json ===*  [[String GD|String]] '''validate_json''' '''(''' [[String GD|String]] json ''')'''Checks that {{Span|json}} is valid JSON data. Returns an empty string if valid, or an error message otherwise.::    j = to_json([1, 2, 3])    v = validate_json(j)    if not v:        print("valid")    else:        prints("invalid", v)=== var2bytes ===*  [[PackedByteArray GD|PackedByteArray]] '''var2bytes''' '''(''' [[Variant GD|Variant]] var, bool full_objects=false ''')'''Encodes a variable value to a byte array. When {{Span|full_objects}} is {{Span|true}} encoding objects is allowed (and can potentially include code).=== var2str ===*  [[String GD|String]] '''var2str''' '''(''' [[Variant GD|Variant]] var ''')'''Converts a Variant {{Span|var}} to a formatted string that can later be parsed using [[#str2var|str2var]].::    a = { "a": 1, "b": 2 }    print(var2str(a))prints::    {    "a": 1,    "b": 2    }=== weakref ===*  [[WeakRef GD|WeakRef]] '''weakref''' '''(''' [[Object GD|Object]] obj ''')'''Returns a weak reference to an object.A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.=== wrapf ===*  float '''wrapf''' '''(''' float value, float min, float max ''')'''Wraps float {{Span|value}} between {{Span|min}} and {{Span|max}}.Usable for creating loop-alike behavior or infinite surfaces.::    # a is 0.5    a = wrapf(10.5, 0.0, 10.0)::    # a is 9.5    a = wrapf(-0.5, 0.0, 10.0)::    # Infinite loop between 0.0 and 0.99    f = wrapf(f + 0.1, 0.0, 1.0)::    # Infinite rotation (in radians)    angle = wrapf(angle + 0.1, 0.0, TAU)'''Note:''' If you just want to wrap between 0.0 and {{Span|n}} (where {{Span|n}} is a positive floating-point value), it is better for performance to use the [[#fmod|fmod]] method like {{Span|fmod(number, n)}}.{{Span|wrapf}} is more flexible than using the [[#fmod|fmod]] approach by giving the user a simple control over the minimum value. It also fully supports negative numbers, e.g.::    # Infinite rotation (in radians)    angle = wrapf(angle + 0.1, -PI, PI)=== wrapi ===*  int '''wrapi''' '''(''' int value, int min, int max ''')'''Wraps integer {{Span|value}} between {{Span|min}} and {{Span|max}}.Usable for creating loop-alike behavior or infinite surfaces.::    # a is 0    a = wrapi(10, 0, 10)::    # a is 9    a = wrapi(-1, 0, 10)::    # Infinite loop between 0 and 9    frame = wrapi(frame + 1, 0, 10)'''Note:''' If you just want to wrap between 0 and {{Span|n}} (where {{Span|n}} is a positive integer value), it is better for performance to use the modulo operator like {{Span|number % n}}.{{Span|wrapi}} is more flexible than using the modulo approach by giving the user a simple control over the minimum value. It also fully supports negative numbers, e.g.::    # result is -2    var result = wrapi(-6, -5, -1)=== yield ===*  [[GDScriptFunctionState GD|GDScriptFunctionState]] '''yield''' '''(''' [[Object GD|Object]] object=null, [[String GD|String]] signal="" ''')'''Stops the function execution and returns the current suspended state to the calling function.From the caller, call [[GDScriptFunctionState GD#resume|GDScriptFunctionState.resume()]] on the state to resume execution. This invalidates the state. Within the resumed function, {{Span|yield()}} returns whatever was passed to the {{Span|resume()}} function call.If passed an object and a signal, the execution is resumed when the object emits the given signal. In this case, {{Span|yield()}} returns the argument passed to {{Span|emit_signal()}} if the signal takes only one argument, or an array containing all the arguments passed to {{Span|emit_signal()}} if the signal takes multiple arguments.You can also use {{Span|yield}} to wait for a function to finish:::    func _ready():        yield(countdown(), "completed") # waiting for the countdown() function to complete        print('Ready')        func countdown():        yield(get_tree(), "idle_frame") # returns a GDScriptFunctionState object to _ready()        print(3)        yield(get_tree().create_timer(1.0), "timeout")        print(2)        yield(get_tree().create_timer(1.0), "timeout")        print(1)        yield(get_tree().create_timer(1.0), "timeout")        # prints:    # 3    # 2    # 1    # ReadyWhen yielding on a function, the {{Span|completed}} signal will be emitted automatically when the function returns. It can, therefore, be used as the {{Span|signal}} parameter of the {{Span|yield}} method to resume.In order to yield on a function, the resulting function should also return a {{Span|GDScriptFunctionState}}. Notice {{Span|yield(get_tree(), "idle_frame")}} from the above example.