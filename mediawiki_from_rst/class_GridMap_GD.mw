__NOTOC__'''Inherits:''' [[Spatial GD|Spatial]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Node for 3D tile-based maps.== Description ==GridMap lets you place meshes on a grid interactively. It works both from the editor and from scripts, which can help you create in-game level editors.GridMaps use a [[MeshLibrary GD|MeshLibrary]] which contains a list of tiles. Each tile is a mesh with materials plus optional collision and navigation shapes.A GridMap contains a collection of cells. Each grid cell refers to a tile in the [[MeshLibrary GD|MeshLibrary]]. All cells in the map have the same dimensions.Internally, a GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells.== Tutorials ==*  :doc:`../tutorials/3d/using_gridmaps`== Properties =={| class="wikitable | bool|| [[#cell_center_x|cell_center_x]]|| {{Span|true}}               |-| bool|| [[#cell_center_y|cell_center_y]]|| {{Span|true}}               |-| bool|| [[#cell_center_z|cell_center_z]]|| {{Span|true}}               |-| int|| [[#cell_octant_size|cell_octant_size]]|| {{Span|8}}                  |-| float|| [[#cell_scale|cell_scale]]|| {{Span|1.0}}                |-| [[Vector3 GD|Vector3]]|| [[#cell_size|cell_size]]|| {{Span|Vector3( 2, 2, 2 )}} |-| int|| [[#collision_layer|collision_layer]]|| {{Span|1}}                  |-| int|| [[#collision_mask|collision_mask]]|| {{Span|1}}                  |-| [[MeshLibrary GD|MeshLibrary]]|| [[#mesh_library|mesh_library]]||                        |}== Methods =={| class="wikitable | void|| [[#clear|clear]] '''(''' ''')'''                                                                                                                                                            |-| void|| [[#clear_baked_meshes|clear_baked_meshes]] '''(''' ''')'''                                                                                                                                  |-| [[RID GD|RID]]|| [[#get_bake_mesh_instance|get_bake_mesh_instance]] '''(''' int idx ''')'''                                                                                                |-| [[Array GD|Array]]|| [[#get_bake_meshes|get_bake_meshes]] '''(''' ''')'''                                                                                                                                        |-| int|| [[#get_cell_item|get_cell_item]] '''(''' int x, int y, int z ''')''' const                                                            |-| int|| [[#get_cell_item_orientation|get_cell_item_orientation]] '''(''' int x, int y, int z ''')''' const                                    |-| bool|| [[#get_collision_layer_bit|get_collision_layer_bit]] '''(''' int bit ''')''' const                                                                                        |-| bool|| [[#get_collision_mask_bit|get_collision_mask_bit]] '''(''' int bit ''')''' const                                                                                          |-| [[Array GD|Array]]|| [[#get_meshes|get_meshes]] '''(''' ''')'''                                                                                                                                                  |-| [[Array GD|Array]]|| [[#get_used_cells|get_used_cells]] '''(''' ''')''' const                                                                                                                                    |-| void|| [[#make_baked_meshes|make_baked_meshes]] '''(''' bool gen_lightmap_uv=false, float lightmap_uv_texel_size=0.1 ''')'''                                |-| [[Vector3 GD|Vector3]]|| [[#map_to_world|map_to_world]] '''(''' int x, int y, int z ''')''' const                                                              |-| void|| [[#resource_changed|resource_changed]] '''(''' [[Resource GD|Resource]] resource ''')'''                                                                                             |-| void|| [[#set_cell_item|set_cell_item]] '''(''' int x, int y, int z, int item, int orientation=0 ''')''' |-| void|| [[#set_clip|set_clip]] '''(''' bool enabled, bool clipabove=true, int floor=0, Vector3.Axis axis=0 ''')'''                          |-| void|| [[#set_collision_layer_bit|set_collision_layer_bit]] '''(''' int bit, bool value ''')'''                                                               |-| void|| [[#set_collision_mask_bit|set_collision_mask_bit]] '''(''' int bit, bool value ''')'''                                                                 |-| [[Vector3 GD|Vector3]]|| [[#world_to_map|world_to_map]] '''(''' [[Vector3 GD|Vector3]] pos ''')''' const                                                                                                      |}== Signals ===== cell_size_changed ===*  '''cell_size_changed''' '''(''' [[Vector3 GD|Vector3]] cell_size ''')'''Emitted when [[#cell_size|cell_size]] changes.== Constants ===== INVALID_CELL_ITEM ===*  '''INVALID_CELL_ITEM''' = '''-1'''  Invalid cell item that can be used in [[#set_cell_item|set_cell_item]] to clear cells (or represent an empty cell in [[#get_cell_item|get_cell_item]]).== Property Descriptions ===== cell_center_x ===*  bool '''cell_center_x'''{| class="wikitable | ''Default''|| {{Span|true}}            |-| ''Setter''|| set_center_x(value) |-| ''Getter''|| get_center_x()      |}If {{Span|true}}, grid items are centered on the X axis.=== cell_center_y ===*  bool '''cell_center_y'''{| class="wikitable | ''Default''|| {{Span|true}}            |-| ''Setter''|| set_center_y(value) |-| ''Getter''|| get_center_y()      |}If {{Span|true}}, grid items are centered on the Y axis.=== cell_center_z ===*  bool '''cell_center_z'''{| class="wikitable | ''Default''|| {{Span|true}}            |-| ''Setter''|| set_center_z(value) |-| ''Getter''|| get_center_z()      |}If {{Span|true}}, grid items are centered on the Z axis.=== cell_octant_size ===*  int '''cell_octant_size'''{| class="wikitable | ''Default''|| {{Span|8}}                  |-| ''Setter''|| set_octant_size(value) |-| ''Getter''|| get_octant_size()      |}The size of each octant measured in number of cells. This applies to all three axis.=== cell_scale ===*  float '''cell_scale'''{| class="wikitable | ''Default''|| {{Span|1.0}}               |-| ''Setter''|| set_cell_scale(value) |-| ''Getter''|| get_cell_scale()      |}The scale of the cell items.This does not affect the size of the grid cells themselves, only the items in them. This can be used to make cell items overlap their neighbors.=== cell_size ===*  [[Vector3 GD|Vector3]] '''cell_size'''{| class="wikitable | ''Default''|| {{Span|Vector3( 2, 2, 2 )}} |-| ''Setter''|| set_cell_size(value)   |-| ''Getter''|| get_cell_size()        |}The dimensions of the grid's cells.This does not affect the size of the meshes. See [[#cell_scale|cell_scale]].=== collision_layer ===*  int '''collision_layer'''{| class="wikitable | ''Default''|| {{Span|1}}                      |-| ''Setter''|| set_collision_layer(value) |-| ''Getter''|| get_collision_layer()      |}The physics layers this GridMap is in.GridMaps act as static bodies, meaning they aren't affected by gravity or other forces. They only affect other physics bodies that collide with them.=== collision_mask ===*  int '''collision_mask'''{| class="wikitable | ''Default''|| {{Span|1}}                     |-| ''Setter''|| set_collision_mask(value) |-| ''Getter''|| get_collision_mask()      |}The physics layers this GridMap detects collisions in.=== mesh_library ===*  [[MeshLibrary GD|MeshLibrary]] '''mesh_library'''{| class="wikitable | ''Setter''|| set_mesh_library(value) |-| ''Getter''|| get_mesh_library()      |}The assigned [[MeshLibrary GD|MeshLibrary]].== Method Descriptions ===== clear ===*  void '''clear ( )'''Clear all cells.=== clear_baked_meshes ===*  void '''clear_baked_meshes ( )'''=== get_bake_mesh_instance ===*  [[RID GD|RID]] '''get_bake_mesh_instance''' '''(''' int idx ''')'''=== get_bake_meshes ===*  [[Array GD|Array]] '''get_bake_meshes ( )'''=== get_cell_item ===*  int '''get_cell_item''' '''(''' int x, int y, int z ''')''' constThe [[MeshLibrary GD|MeshLibrary]] item index located at the grid-based X, Y and Z coordinates. If the cell is empty, [[GridMap GD#INVALID_CELL_ITEM|INVALID_CELL_ITEM]] will be returned.=== get_cell_item_orientation ===*  int '''get_cell_item_orientation''' '''(''' int x, int y, int z ''')''' constThe orientation of the cell at the grid-based X, Y and Z coordinates. -1 is returned if the cell is empty.=== get_collision_layer_bit ===*  bool '''get_collision_layer_bit''' '''(''' int bit ''')''' constReturns an individual bit on the [[#collision_layer|collision_layer]].=== get_collision_mask_bit ===*  bool '''get_collision_mask_bit''' '''(''' int bit ''')''' constReturns an individual bit on the [[#collision_mask|collision_mask]].=== get_meshes ===*  [[Array GD|Array]] '''get_meshes ( )'''Returns an array of [[Transform GD|Transform]] and [[Mesh GD|Mesh]] references corresponding to the non-empty cells in the grid. The transforms are specified in world space.=== get_used_cells ===*  [[Array GD|Array]] '''get_used_cells ( )''' constReturns an array of [[Vector3 GD|Vector3]] with the non-empty cell coordinates in the grid map.=== make_baked_meshes ===*  void '''make_baked_meshes''' '''(''' bool gen_lightmap_uv=false, float lightmap_uv_texel_size=0.1 ''')'''=== map_to_world ===*  [[Vector3 GD|Vector3]] '''map_to_world''' '''(''' int x, int y, int z ''')''' constReturns the position of a grid cell in the GridMap's local coordinate space.=== resource_changed ===*  void '''resource_changed''' '''(''' [[Resource GD|Resource]] resource ''')'''=== set_cell_item ===*  void '''set_cell_item''' '''(''' int x, int y, int z, int item, int orientation=0 ''')'''Sets the mesh index for the cell referenced by its grid-based X, Y and Z coordinates.A negative item index such as [[GridMap GD#INVALID_CELL_ITEM|INVALID_CELL_ITEM]] will clear the cell.Optionally, the item's orientation can be passed. For valid orientation values, see [[Basis GD#get_orthogonal_index|Basis.get_orthogonal_index()]].=== set_clip ===*  void '''set_clip''' '''(''' bool enabled, bool clipabove=true, int floor=0, Vector3.Axis axis=0 ''')'''=== set_collision_layer_bit ===*  void '''set_collision_layer_bit''' '''(''' int bit, bool value ''')'''Sets an individual bit on the [[#collision_layer|collision_layer]].=== set_collision_mask_bit ===*  void '''set_collision_mask_bit''' '''(''' int bit, bool value ''')'''Sets an individual bit on the [[#collision_mask|collision_mask]].=== world_to_map ===*  [[Vector3 GD|Vector3]] '''world_to_map''' '''(''' [[Vector3 GD|Vector3]] pos ''')''' constReturns the coordinates of the grid cell containing the given point.{{Span|pos}} should be in the GridMap's local coordinate space.