__NOTOC__'''Inherits:''' [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]] '''<''' [[PacketPeer GD|PacketPeer]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]PacketPeer implementation using the [http://enet.bespin.org/index.html ENet] library.== Description ==A PacketPeer implementation that should be passed to [[SceneTree GD#network_peer|SceneTree.network_peer()]] after being initialized as either a client or server. Events can then be handled by connecting to [[SceneTree GD|SceneTree]] signals.== Tutorials ==*  :doc:`../tutorials/networking/high_level_multiplayer`*  `http://enet.bespin.org/usergroup0.html <http://enet.bespin.org/usergroup0.html>`_== Properties =={| class="wikitable | bool|| [[#always_ordered|always_ordered]]|| {{Span|false}}        |-| int|| [[#channel_count|channel_count]]|| {{Span|3}}            |-| [[#CompressionMode|CompressionMode]]|| [[#compression_mode|compression_mode]]|| {{Span|0}}            |-| bool|| [[#dtls_verify|dtls_verify]]|| {{Span|true}}         |-| bool|| refuse_new_connections|| {{Span|false}} (parent override) |-| bool|| [[#server_relay|server_relay]]|| {{Span|true}}         |-| int|| [[#transfer_channel|transfer_channel]]|| {{Span|-1}}           |-| [[#TransferMode|TransferMode]]|| transfer_mode|| {{Span|2}} (parent override)     |-| bool|| [[#use_dtls|use_dtls]]|| {{Span|false}}        |}== Methods =={| class="wikitable | void|| [[#close_connection|close_connection]] '''(''' int wait_usec=100 ''')'''                                                                                                                                         |-| [[@GlobalScope GD#Error|Error]]|| [[#create_client|create_client]] '''(''' [[String GD|String]] address, int port, int in_bandwidth=0, int out_bandwidth=0, int client_port=0 ''')''' |-| [[@GlobalScope GD#Error|Error]]|| [[#create_server|create_server]] '''(''' int port, int max_clients=32, int in_bandwidth=0, int out_bandwidth=0 ''')'''                                     |-| void|| [[#disconnect_peer|disconnect_peer]] '''(''' int id, bool now=false ''')'''                                                                                                                   |-| int|| [[#get_last_packet_channel|get_last_packet_channel]] '''(''' ''')''' const                                                                                                                                                         |-| int|| [[#get_packet_channel|get_packet_channel]] '''(''' ''')''' const                                                                                                                                                                   |-| [[String GD|String]]|| [[#get_peer_address|get_peer_address]] '''(''' int id ''')''' const                                                                                                                                              |-| int|| [[#get_peer_port|get_peer_port]] '''(''' int id ''')''' const                                                                                                                                                    |-| void|| [[#set_bind_ip|set_bind_ip]] '''(''' [[String GD|String]] ip ''')'''                                                                                                                                                        |-| void|| [[#set_dtls_certificate|set_dtls_certificate]] '''(''' [[X509Certificate GD|X509Certificate]] certificate ''')'''                                                                                                           |-| void|| [[#set_dtls_key|set_dtls_key]] '''(''' [[CryptoKey GD|CryptoKey]] key ''')'''                                                                                                                                               |}== Enumerations ===== CompressionMode ====== COMPRESS_NONE ====== COMPRESS_RANGE_CODER ====== COMPRESS_FASTLZ ====== COMPRESS_ZLIB ====== COMPRESS_ZSTD ===enum '''CompressionMode''':*  '''COMPRESS_NONE''' = '''0'''  No compression. This uses the most bandwidth, but has the upside of requiring the fewest CPU resources.*  '''COMPRESS_RANGE_CODER''' = '''1'''  ENet's built-in range encoding.*  '''COMPRESS_FASTLZ''' = '''2'''  [http://fastlz.org/ FastLZ] compression. This option uses less CPU resources compared to [[NetworkedMultiplayerENet GD#COMPRESS_ZLIB|COMPRESS_ZLIB]], at the expense of using more bandwidth.*  '''COMPRESS_ZLIB''' = '''3'''  [https://www.zlib.net/ Zlib] compression. This option uses less bandwidth compared to [[NetworkedMultiplayerENet GD#COMPRESS_FASTLZ|COMPRESS_FASTLZ]], at the expense of using more CPU resources.*  '''COMPRESS_ZSTD''' = '''4'''  [https://facebook.github.io/zstd/ Zstandard] compression.== Property Descriptions ===== always_ordered ===*  bool '''always_ordered'''{| class="wikitable | ''Default''|| {{Span|false}}                 |-| ''Setter''|| set_always_ordered(value) |-| ''Getter''|| is_always_ordered()       |}Enforce ordered packets when using [[NetworkedMultiplayerPeer GD#TRANSFER_MODE_UNRELIABLE|NetworkedMultiplayerPeer.TRANSFER_MODE_UNRELIABLE()]] (thus behaving similarly to [[NetworkedMultiplayerPeer GD#TRANSFER_MODE_UNRELIABLE_ORDERED|NetworkedMultiplayerPeer.TRANSFER_MODE_UNRELIABLE_ORDERED()]]). This is the only way to use ordering with the RPC system.=== channel_count ===*  int '''channel_count'''{| class="wikitable | ''Default''|| {{Span|3}}                    |-| ''Setter''|| set_channel_count(value) |-| ''Getter''|| get_channel_count()      |}The number of channels to be used by ENet. Channels are used to separate different kinds of data. In reliable or ordered mode, for example, the packet delivery order is ensured on a per channel basis.=== compression_mode ===*  [[#CompressionMode|CompressionMode]] '''compression_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                       |-| ''Setter''|| set_compression_mode(value) |-| ''Getter''|| get_compression_mode()      |}The compression method used for network packets. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all.=== dtls_verify ===*  bool '''dtls_verify'''{| class="wikitable | ''Default''|| {{Span|true}}                       |-| ''Setter''|| set_dtls_verify_enabled(value) |-| ''Getter''|| is_dtls_verify_enabled()       |}Enable or disable certificate verification when [[#use_dtls|use_dtls]] {{Span|true}}.=== server_relay ===*  bool '''server_relay'''{| class="wikitable | ''Default''|| {{Span|true}}                        |-| ''Setter''|| set_server_relay_enabled(value) |-| ''Getter''|| is_server_relay_enabled()       |}Enable or disable the server feature that notifies clients of other peers' connection/disconnection, and relays messages between them. When this option is {{Span|false}}, clients won't be automatically notified of other peers and won't be able to send them packets through the server.=== transfer_channel ===*  int '''transfer_channel'''{| class="wikitable | ''Default''|| {{Span|-1}}                      |-| ''Setter''|| set_transfer_channel(value) |-| ''Getter''|| get_transfer_channel()      |}Set the default channel to be used to transfer data. By default, this value is {{Span|-1}} which means that ENet will only use 2 channels, one for reliable and one for unreliable packets. Channel {{Span|0}} is reserved, and cannot be used. Setting this member to any value between {{Span|0}} and [[#channel_count|channel_count]] (excluded) will force ENet to use that channel for sending data.=== use_dtls ===*  bool '''use_dtls'''{| class="wikitable | ''Default''|| {{Span|false}}               |-| ''Setter''|| set_dtls_enabled(value) |-| ''Getter''|| is_dtls_enabled()       |}When enabled, the client or server created by this peer, will use [[PacketPeerDTLS GD|PacketPeerDTLS]] instead of raw UDP sockets for communicating with the remote peer. This will make the communication encrypted with DTLS at the cost of higher resource usage and potentially larger packet size.Note: When creating a DTLS server, make sure you setup the key/certificate pair via [[#set_dtls_key|set_dtls_key]] and [[#set_dtls_certificate|set_dtls_certificate]]. For DTLS clients, have a look at the [[#dtls_verify|dtls_verify]] option, and configure the certificate accordingly via [[#set_dtls_certificate|set_dtls_certificate]].== Method Descriptions ===== close_connection ===*  void '''close_connection''' '''(''' int wait_usec=100 ''')'''Closes the connection. Ignored if no connection is currently established. If this is a server it tries to notify all clients before forcibly disconnecting them. If this is a client it simply closes the connection to the server.=== create_client ===*  [[@GlobalScope GD#Error|Error]] '''create_client''' '''(''' [[String GD|String]] address, int port, int in_bandwidth=0, int out_bandwidth=0, int client_port=0 ''')'''Create client that connects to a server at {{Span|address}} using specified {{Span|port}}. The given address needs to be either a fully qualified domain name (e.g. {{Span|"www.example.com"}}) or an IP address in IPv4 or IPv6 format (e.g. {{Span|"192.168.1.1"}}). The {{Span|port}} is the port the server is listening on. The {{Span|in_bandwidth}} and {{Span|out_bandwidth}} parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] if a client was created, [[@GlobalScope GD#ERR_ALREADY_IN_USE|@GlobalScope.ERR_ALREADY_IN_USE()]] if this NetworkedMultiplayerENet instance already has an open connection (in which case you need to call [[#close_connection|close_connection]] first) or [[@GlobalScope GD#ERR_CANT_CREATE|@GlobalScope.ERR_CANT_CREATE()]] if the client could not be created. If {{Span|client_port}} is specified, the client will also listen to the given port; this is useful for some NAT traversal techniques.=== create_server ===*  [[@GlobalScope GD#Error|Error]] '''create_server''' '''(''' int port, int max_clients=32, int in_bandwidth=0, int out_bandwidth=0 ''')'''Create server that listens to connections via {{Span|port}}. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use [[#set_bind_ip|set_bind_ip]]. The default IP is the wildcard {{Span|"*"}}, which listens on all available interfaces. {{Span|max_clients}} is the maximum number of clients that are allowed at once, any number up to 4095 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see [[#create_client|create_client]]. Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] if a server was created, [[@GlobalScope GD#ERR_ALREADY_IN_USE|@GlobalScope.ERR_ALREADY_IN_USE()]] if this NetworkedMultiplayerENet instance already has an open connection (in which case you need to call [[#close_connection|close_connection]] first) or [[@GlobalScope GD#ERR_CANT_CREATE|@GlobalScope.ERR_CANT_CREATE()]] if the server could not be created.=== disconnect_peer ===*  void '''disconnect_peer''' '''(''' int id, bool now=false ''')'''Disconnect the given peer. If "now" is set to {{Span|true}}, the connection will be closed immediately without flushing queued messages.=== get_last_packet_channel ===*  int '''get_last_packet_channel ( )''' constReturns the channel of the last packet fetched via [[PacketPeer GD#get_packet|PacketPeer.get_packet()]].=== get_packet_channel ===*  int '''get_packet_channel ( )''' constReturns the channel of the next packet that will be retrieved via [[PacketPeer GD#get_packet|PacketPeer.get_packet()]].=== get_peer_address ===*  [[String GD|String]] '''get_peer_address''' '''(''' int id ''')''' constReturns the IP address of the given peer.=== get_peer_port ===*  int '''get_peer_port''' '''(''' int id ''')''' constReturns the remote port of the given peer.=== set_bind_ip ===*  void '''set_bind_ip''' '''(''' [[String GD|String]] ip ''')'''The IP used when creating a server. This is set to the wildcard {{Span|"*"}} by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: {{Span|"192.168.1.1"}}.=== set_dtls_certificate ===*  void '''set_dtls_certificate''' '''(''' [[X509Certificate GD|X509Certificate]] certificate ''')'''Configure the [[X509Certificate GD|X509Certificate]] to use when [[#use_dtls|use_dtls]] is {{Span|true}}. For servers, you must also setup the [[CryptoKey GD|CryptoKey]] via [[#set_dtls_key|set_dtls_key]].=== set_dtls_key ===*  void '''set_dtls_key''' '''(''' [[CryptoKey GD|CryptoKey]] key ''')'''Configure the [[CryptoKey GD|CryptoKey]] to use when [[#use_dtls|use_dtls]] is {{Span|true}}. Remember to also call [[#set_dtls_certificate|set_dtls_certificate]] to setup your [[X509Certificate GD|X509Certificate]].