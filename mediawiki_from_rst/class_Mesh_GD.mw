__NOTOC__'''Inherits:''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[ArrayMesh GD|ArrayMesh]], [[PrimitiveMesh GD|PrimitiveMesh]]A [[Resource GD|Resource]] that contains vertex array-based geometry.== Description ==Mesh is a type of [[Resource GD|Resource]] that contains vertex array-based geometry, divided in ''surfaces''. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.== Properties =={| class="wikitable | [[Vector2 GD|Vector2]]|| [[#lightmap_size_hint|lightmap_size_hint]]|| {{Span|Vector2( 0, 0 )}} |}== Methods =={| class="wikitable | [[Shape GD|Shape]]|| [[#create_convex_shape|create_convex_shape]] '''(''' ''')''' const                                                                      |-| [[Mesh GD|Mesh]]|| [[#create_outline|create_outline]] '''(''' float margin ''')''' const                                               |-| [[Shape GD|Shape]]|| [[#create_trimesh_shape|create_trimesh_shape]] '''(''' ''')''' const                                                                    |-| [[TriangleMesh GD|TriangleMesh]]|| [[#generate_triangle_mesh|generate_triangle_mesh]] '''(''' ''')''' const                                                                |-| [[AABB GD|AABB]]|| [[#get_aabb|get_aabb]] '''(''' ''')''' const                                                                                            |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#get_faces|get_faces]] '''(''' ''')''' const                                                                                          |-| int|| [[#get_surface_count|get_surface_count]] '''(''' ''')''' const                                                                          |-| [[Array GD|Array]]|| [[#surface_get_arrays|surface_get_arrays]] '''(''' int surf_idx ''')''' const                                         |-| [[Array GD|Array]]|| [[#surface_get_blend_shape_arrays|surface_get_blend_shape_arrays]] '''(''' int surf_idx ''')''' const                 |-| [[Material GD|Material]]|| [[#surface_get_material|surface_get_material]] '''(''' int surf_idx ''')''' const                                     |-| void|| [[#surface_set_material|surface_set_material]] '''(''' int surf_idx, [[Material GD|Material]] material ''')''' |}== Enumerations ===== PrimitiveType ====== PRIMITIVE_POINTS ====== PRIMITIVE_LINES ====== PRIMITIVE_LINE_STRIP ====== PRIMITIVE_TRIANGLES ====== PRIMITIVE_TRIANGLE_STRIP ===enum '''PrimitiveType''':*  '''PRIMITIVE_POINTS''' = '''0'''  Render array as points (one vertex equals one point).*  '''PRIMITIVE_LINES''' = '''1'''  Render array as lines (every two vertices a line is created).*  '''PRIMITIVE_LINE_STRIP''' = '''2'''  Render array as line strip.*  '''PRIMITIVE_TRIANGLES''' = '''3'''  Render array as triangles (every three vertices a triangle is created).*  '''PRIMITIVE_TRIANGLE_STRIP''' = '''4'''  Render array as triangle strips.=== BlendShapeMode ====== BLEND_SHAPE_MODE_NORMALIZED ====== BLEND_SHAPE_MODE_RELATIVE ===enum '''BlendShapeMode''':*  '''BLEND_SHAPE_MODE_NORMALIZED''' = '''0'''  Blend shapes are normalized.*  '''BLEND_SHAPE_MODE_RELATIVE''' = '''1'''  Blend shapes are relative to base weight.=== ArrayFormat ====== ARRAY_FORMAT_VERTEX ====== ARRAY_FORMAT_NORMAL ====== ARRAY_FORMAT_TANGENT ====== ARRAY_FORMAT_COLOR ====== ARRAY_FORMAT_TEX_UV ====== ARRAY_FORMAT_TEX_UV2 ====== ARRAY_FORMAT_BONES ====== ARRAY_FORMAT_WEIGHTS ====== ARRAY_FORMAT_INDEX ====== ARRAY_COMPRESS_NORMAL ====== ARRAY_COMPRESS_TANGENT ====== ARRAY_COMPRESS_COLOR ====== ARRAY_COMPRESS_TEX_UV ====== ARRAY_COMPRESS_TEX_UV2 ====== ARRAY_COMPRESS_INDEX ====== ARRAY_FLAG_USE_2D_VERTICES ====== ARRAY_COMPRESS_DEFAULT ===enum '''ArrayFormat''':*  '''ARRAY_FORMAT_VERTEX''' = '''1'''  Mesh array contains vertices. All meshes require a vertex array so this should always be present.*  '''ARRAY_FORMAT_NORMAL''' = '''2'''  Mesh array contains normals.*  '''ARRAY_FORMAT_TANGENT''' = '''4'''  Mesh array contains tangents.*  '''ARRAY_FORMAT_COLOR''' = '''8'''  Mesh array contains colors.*  '''ARRAY_FORMAT_TEX_UV''' = '''16'''  Mesh array contains UVs.*  '''ARRAY_FORMAT_TEX_UV2''' = '''32'''  Mesh array contains second UV.*  '''ARRAY_FORMAT_BONES''' = '''64'''  Mesh array contains bones.*  '''ARRAY_FORMAT_WEIGHTS''' = '''128'''  Mesh array contains bone weights.*  '''ARRAY_FORMAT_INDEX''' = '''256'''  Mesh array uses indices.*  '''ARRAY_COMPRESS_NORMAL''' = '''1024'''  Flag used to mark a compressed (half float) normal array.*  '''ARRAY_COMPRESS_TANGENT''' = '''2048'''  Flag used to mark a compressed (half float) tangent array.*  '''ARRAY_COMPRESS_COLOR''' = '''4096'''  Flag used to mark a compressed (half float) color array.*  '''ARRAY_COMPRESS_TEX_UV''' = '''8192'''  Flag used to mark a compressed (half float) UV coordinates array.*  '''ARRAY_COMPRESS_TEX_UV2''' = '''16384'''  Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates.*  '''ARRAY_COMPRESS_INDEX''' = '''131072'''  Flag used to mark a compressed index array.*  '''ARRAY_FLAG_USE_2D_VERTICES''' = '''262144'''  Flag used to mark that the array contains 2D vertices.*  '''ARRAY_COMPRESS_DEFAULT''' = '''31744'''  Used to set flags [[Mesh GD#ARRAY_COMPRESS_NORMAL|ARRAY_COMPRESS_NORMAL]], [[Mesh GD#ARRAY_COMPRESS_TANGENT|ARRAY_COMPRESS_TANGENT]], [[Mesh GD#ARRAY_COMPRESS_COLOR|ARRAY_COMPRESS_COLOR]], [[Mesh GD#ARRAY_COMPRESS_TEX_UV|ARRAY_COMPRESS_TEX_UV]] and [[Mesh GD#ARRAY_COMPRESS_TEX_UV2|ARRAY_COMPRESS_TEX_UV2]] quickly.=== ArrayType ====== ARRAY_VERTEX ====== ARRAY_NORMAL ====== ARRAY_TANGENT ====== ARRAY_COLOR ====== ARRAY_TEX_UV ====== ARRAY_TEX_UV2 ====== ARRAY_BONES ====== ARRAY_WEIGHTS ====== ARRAY_INDEX ====== ARRAY_MAX ===enum '''ArrayType''':*  '''ARRAY_VERTEX''' = '''0'''  Array of vertices.*  '''ARRAY_NORMAL''' = '''1'''  Array of normals.*  '''ARRAY_TANGENT''' = '''2'''  Array of tangents as an array of floats, 4 floats per tangent.*  '''ARRAY_COLOR''' = '''3'''  Array of colors.*  '''ARRAY_TEX_UV''' = '''4'''  Array of UV coordinates.*  '''ARRAY_TEX_UV2''' = '''5'''  Array of second set of UV coordinates.*  '''ARRAY_BONES''' = '''6'''  Array of bone data.*  '''ARRAY_WEIGHTS''' = '''7'''  Array of weights.*  '''ARRAY_INDEX''' = '''8'''  Array of indices.*  '''ARRAY_MAX''' = '''9'''  Represents the size of the [[#ArrayType|ArrayType]] enum.== Property Descriptions ===== lightmap_size_hint ===*  [[Vector2 GD|Vector2]] '''lightmap_size_hint'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}           |-| ''Setter''|| set_lightmap_size_hint(value) |-| ''Getter''|| get_lightmap_size_hint()      |}Sets a hint to be used for lightmap resolution.== Method Descriptions ===== create_convex_shape ===*  [[Shape GD|Shape]] '''create_convex_shape ( )''' constCalculate a [[ConvexPolygonShape GD|ConvexPolygonShape]] from the mesh.=== create_outline ===*  [[Mesh GD|Mesh]] '''create_outline''' '''(''' float margin ''')''' constCalculate an outline mesh at a defined offset (margin) from the original mesh.'''Note:''' This method typically returns the vertices in reverse order (e.g. clockwise to counterclockwise).=== create_trimesh_shape ===*  [[Shape GD|Shape]] '''create_trimesh_shape ( )''' constCalculate a [[ConcavePolygonShape GD|ConcavePolygonShape]] from the mesh.=== generate_triangle_mesh ===*  [[TriangleMesh GD|TriangleMesh]] '''generate_triangle_mesh ( )''' constGenerate a [[TriangleMesh GD|TriangleMesh]] from the mesh.=== get_aabb ===*  [[AABB GD|AABB]] '''get_aabb ( )''' constReturns the smallest [[AABB GD|AABB]] enclosing this mesh. Not affected by {{Span|custom_aabb}}.'''Note:''' This is only implemented for [[ArrayMesh GD|ArrayMesh]] and [[PrimitiveMesh GD|PrimitiveMesh]].=== get_faces ===*  [[PackedVector3Array GD|PackedVector3Array]] '''get_faces ( )''' constReturns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.=== get_surface_count ===*  int '''get_surface_count ( )''' constReturns the amount of surfaces that the {{Span|Mesh}} holds.=== surface_get_arrays ===*  [[Array GD|Array]] '''surface_get_arrays''' '''(''' int surf_idx ''')''' constReturns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see [[ArrayMesh GD#add_surface_from_arrays|ArrayMesh.add_surface_from_arrays()]]).=== surface_get_blend_shape_arrays ===*  [[Array GD|Array]] '''surface_get_blend_shape_arrays''' '''(''' int surf_idx ''')''' constReturns the blend shape arrays for the requested surface.=== surface_get_material ===*  [[Material GD|Material]] '''surface_get_material''' '''(''' int surf_idx ''')''' constReturns a [[Material GD|Material]] in a given surface. Surface is rendered using this material.=== surface_set_material ===*  void '''surface_set_material''' '''(''' int surf_idx, [[Material GD|Material]] material ''')'''Sets a [[Material GD|Material]] for a given surface. Surface will be rendered using this material.