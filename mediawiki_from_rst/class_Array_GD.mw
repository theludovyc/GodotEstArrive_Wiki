__NOTOC__Generic array datatype.== Description ==Generic array which can contain several elements of any type, accessible by a numerical index starting at 0. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 the second to last, etc.).'''Example:'''::    var array = ["One", 2, 3, "Four"]    print(array[0]) # One.    print(array[2]) # 3.    print(array[-1]) # Four.    array[2] = "Three"    print(array[-2]) # Three.Arrays can be concatenated using the {{Span|+}} operator:::    var array1 = ["One", 2]    var array2 = [3, "Four"]    print(array1 + array2) # ["One", 2, 3, "Four"]Arrays are always passed by reference.== Methods =={| class="wikitable | [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedColorArray GD|PackedColorArray]] from ''')'''                                                                                                          |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedVector3Array GD|PackedVector3Array]] from ''')'''                                                                                                      |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] from ''')'''                                                                                                      |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedStringArray GD|PackedStringArray]] from ''')'''                                                                                                        |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedFloat64Array GD|PackedFloat64Array]] from ''')'''                                                                                                      |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedFloat32Array GD|PackedFloat32Array]] from ''')'''                                                                                                      |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedInt64Array GD|PackedInt64Array]] from ''')'''                                                                                                          |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedInt32Array GD|PackedInt32Array]] from ''')'''                                                                                                          |-| [[Array GD|Array]]|| [[Array GD#Array|Array]] '''(''' [[PackedByteArray GD|PackedByteArray]] from ''')'''                                                                                                            |-| void|| [[#append|append]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                         |-| [[Variant GD|Variant]]|| [[#back|back]] '''(''' ''')'''                                                                                                                                                                 |-| int|| [[#bsearch|bsearch]] '''(''' [[Variant GD|Variant]] value, bool before=true ''')'''                                                                                  |-| int|| [[#bsearch_custom|bsearch_custom]] '''(''' [[Variant GD|Variant]] value, [[Object GD|Object]] obj, [[String GD|String]] func, bool before=true ''')''' |-| void|| [[#clear|clear]] '''(''' ''')'''                                                                                                                                                               |-| int|| [[#count|count]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                           |-| [[Array GD|Array]]|| [[#duplicate|duplicate]] '''(''' bool deep=false ''')'''                                                                                                                    |-| bool|| [[#empty|empty]] '''(''' ''')'''                                                                                                                                                               |-| void|| [[#erase|erase]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                           |-| int|| [[#find|find]] '''(''' [[Variant GD|Variant]] what, int from=0 ''')'''                                                                                                |-| int|| [[#find_last|find_last]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                   |-| [[Variant GD|Variant]]|| [[#front|front]] '''(''' ''')'''                                                                                                                                                               |-| bool|| [[#has|has]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                               |-| int|| [[#hash|hash]] '''(''' ''')'''                                                                                                                                                                 |-| void|| [[#insert|insert]] '''(''' int position, [[Variant GD|Variant]] value ''')'''                                                                                         |-| void|| [[#invert|invert]] '''(''' ''')'''                                                                                                                                                             |-| [[Variant GD|Variant]]|| [[#max|max]] '''(''' ''')'''                                                                                                                                                                   |-| [[Variant GD|Variant]]|| [[#min|min]] '''(''' ''')'''                                                                                                                                                                   |-| [[Variant GD|Variant]]|| [[#pop_back|pop_back]] '''(''' ''')'''                                                                                                                                                         |-| [[Variant GD|Variant]]|| [[#pop_front|pop_front]] '''(''' ''')'''                                                                                                                                                       |-| void|| [[#push_back|push_back]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                   |-| void|| [[#push_front|push_front]] '''(''' [[Variant GD|Variant]] value ''')'''                                                                                                                 |-| void|| [[#remove|remove]] '''(''' int position ''')'''                                                                                                                              |-| void|| [[#resize|resize]] '''(''' int size ''')'''                                                                                                                                  |-| int|| [[#rfind|rfind]] '''(''' [[Variant GD|Variant]] what, int from=-1 ''')'''                                                                                             |-| void|| [[#shuffle|shuffle]] '''(''' ''')'''                                                                                                                                                           |-| int|| [[#size|size]] '''(''' ''')'''                                                                                                                                                                 |-| [[Array GD|Array]]|| [[#slice|slice]] '''(''' int begin, int end, int step=1, bool deep=false ''')'''                                      |-| void|| [[#sort|sort]] '''(''' ''')'''                                                                                                                                                                 |-| void|| [[#sort_custom|sort_custom]] '''(''' [[Object GD|Object]] obj, [[String GD|String]] func ''')'''                                                                                 |}== Method Descriptions ===== Array ===*  [[Array GD|Array]] '''Array''' '''(''' [[PackedColorArray GD|PackedColorArray]] from ''')'''Constructs an array from a [[PackedColorArray GD|PackedColorArray]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedVector3Array GD|PackedVector3Array]] from ''')'''Constructs an array from a [[PackedVector3Array GD|PackedVector3Array]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] from ''')'''Constructs an array from a [[PackedVector2Array GD|PackedVector2Array]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedStringArray GD|PackedStringArray]] from ''')'''Constructs an array from a [[PackedStringArray GD|PackedStringArray]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedFloat64Array GD|PackedFloat64Array]] from ''')'''Constructs an array from a [[PackedFloat64Array GD|PackedFloat64Array]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedFloat32Array GD|PackedFloat32Array]] from ''')'''Constructs an array from a [[PackedFloat32Array GD|PackedFloat32Array]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedInt64Array GD|PackedInt64Array]] from ''')'''Constructs an array from a [[PackedInt64Array GD|PackedInt64Array]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedInt32Array GD|PackedInt32Array]] from ''')'''Constructs an array from a [[PackedInt32Array GD|PackedInt32Array]].*  [[Array GD|Array]] '''Array''' '''(''' [[PackedByteArray GD|PackedByteArray]] from ''')'''Constructs an array from a [[PackedByteArray GD|PackedByteArray]].=== append ===*  void '''append''' '''(''' [[Variant GD|Variant]] value ''')'''Appends an element at the end of the array (alias of [[#push_back|push_back]]).=== back ===*  [[Variant GD|Variant]] '''back ( )'''Returns the last element of the array, or {{Span|null}} if the array is empty.=== bsearch ===*  int '''bsearch''' '''(''' [[Variant GD|Variant]] value, bool before=true ''')'''Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a {{Span|before}} specifier can be passed. If {{Span|false}}, the returned index comes after all existing entries of the value in the array.'''Note:''' Calling [[#bsearch|bsearch]] on an unsorted array results in unexpected behavior.=== bsearch_custom ===*  int '''bsearch_custom''' '''(''' [[Variant GD|Variant]] value, [[Object GD|Object]] obj, [[String GD|String]] func, bool before=true ''')'''Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a {{Span|before}} specifier can be passed. If {{Span|false}}, the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return {{Span|true}} if the first argument is less than the second, and return {{Span|false}} otherwise.'''Note:''' Calling [[#bsearch|bsearch]] on an unsorted array results in unexpected behavior.=== clear ===*  void '''clear ( )'''Clears the array. This is equivalent to using [[#resize|resize]] with a size of {{Span|0}}.=== count ===*  int '''count''' '''(''' [[Variant GD|Variant]] value ''')'''Returns the number of times an element is in the array.=== duplicate ===*  [[Array GD|Array]] '''duplicate''' '''(''' bool deep=false ''')'''Returns a copy of the array.If {{Span|deep}} is {{Span|true}}, a deep copy is performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If {{Span|false}}, a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array.=== empty ===*  bool '''empty ( )'''Returns {{Span|true}} if the array is empty.=== erase ===*  void '''erase''' '''(''' [[Variant GD|Variant]] value ''')'''Removes the first occurrence of a value from the array.=== find ===*  int '''find''' '''(''' [[Variant GD|Variant]] what, int from=0 ''')'''Searches the array for a value and returns its index or -1 if not found. Optionally, the initial search index can be passed.=== find_last ===*  int '''find_last''' '''(''' [[Variant GD|Variant]] value ''')'''Searches the array in reverse order for a value and returns its index or -1 if not found.=== front ===*  [[Variant GD|Variant]] '''front ( )'''Returns the first element of the array, or {{Span|null}} if the array is empty.=== has ===*  bool '''has''' '''(''' [[Variant GD|Variant]] value ''')'''Returns {{Span|true}} if the array contains the given value.::    ["inside", 7].has("inside") == true    ["inside", 7].has("outside") == false    ["inside", 7].has(7) == true    ["inside", 7].has("7") == false=== hash ===*  int '''hash ( )'''Returns a hashed integer value representing the array contents.=== insert ===*  void '''insert''' '''(''' int position, [[Variant GD|Variant]] value ''')'''Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ({{Span|pos == size()}}).=== invert ===*  void '''invert ( )'''Reverses the order of the elements in the array.=== max ===*  [[Variant GD|Variant]] '''max ( )'''Returns the maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, {{Span|null}} is returned.=== min ===*  [[Variant GD|Variant]] '''min ( )'''Returns the minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, {{Span|null}} is returned.=== pop_back ===*  [[Variant GD|Variant]] '''pop_back ( )'''Removes and returns the last element of the array. Returns {{Span|null}} if the array is empty.=== pop_front ===*  [[Variant GD|Variant]] '''pop_front ( )'''Removes and returns the first element of the array. Returns {{Span|null}} if the array is empty.=== push_back ===*  void '''push_back''' '''(''' [[Variant GD|Variant]] value ''')'''Appends an element at the end of the array.=== push_front ===*  void '''push_front''' '''(''' [[Variant GD|Variant]] value ''')'''Adds an element at the beginning of the array.=== remove ===*  void '''remove''' '''(''' int position ''')'''Removes an element from the array by index.=== resize ===*  void '''resize''' '''(''' int size ''')'''Resizes the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are {{Span|null}}.=== rfind ===*  int '''rfind''' '''(''' [[Variant GD|Variant]] what, int from=-1 ''')'''Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.=== shuffle ===*  void '''shuffle ( )'''Shuffles the array such that the items will have a random order. This method uses the global random number generator common to methods such as [[@GDScript GD#randi|@GDScript.randi()]]. Call [[@GDScript GD#randomize|@GDScript.randomize()]] to ensure that a new seed will be used each time if you want non-reproducible shuffling.=== size ===*  int '''size ( )'''Returns the number of elements in the array.=== slice ===*  [[Array GD|Array]] '''slice''' '''(''' int begin, int end, int step=1, bool deep=false ''')'''Duplicates the subset described in the function and returns it in an array, deeply copying the array if {{Span|deep}} is {{Span|true}}. Lower and upper index are inclusive, with the {{Span|step}} describing the change between indices while slicing.=== sort ===*  void '''sort ( )'''Sorts the array.'''Note:''' Strings are sorted in alphabetical order (as opposed to natural order). This may lead to unexpected behavior when sorting an array of strings ending with a sequence of numbers. Consider the following example:::    var strings = ["string1", "string2", "string10", "string11"]    strings.sort()    print(strings) # Prints [string1, string10, string11, string2]=== sort_custom ===*  void '''sort_custom''' '''(''' [[Object GD|Object]] obj, [[String GD|String]] func ''')'''Sorts the array using a custom method. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return either {{Span|true}} or {{Span|false}}.'''Note:''' you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.::    class MyCustomSorter:        static func sort_ascending(a, b):            if a[0] < b[0]:                return true            return false        var my_items = [[5, "Potato"], [9, "Rice"], [4, "Tomato"]]    my_items.sort_custom(MyCustomSorter, "sort_ascending")    print(my_items) # Prints [[4, Tomato], [5, Potato], [9, Rice]].