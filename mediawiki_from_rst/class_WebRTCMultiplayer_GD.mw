__NOTOC__'''Inherits:''' [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]] '''<''' [[PacketPeer GD|PacketPeer]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]A simple interface to create a peer-to-peer mesh network composed of [[WebRTCPeerConnection GD|WebRTCPeerConnection]] that is compatible with the [[MultiplayerAPI GD|MultiplayerAPI]].== Description ==This class constructs a full mesh of [[WebRTCPeerConnection GD|WebRTCPeerConnection]] (one connection for each peer) that can be used as a [[MultiplayerAPI GD#network_peer|MultiplayerAPI.network_peer()]].You can add each [[WebRTCPeerConnection GD|WebRTCPeerConnection]] via [[#add_peer|add_peer]] or remove them via [[#remove_peer|remove_peer]]. Peers must be added in [[WebRTCPeerConnection GD#STATE_NEW|WebRTCPeerConnection.STATE_NEW()]] state to allow it to create the appropriate channels. This class will not create offers nor set descriptions, it will only poll them, and notify connections and disconnections.[[NetworkedMultiplayerPeer GD#connection_succeeded|NetworkedMultiplayerPeer.connection_succeeded()]] and [[NetworkedMultiplayerPeer GD#server_disconnected|NetworkedMultiplayerPeer.server_disconnected()]] will not be emitted unless {{Span|server_compatibility}} is {{Span|true}} in [[#initialize|initialize]]. Beside that data transfer works like in a [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]].== Properties =={| class="wikitable | bool|| refuse_new_connections|| {{Span|false}} (parent override) |-| [[#TransferMode|TransferMode]]|| transfer_mode|| {{Span|2}} (parent override)     |}== Methods =={| class="wikitable | [[@GlobalScope GD#Error|Error]]|| [[#add_peer|add_peer]] '''(''' [[WebRTCPeerConnection GD|WebRTCPeerConnection]] peer, int peer_id, int unreliable_lifetime=1 ''')''' |-| void|| [[#close|close]] '''(''' ''')'''                                                                                                                                                |-| [[Dictionary GD|Dictionary]]|| [[#get_peer|get_peer]] '''(''' int peer_id ''')'''                                                                                                            |-| [[Dictionary GD|Dictionary]]|| [[#get_peers|get_peers]] '''(''' ''')'''                                                                                                                                        |-| bool|| [[#has_peer|has_peer]] '''(''' int peer_id ''')'''                                                                                                            |-| [[@GlobalScope GD#Error|Error]]|| [[#initialize|initialize]] '''(''' int peer_id, bool server_compatibility=false ''')'''                                                    |-| void|| [[#remove_peer|remove_peer]] '''(''' int peer_id ''')'''                                                                                                      |}== Method Descriptions ===== add_peer ===*  [[@GlobalScope GD#Error|Error]] '''add_peer''' '''(''' [[WebRTCPeerConnection GD|WebRTCPeerConnection]] peer, int peer_id, int unreliable_lifetime=1 ''')'''Add a new peer to the mesh with the given {{Span|peer_id}}. The [[WebRTCPeerConnection GD|WebRTCPeerConnection]] must be in state [[WebRTCPeerConnection GD#STATE_NEW|WebRTCPeerConnection.STATE_NEW()]].Three channels will be created for reliable, unreliable, and ordered transport. The value of {{Span|unreliable_lifetime}} will be passed to the {{Span|maxPacketLifetime}} option when creating unreliable and ordered channels (see [[WebRTCPeerConnection GD#create_data_channel|WebRTCPeerConnection.create_data_channel()]]).=== close ===*  void '''close ( )'''Close all the add peer connections and channels, freeing all resources.=== get_peer ===*  [[Dictionary GD|Dictionary]] '''get_peer''' '''(''' int peer_id ''')'''Return a dictionary representation of the peer with given {{Span|peer_id}} with three keys. {{Span|connection}} containing the [[WebRTCPeerConnection GD|WebRTCPeerConnection]] to this peer, {{Span|channels}} an array of three [[WebRTCDataChannel GD|WebRTCDataChannel]], and {{Span|connected}} a boolean representing if the peer connection is currently connected (all three channels are open).=== get_peers ===*  [[Dictionary GD|Dictionary]] '''get_peers ( )'''Returns a dictionary which keys are the peer ids and values the peer representation as in [[#get_peer|get_peer]].=== has_peer ===*  bool '''has_peer''' '''(''' int peer_id ''')'''Returns {{Span|true}} if the given {{Span|peer_id}} is in the peers map (it might not be connected though).=== initialize ===*  [[@GlobalScope GD#Error|Error]] '''initialize''' '''(''' int peer_id, bool server_compatibility=false ''')'''Initialize the multiplayer peer with the given {{Span|peer_id}} (must be between 1 and 2147483647).If {{Span|server_compatibilty}} is {{Span|false}} (default), the multiplayer peer will be immediately in state [[NetworkedMultiplayerPeer GD#CONNECTION_CONNECTED|NetworkedMultiplayerPeer.CONNECTION_CONNECTED()]] and [[NetworkedMultiplayerPeer GD#connection_succeeded|NetworkedMultiplayerPeer.connection_succeeded()]] will not be emitted.If {{Span|server_compatibilty}} is {{Span|true}} the peer will suppress all [[NetworkedMultiplayerPeer GD#peer_connected|NetworkedMultiplayerPeer.peer_connected()]] signals until a peer with id [[NetworkedMultiplayerPeer GD#TARGET_PEER_SERVER|NetworkedMultiplayerPeer.TARGET_PEER_SERVER()]] connects and then emit [[NetworkedMultiplayerPeer GD#connection_succeeded|NetworkedMultiplayerPeer.connection_succeeded()]]. After that the signal [[NetworkedMultiplayerPeer GD#peer_connected|NetworkedMultiplayerPeer.peer_connected()]] will be emitted for every already connected peer, and any new peer that might connect. If the server peer disconnects after that, signal [[NetworkedMultiplayerPeer GD#server_disconnected|NetworkedMultiplayerPeer.server_disconnected()]] will be emitted and state will become [[NetworkedMultiplayerPeer GD#CONNECTION_CONNECTED|NetworkedMultiplayerPeer.CONNECTION_CONNECTED()]].=== remove_peer ===*  void '''remove_peer''' '''(''' int peer_id ''')'''Remove the peer with given {{Span|peer_id}} from the mesh. If the peer was connected, and [[NetworkedMultiplayerPeer GD#peer_connected|NetworkedMultiplayerPeer.peer_connected()]] was emitted for it, then [[NetworkedMultiplayerPeer GD#peer_disconnected|NetworkedMultiplayerPeer.peer_disconnected()]] will be emitted.