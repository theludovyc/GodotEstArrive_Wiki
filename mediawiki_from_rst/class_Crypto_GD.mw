__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Access to advanced cryptographic functionalities.== Description ==The Crypto class allows you to access some more advanced cryptographic functionalities in Godot.For now, this includes generating cryptographically secure random bytes, and RSA keys and self-signed X509 certificates generation. More functionalities are planned for future releases.::    extends Node        var crypto = Crypto.new()    var key = CryptoKey.new()    var cert = X509Certificate.new()        func _ready():        # Generate new RSA key.        key = crypto.generate_rsa(4096)        # Generate new self-signed certificate with the given key.        cert = crypto.generate_self_signed_certificate(key, "CN=mydomain.com,O=My Game Company,C=IT")        # Save key and certificate in the user folder.        key.save("user://generated.key")        cert.save("user://generated.crt")'''Note:''' Not available in HTML5 exports.== Methods =={| class="wikitable | [[PackedByteArray GD|PackedByteArray]]|| [[#generate_random_bytes|generate_random_bytes]] '''(''' int size ''')'''                                                                                                                                                                                                                                |-| [[CryptoKey GD|CryptoKey]]|| [[#generate_rsa|generate_rsa]] '''(''' int size ''')'''                                                                                                                                                                                                                                                  |-| [[X509Certificate GD|X509Certificate]]|| [[#generate_self_signed_certificate|generate_self_signed_certificate]] '''(''' [[CryptoKey GD|CryptoKey]] key, [[String GD|String]] issuer_name="CN=myserver,O=myorganisation,C=IT", [[String GD|String]] not_before="20140101000000", [[String GD|String]] not_after="20340101000000" ''')''' |}== Method Descriptions ===== generate_random_bytes ===*  [[PackedByteArray GD|PackedByteArray]] '''generate_random_bytes''' '''(''' int size ''')'''Generates a [[PackedByteArray GD|PackedByteArray]] of cryptographically secure random bytes with given {{Span|size}}.=== generate_rsa ===*  [[CryptoKey GD|CryptoKey]] '''generate_rsa''' '''(''' int size ''')'''Generates an RSA [[CryptoKey GD|CryptoKey]] that can be used for creating self-signed certificates and passed to [[StreamPeerSSL GD#accept_stream|StreamPeerSSL.accept_stream()]].=== generate_self_signed_certificate ===*  [[X509Certificate GD|X509Certificate]] '''generate_self_signed_certificate''' '''(''' [[CryptoKey GD|CryptoKey]] key, [[String GD|String]] issuer_name="CN=myserver,O=myorganisation,C=IT", [[String GD|String]] not_before="20140101000000", [[String GD|String]] not_after="20340101000000" ''')'''Generates a self-signed [[X509Certificate GD|X509Certificate]] from the given [[CryptoKey GD|CryptoKey]] and {{Span|issuer_name}}. The certificate validity will be defined by {{Span|not_before}} and {{Span|not_after}} (first valid date and last valid date). The {{Span|issuer_name}} must contain at least "CN=" (common name, i.e. the domain name), "O=" (organization, i.e. your company name), "C=" (country, i.e. 2 lettered ISO-3166 code of the country the organization is based in).A small example to generate an RSA key and a X509 self-signed certificate.::    var crypto = Crypto.new()    # Generate 4096 bits RSA key.    var key = crypto.generate_rsa(4096)    # Generate self-signed certificate using the given key.    var cert = crypto.generate_self_signed_certificate(key, "CN=example.com,O=A Game Company,C=IT")