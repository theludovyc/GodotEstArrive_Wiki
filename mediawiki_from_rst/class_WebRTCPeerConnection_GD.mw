__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[WebRTCPeerConnectionGDNative GD|WebRTCPeerConnectionGDNative]]Interface to a WebRTC peer connection.== Description ==A WebRTC connection between the local computer and a remote peer. Provides an interface to connect, maintain and monitor the connection.Setting up a WebRTC connection between two peers from now on) may not seem a trivial task, but it can be broken down into 3 main steps:*  The peer that wants to initiate the connection ({{Span|A}} from now on) creates an offer and send it to the other peer ({{Span|B}} from now on).*  {{Span|B}} receives the offer, generate and answer, and sends it to {{Span|A}}).*  {{Span|A}} and {{Span|B}} then generates and exchange ICE candidates with each other.After these steps, the connection should become connected. Keep on reading or look into the tutorial for more information.== Methods =={| class="wikitable | [[@GlobalScope GD#Error|Error]]|| [[#add_ice_candidate|add_ice_candidate]] '''(''' [[String GD|String]] media, int index, [[String GD|String]] name ''')''' |-| void|| [[#close|close]] '''(''' ''')'''                                                                                                                          |-| [[WebRTCDataChannel GD|WebRTCDataChannel]]|| [[#create_data_channel|create_data_channel]] '''(''' [[String GD|String]] label, [[Dictionary GD|Dictionary]] options={  } ''')'''          |-| [[@GlobalScope GD#Error|Error]]|| [[#create_offer|create_offer]] '''(''' ''')'''                                                                                                            |-| [[#ConnectionState|ConnectionState]]|| [[#get_connection_state|get_connection_state]] '''(''' ''')''' const                                                                                      |-| [[@GlobalScope GD#Error|Error]]|| [[#initialize|initialize]] '''(''' [[Dictionary GD|Dictionary]] configuration={  } ''')'''                                                         |-| [[@GlobalScope GD#Error|Error]]|| [[#poll|poll]] '''(''' ''')'''                                                                                                                            |-| [[@GlobalScope GD#Error|Error]]|| [[#set_local_description|set_local_description]] '''(''' [[String GD|String]] type, [[String GD|String]] sdp ''')'''                        |-| [[@GlobalScope GD#Error|Error]]|| [[#set_remote_description|set_remote_description]] '''(''' [[String GD|String]] type, [[String GD|String]] sdp ''')'''                      |}== Signals ===== data_channel_received ===*  '''data_channel_received''' '''(''' [[Object GD|Object]] channel ''')'''Emitted when a new in-band channel is received, i.e. when the channel was created with {{Span|negotiated: false}} (default).The object will be an instance of [[WebRTCDataChannel GD|WebRTCDataChannel]]. You must keep a reference of it or it will be closed automatically. See [[#create_data_channel|create_data_channel]].=== ice_candidate_created ===*  '''ice_candidate_created''' '''(''' [[String GD|String]] media, int index, [[String GD|String]] name ''')'''Emitted when a new ICE candidate has been created. The three parameters are meant to be passed to the remote peer over the signaling server.=== session_description_created ===*  '''session_description_created''' '''(''' [[String GD|String]] type, [[String GD|String]] sdp ''')'''Emitted after a successful call to [[#create_offer|create_offer]] or [[#set_remote_description|set_remote_description]] (when it generates an answer). The parameters are meant to be passed to [[#set_local_description|set_local_description]] on this object, and sent to the remote peer over the signaling server.== Enumerations ===== ConnectionState ====== STATE_NEW ====== STATE_CONNECTING ====== STATE_CONNECTED ====== STATE_DISCONNECTED ====== STATE_FAILED ====== STATE_CLOSED ===enum '''ConnectionState''':*  '''STATE_NEW''' = '''0'''  The connection is new, data channels and an offer can be created in this state.*  '''STATE_CONNECTING''' = '''1'''  The peer is connecting, ICE is in progress, none of the transports has failed.*  '''STATE_CONNECTED''' = '''2'''  The peer is connected, all ICE transports are connected.*  '''STATE_DISCONNECTED''' = '''3'''  At least one ICE transport is disconnected.*  '''STATE_FAILED''' = '''4'''  One or more of the ICE transports failed.*  '''STATE_CLOSED''' = '''5'''  The peer connection is closed (after calling [[#close|close]] for example).== Method Descriptions ===== add_ice_candidate ===*  [[@GlobalScope GD#Error|Error]] '''add_ice_candidate''' '''(''' [[String GD|String]] media, int index, [[String GD|String]] name ''')'''Add an ice candidate generated by a remote peer (and received over the signaling server). See [[#ice_candidate_created|ice_candidate_created]].=== close ===*  void '''close ( )'''Close the peer connection and all data channels associated with it. Note, you cannot reuse this object for a new connection unless you call [[#initialize|initialize]].=== create_data_channel ===*  [[WebRTCDataChannel GD|WebRTCDataChannel]] '''create_data_channel''' '''(''' [[String GD|String]] label, [[Dictionary GD|Dictionary]] options={  } ''')'''Returns a new [[WebRTCDataChannel GD|WebRTCDataChannel]] (or {{Span|null}} on failure) with given {{Span|label}} and optionally configured via the {{Span|options}} dictionary. This method can only be called when the connection is in state [[WebRTCPeerConnection GD#STATE_NEW|STATE_NEW]].There are two ways to create a working data channel: either call [[#create_data_channel|create_data_channel]] on only one of the peer and listen to [[#data_channel_received|data_channel_received]] on the other, or call [[#create_data_channel|create_data_channel]] on both peers, with the same values, and the {{Span|negotiated}} option set to {{Span|true}}.Valid {{Span|options}} are:::    {        "negotiated": true, # When set to true (default off), means the channel is negotiated out of band. "id" must be set too. data_channel_received will not be called.        "id": 1, # When "negotiated" is true this value must also be set to the same value on both peer.            # Only one of maxRetransmits and maxPacketLifeTime can be specified, not both. They make the channel unreliable (but also better at real time).        "maxRetransmits": 1, # Specify the maximum number of attempt the peer will make to retransmits packets if they are not acknowledged.        "maxPacketLifeTime": 100, # Specify the maximum amount of time before giving up retransmitions of unacknowledged packets (in milliseconds).        "ordered": true, # When in unreliable mode (i.e. either "maxRetransmits" or "maxPacketLifetime" is set), "ordered" (true by default) specify if packet ordering is to be enforced.            "protocol": "my-custom-protocol", # A custom sub-protocol string for this channel.    }'''Note:''' You must keep a reference to channels created this way, or it will be closed.=== create_offer ===*  [[@GlobalScope GD#Error|Error]] '''create_offer ( )'''Creates a new SDP offer to start a WebRTC connection with a remote peer. At least one [[WebRTCDataChannel GD|WebRTCDataChannel]] must have been created before calling this method.If this functions returns [[@GlobalScope GD#OK|@GlobalScope.OK()]], [[#session_description_created|session_description_created]] will be called when the session is ready to be sent.=== get_connection_state ===*  [[#ConnectionState|ConnectionState]] '''get_connection_state ( )''' constReturns the connection state. See [[#ConnectionState|ConnectionState]].=== initialize ===*  [[@GlobalScope GD#Error|Error]] '''initialize''' '''(''' [[Dictionary GD|Dictionary]] configuration={  } ''')'''Re-initialize this peer connection, closing any previously active connection, and going back to state [[WebRTCPeerConnection GD#STATE_NEW|STATE_NEW]]. A dictionary of {{Span|options}} can be passed to configure the peer connection.Valid {{Span|options}} are:::    {        "iceServers": [            {                "urls": [ "stun:stun.example.com:3478" ], # One or more STUN servers.            },            {                "urls": [ "turn:turn.example.com:3478" ], # One or more TURN servers.                "username": "a_username", # Optional username for the TURN server.                "credentials": "a_password", # Optional password for the TURN server.            }        ]    }=== poll ===*  [[@GlobalScope GD#Error|Error]] '''poll ( )'''Call this method frequently (e.g. in [[Node GD#_process|_process]] or [[Node GD#_physics_process|_physics_process]]) to properly receive signals.=== set_local_description ===*  [[@GlobalScope GD#Error|Error]] '''set_local_description''' '''(''' [[String GD|String]] type, [[String GD|String]] sdp ''')'''Sets the SDP description of the local peer. This should be called in response to [[#session_description_created|session_description_created]].If {{Span|type}} is {{Span|answer}} the peer will start emitting [[#ice_candidate_created|ice_candidate_created]].=== set_remote_description ===*  [[@GlobalScope GD#Error|Error]] '''set_remote_description''' '''(''' [[String GD|String]] type, [[String GD|String]] sdp ''')'''Sets the SDP description of the remote peer. This should be called with the values generated by a remote peer and received over the signaling server.If {{Span|type}} is {{Span|offer}} the peer will emit [[#session_description_created|session_description_created]] with the appropriate answer.If {{Span|type}} is {{Span|answer}} the peer will start emitting [[#ice_candidate_created|ice_candidate_created]].