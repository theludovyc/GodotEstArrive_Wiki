__NOTOC__'''Inherits:''' [[Node2D GD|Node2D]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Camera node for 2D scenes.== Description ==Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [[CanvasItem GD|CanvasItem]]-based nodes.This node is intended to be a simple helper to get things going quickly and it may happen that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [[Node2D GD|Node2D]] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [[Viewport GD|Viewport]].== Properties =={| class="wikitable | [[#AnchorMode|AnchorMode]]|| [[#anchor_mode|anchor_mode]]|| {{Span|1}}               |-| bool|| [[#current|current]]|| {{Span|false}}           |-| [[Node GD|Node]]|| [[#custom_viewport|custom_viewport]]||                     |-| float|| [[#drag_margin_bottom|drag_margin_bottom]]|| {{Span|0.2}}             |-| bool|| [[#drag_margin_h_enabled|drag_margin_h_enabled]]|| {{Span|false}}           |-| float|| [[#drag_margin_left|drag_margin_left]]|| {{Span|0.2}}             |-| float|| [[#drag_margin_right|drag_margin_right]]|| {{Span|0.2}}             |-| float|| [[#drag_margin_top|drag_margin_top]]|| {{Span|0.2}}             |-| bool|| [[#drag_margin_v_enabled|drag_margin_v_enabled]]|| {{Span|false}}           |-| bool|| [[#editor_draw_drag_margin|editor_draw_drag_margin]]|| {{Span|false}}           |-| bool|| [[#editor_draw_limits|editor_draw_limits]]|| {{Span|false}}           |-| bool|| [[#editor_draw_screen|editor_draw_screen]]|| {{Span|true}}            |-| int|| [[#limit_bottom|limit_bottom]]|| {{Span|10000000}}        |-| int|| [[#limit_left|limit_left]]|| {{Span|-10000000}}       |-| int|| [[#limit_right|limit_right]]|| {{Span|10000000}}        |-| bool|| [[#limit_smoothed|limit_smoothed]]|| {{Span|false}}           |-| int|| [[#limit_top|limit_top]]|| {{Span|-10000000}}       |-| [[Vector2 GD|Vector2]]|| [[#offset|offset]]|| {{Span|Vector2( 0, 0 )}} |-| float|| [[#offset_h|offset_h]]|| {{Span|0.0}}             |-| float|| [[#offset_v|offset_v]]|| {{Span|0.0}}             |-| [[#Camera2DProcessMode|Camera2DProcessMode]]|| [[#process_mode|process_mode]]|| {{Span|1}}               |-| bool|| [[#rotating|rotating]]|| {{Span|false}}           |-| bool|| [[#smoothing_enabled|smoothing_enabled]]|| {{Span|false}}           |-| float|| [[#smoothing_speed|smoothing_speed]]|| {{Span|5.0}}             |-| [[Vector2 GD|Vector2]]|| [[#zoom|zoom]]|| {{Span|Vector2( 1, 1 )}} |}== Methods =={| class="wikitable | void|| [[#align|align]] '''(''' ''')'''                                                                                                           |-| void|| [[#clear_current|clear_current]] '''(''' ''')'''                                                                                           |-| void|| [[#force_update_scroll|force_update_scroll]] '''(''' ''')'''                                                                               |-| [[Vector2 GD|Vector2]]|| [[#get_camera_position|get_camera_position]] '''(''' ''')''' const                                                                         |-| [[Vector2 GD|Vector2]]|| [[#get_camera_screen_center|get_camera_screen_center]] '''(''' ''')''' const                                                               |-| float|| [[#get_drag_margin|get_drag_margin]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' const                                  |-| int|| [[#get_limit|get_limit]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' const                                              |-| void|| [[#make_current|make_current]] '''(''' ''')'''                                                                                             |-| void|| [[#reset_smoothing|reset_smoothing]] '''(''' ''')'''                                                                                       |-| void|| [[#set_drag_margin|set_drag_margin]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float drag_margin ''')''' |-| void|| [[#set_limit|set_limit]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin, int limit ''')'''                       |}== Enumerations ===== AnchorMode ====== ANCHOR_MODE_FIXED_TOP_LEFT ====== ANCHOR_MODE_DRAG_CENTER ===enum '''AnchorMode''':*  '''ANCHOR_MODE_FIXED_TOP_LEFT''' = '''0'''  The camera's position is fixed so that the top-left corner is always at the origin.*  '''ANCHOR_MODE_DRAG_CENTER''' = '''1'''  The camera's position takes into account vertical/horizontal offsets and the screen size.=== Camera2DProcessMode ====== CAMERA2D_PROCESS_PHYSICS ====== CAMERA2D_PROCESS_IDLE ===enum '''Camera2DProcessMode''':*  '''CAMERA2D_PROCESS_PHYSICS''' = '''0'''  The camera updates with the {{Span|_physics_process}} callback.*  '''CAMERA2D_PROCESS_IDLE''' = '''1'''  The camera updates with the {{Span|_process}} callback.== Property Descriptions ===== anchor_mode ===*  [[#AnchorMode|AnchorMode]] '''anchor_mode'''{| class="wikitable | ''Default''|| {{Span|1}}                  |-| ''Setter''|| set_anchor_mode(value) |-| ''Getter''|| get_anchor_mode()      |}The Camera2D's anchor point. See [[#AnchorMode|AnchorMode]] constants.=== current ===*  bool '''current'''{| class="wikitable | ''Default''|| {{Span|false}}    |-| ''Getter''|| is_current() |}If {{Span|true}}, the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera {{Span|current}} will disable this one.=== custom_viewport ===*  [[Node GD|Node]] '''custom_viewport'''{| class="wikitable | ''Setter''|| set_custom_viewport(value) |-| ''Getter''|| get_custom_viewport()      |}The custom [[Viewport GD|Viewport]] node attached to the {{Span|Camera2D}}. If {{Span|null}} or not a [[Viewport GD|Viewport]], uses the default viewport instead.=== drag_margin_bottom ===*  float '''drag_margin_bottom'''{| class="wikitable | ''Default''|| {{Span|0.2}}                |-| ''Setter''|| set_drag_margin(value) |-| ''Getter''|| get_drag_margin()      |}Bottom margin needed to drag the camera. A value of {{Span|1}} makes the camera move only when reaching the edge of the screen.=== drag_margin_h_enabled ===*  bool '''drag_margin_h_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                 |-| ''Setter''|| set_h_drag_enabled(value) |-| ''Getter''|| is_h_drag_enabled()       |}If {{Span|true}}, the camera only moves when reaching the horizontal drag margins. If {{Span|false}}, the camera moves horizontally regardless of margins.=== drag_margin_left ===*  float '''drag_margin_left'''{| class="wikitable | ''Default''|| {{Span|0.2}}                |-| ''Setter''|| set_drag_margin(value) |-| ''Getter''|| get_drag_margin()      |}Left margin needed to drag the camera. A value of {{Span|1}} makes the camera move only when reaching the edge of the screen.=== drag_margin_right ===*  float '''drag_margin_right'''{| class="wikitable | ''Default''|| {{Span|0.2}}                |-| ''Setter''|| set_drag_margin(value) |-| ''Getter''|| get_drag_margin()      |}Right margin needed to drag the camera. A value of {{Span|1}} makes the camera move only when reaching the edge of the screen.=== drag_margin_top ===*  float '''drag_margin_top'''{| class="wikitable | ''Default''|| {{Span|0.2}}                |-| ''Setter''|| set_drag_margin(value) |-| ''Getter''|| get_drag_margin()      |}Top margin needed to drag the camera. A value of {{Span|1}} makes the camera move only when reaching the edge of the screen.=== drag_margin_v_enabled ===*  bool '''drag_margin_v_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                 |-| ''Setter''|| set_v_drag_enabled(value) |-| ''Getter''|| is_v_drag_enabled()       |}If {{Span|true}}, the camera only moves when reaching the vertical drag margins. If {{Span|false}}, the camera moves vertically regardless of margins.=== editor_draw_drag_margin ===*  bool '''editor_draw_drag_margin'''{| class="wikitable | ''Default''|| {{Span|false}}                         |-| ''Setter''|| set_margin_drawing_enabled(value) |-| ''Getter''|| is_margin_drawing_enabled()       |}If {{Span|true}}, draws the camera's drag margin rectangle in the editor.=== editor_draw_limits ===*  bool '''editor_draw_limits'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_limit_drawing_enabled(value) |-| ''Getter''|| is_limit_drawing_enabled()       |}If {{Span|true}}, draws the camera's limits rectangle in the editor.=== editor_draw_screen ===*  bool '''editor_draw_screen'''{| class="wikitable | ''Default''|| {{Span|true}}                          |-| ''Setter''|| set_screen_drawing_enabled(value) |-| ''Getter''|| is_screen_drawing_enabled()       |}If {{Span|true}}, draws the camera's screen rectangle in the editor.=== limit_bottom ===*  int '''limit_bottom'''{| class="wikitable | ''Default''|| {{Span|10000000}}     |-| ''Setter''|| set_limit(value) |-| ''Getter''|| get_limit()      |}Bottom scroll limit in pixels. The camera stops moving when reaching this value.=== limit_left ===*  int '''limit_left'''{| class="wikitable | ''Default''|| {{Span|-10000000}}    |-| ''Setter''|| set_limit(value) |-| ''Getter''|| get_limit()      |}Left scroll limit in pixels. The camera stops moving when reaching this value.=== limit_right ===*  int '''limit_right'''{| class="wikitable | ''Default''|| {{Span|10000000}}     |-| ''Setter''|| set_limit(value) |-| ''Getter''|| get_limit()      |}Right scroll limit in pixels. The camera stops moving when reaching this value.=== limit_smoothed ===*  bool '''limit_smoothed'''{| class="wikitable | ''Default''|| {{Span|false}}                          |-| ''Setter''|| set_limit_smoothing_enabled(value) |-| ''Getter''|| is_limit_smoothing_enabled()       |}If {{Span|true}}, the camera smoothly stops when reaches its limits.=== limit_top ===*  int '''limit_top'''{| class="wikitable | ''Default''|| {{Span|-10000000}}    |-| ''Setter''|| set_limit(value) |-| ''Getter''|| get_limit()      |}Top scroll limit in pixels. The camera stops moving when reaching this value.=== offset ===*  [[Vector2 GD|Vector2]] '''offset'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}} |-| ''Setter''|| set_offset(value)   |-| ''Getter''|| get_offset()        |}The camera's offset, useful for looking around or camera shake animations.=== offset_h ===*  float '''offset_h'''{| class="wikitable | ''Default''|| {{Span|0.0}}             |-| ''Setter''|| set_h_offset(value) |-| ''Getter''|| get_h_offset()      |}The horizontal offset of the camera, relative to the drag margins.'''Note:''' Offset H is used only to force offset relative to margins. It's not updated in any way if drag margins are enabled and can be used to set initial offset.=== offset_v ===*  float '''offset_v'''{| class="wikitable | ''Default''|| {{Span|0.0}}             |-| ''Setter''|| set_v_offset(value) |-| ''Getter''|| get_v_offset()      |}The vertical offset of the camera, relative to the drag margins.'''Note:''' Used the same as [[#offset_h|offset_h]].=== process_mode ===*  [[#Camera2DProcessMode|Camera2DProcessMode]] '''process_mode'''{| class="wikitable | ''Default''|| {{Span|1}}                   |-| ''Setter''|| set_process_mode(value) |-| ''Getter''|| get_process_mode()      |}The camera's process callback. See [[#Camera2DProcessMode|Camera2DProcessMode]].=== rotating ===*  bool '''rotating'''{| class="wikitable | ''Default''|| {{Span|false}}           |-| ''Setter''|| set_rotating(value) |-| ''Getter''|| is_rotating()       |}If {{Span|true}}, the camera rotates with the target.=== smoothing_enabled ===*  bool '''smoothing_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                          |-| ''Setter''|| set_enable_follow_smoothing(value) |-| ''Getter''|| is_follow_smoothing_enabled()      |}If {{Span|true}}, the camera smoothly moves towards the target at [[#smoothing_speed|smoothing_speed]].=== smoothing_speed ===*  float '''smoothing_speed'''{| class="wikitable | ''Default''|| {{Span|5.0}}                     |-| ''Setter''|| set_follow_smoothing(value) |-| ''Getter''|| get_follow_smoothing()      |}Speed in pixels per second of the camera's smoothing effect when [[#smoothing_enabled|smoothing_enabled]] is {{Span|true}}.=== zoom ===*  [[Vector2 GD|Vector2]] '''zoom'''{| class="wikitable | ''Default''|| {{Span|Vector2( 1, 1 )}} |-| ''Setter''|| set_zoom(value)     |-| ''Getter''|| get_zoom()          |}The camera's zoom relative to the viewport. Values larger than {{Span|Vector2(1, 1)}} zoom out and smaller values zoom in. For an example, use {{Span|Vector2(0.5, 0.5)}} for a 2× zoom-in, and {{Span|Vector2(4, 4)}} for a 4× zoom-out.== Method Descriptions ===== align ===*  void '''align ( )'''Aligns the camera to the tracked node.=== clear_current ===*  void '''clear_current ( )'''Removes any {{Span|Camera2D}} from the ancestor [[Viewport GD|Viewport]]'s internal currently-assigned camera.=== force_update_scroll ===*  void '''force_update_scroll ( )'''Forces the camera to update scroll immediately.=== get_camera_position ===*  [[Vector2 GD|Vector2]] '''get_camera_position ( )''' constReturns the camera position.=== get_camera_screen_center ===*  [[Vector2 GD|Vector2]] '''get_camera_screen_center ( )''' constReturns the location of the {{Span|Camera2D}}'s screen-center, relative to the origin.=== get_drag_margin ===*  float '''get_drag_margin''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' constReturns the specified margin. See also [[#drag_margin_bottom|drag_margin_bottom]], [[#drag_margin_top|drag_margin_top]], [[#drag_margin_left|drag_margin_left]], and [[#drag_margin_right|drag_margin_right]].=== get_limit ===*  int '''get_limit''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' constReturns the specified camera limit. See also [[#limit_bottom|limit_bottom]], [[#limit_top|limit_top]], [[#limit_left|limit_left]], and [[#limit_right|limit_right]].=== make_current ===*  void '''make_current ( )'''Make this the current 2D camera for the scene (viewport and layer), in case there are many cameras in the scene.=== reset_smoothing ===*  void '''reset_smoothing ( )'''Sets the camera's position immediately to its current smoothing destination.This has no effect if smoothing is disabled.=== set_drag_margin ===*  void '''set_drag_margin''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float drag_margin ''')'''Sets the specified margin. See also [[#drag_margin_bottom|drag_margin_bottom]], [[#drag_margin_top|drag_margin_top]], [[#drag_margin_left|drag_margin_left]], and [[#drag_margin_right|drag_margin_right]].=== set_limit ===*  void '''set_limit''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin, int limit ''')'''Sets the specified camera limit. See also [[#limit_bottom|limit_bottom]], [[#limit_top|limit_top]], [[#limit_left|limit_left]], and [[#limit_right|limit_right]].