__NOTOC__'''Inherited By:''' [[ARVRPositionalTracker GD|ARVRPositionalTracker]], [[ARVRServer GD|ARVRServer]], [[AudioServer GD|AudioServer]], [[CameraServer GD|CameraServer]], [[ClassDB GD|ClassDB]], [[EditorFileSystemDirectory GD|EditorFileSystemDirectory]], [[EditorSelection GD|EditorSelection]], [[EditorVCSInterface GD|EditorVCSInterface]], [[Engine GD|Engine]], [[Geometry GD|Geometry]], [[GodotSharp GD|GodotSharp]], [[IP GD|IP]], [[Input GD|Input]], [[InputMap GD|InputMap]], [[JSON GD|JSON]], [[JSONRPC GD|JSONRPC]], [[JavaClassWrapper GD|JavaClassWrapper]], [[JavaScript GD|JavaScript]], [[MainLoop GD|MainLoop]], [[Marshalls GD|Marshalls]], [[Navigation2DServer GD|Navigation2DServer]], [[NavigationMeshGenerator GD|NavigationMeshGenerator]], [[NavigationServer GD|NavigationServer]], [[Node GD|Node]], [[OS GD|OS]], [[Performance GD|Performance]], [[Physics2DDirectBodyState GD|Physics2DDirectBodyState]], [[Physics2DDirectSpaceState GD|Physics2DDirectSpaceState]], [[Physics2DServer GD|Physics2DServer]], [[PhysicsDirectBodyState GD|PhysicsDirectBodyState]], [[PhysicsDirectSpaceState GD|PhysicsDirectSpaceState]], [[PhysicsServer GD|PhysicsServer]], [[ProjectSettings GD|ProjectSettings]], [[Reference GD|Reference]], [[RenderingDevice GD|RenderingDevice]], [[ResourceLoader GD|ResourceLoader]], [[ResourceSaver GD|ResourceSaver]], [[TranslationServer GD|TranslationServer]], [[TreeItem GD|TreeItem]], [[UndoRedo GD|UndoRedo]], [[VisualScriptEditor GD|VisualScriptEditor]], [[VisualServer GD|VisualServer]]Base class for all non built-in types.== Description ==Every class which is not a built-in type inherits from this class.You can construct Objects from scripting languages, using {{Span|Object.new()}} in GDScript, {{Span|new Object}} in C#, or the "Construct Object" node in VisualScript.Objects do not manage memory. If a class inherits from Object, you will have to delete instances of it manually. To do so, call the [[#free|free]] method from your script or delete the instance from C++.Some classes that extend Object add memory management. This is the case of [[Reference GD|Reference]], which counts references and deletes itself automatically when no longer referenced. [[Node GD|Node]], another fundamental type, deletes all its children when freed from memory.Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [[Object GD#_get_property_list|_get_property_list]] and handled in [[Object GD#_get|_get]] and [[Object GD#_set|_set]]. However, scripting languages and C++ have simpler means to export them.Property membership can be tested directly in GDScript using {{Span|in}}:::    var n = Node2D.new()    print("position" in n) # Prints "True".    print("other_property" in n) # Prints "False".Objects also receive notifications. Notifications are a simple way to notify the object about different events, so they can all be handled together. See [[Object GD#_notification|_notification]].== Methods =={| class="wikitable | [[Variant GD|Variant]]|| [[Object GD#_get|_get]] '''(''' [[StringName GD|StringName]] property ''')''' virtual                                                                                                            |-| [[Array GD|Array]]|| [[Object GD#_get_property_list|_get_property_list]] '''(''' ''')''' virtual                                                                                                                             |-| void|| [[Object GD#_init|_init]] '''(''' ''')''' virtual                                                                                                                                                       |-| void|| [[Object GD#_notification|_notification]] '''(''' int what ''')''' virtual                                                                                                            |-| bool|| [[Object GD#_set|_set]] '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')''' virtual                                                                       |-| [[String GD|String]]|| [[Object GD#_to_string|_to_string]] '''(''' ''')''' virtual                                                                                                                                             |-| void|| [[#add_user_signal|add_user_signal]] '''(''' [[String GD|String]] signal, [[Array GD|Array]] arguments=[  ] ''')'''                                                              |-| [[Variant GD|Variant]]|| [[#call|call]] '''(''' [[StringName GD|StringName]] method, ... ''')''' vararg                                                                                                          |-| void|| [[#call_deferred|call_deferred]] '''(''' [[StringName GD|StringName]] method, ... ''')''' vararg                                                                                        |-| [[Variant GD|Variant]]|| [[#callv|callv]] '''(''' [[StringName GD|StringName]] method, [[Array GD|Array]] arg_array ''')'''                                                                               |-| bool|| [[#can_translate_messages|can_translate_messages]] '''(''' ''')''' const                                                                                                                       |-| [[@GlobalScope GD#Error|Error]]|| [[#connect|connect]] '''(''' [[StringName GD|StringName]] signal, [[Callable GD|Callable]] callable, [[Array GD|Array]] binds=[  ], int flags=0 ''')''' |-| void|| [[#disconnect|disconnect]] '''(''' [[StringName GD|StringName]] signal, [[Callable GD|Callable]] callable ''')'''                                                                |-| void|| [[#emit_signal|emit_signal]] '''(''' [[StringName GD|StringName]] signal, ... ''')''' vararg                                                                                            |-| void|| [[#free|free]] '''(''' ''')'''                                                                                                                                                                 |-| [[Variant GD|Variant]]|| [[#get|get]] '''(''' [[String GD|String]] property ''')''' const                                                                                                                        |-| [[String GD|String]]|| [[#get_class|get_class]] '''(''' ''')''' const                                                                                                                                                 |-| [[Array GD|Array]]|| [[#get_incoming_connections|get_incoming_connections]] '''(''' ''')''' const                                                                                                                   |-| [[Variant GD|Variant]]|| [[#get_indexed|get_indexed]] '''(''' [[NodePath GD|NodePath]] property ''')''' const                                                                                                    |-| int|| [[#get_instance_id|get_instance_id]] '''(''' ''')''' const                                                                                                                                     |-| [[Variant GD|Variant]]|| [[#get_meta|get_meta]] '''(''' [[String GD|String]] name ''')''' const                                                                                                                  |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_meta_list|get_meta_list]] '''(''' ''')''' const                                                                                                                                         |-| [[Array GD|Array]]|| [[#get_method_list|get_method_list]] '''(''' ''')''' const                                                                                                                                     |-| [[Array GD|Array]]|| [[#get_property_list|get_property_list]] '''(''' ''')''' const                                                                                                                                 |-| [[Variant GD|Variant]]|| [[#get_script|get_script]] '''(''' ''')''' const                                                                                                                                               |-| [[Array GD|Array]]|| [[#get_signal_connection_list|get_signal_connection_list]] '''(''' [[String GD|String]] signal ''')''' const                                                                            |-| [[Array GD|Array]]|| [[#get_signal_list|get_signal_list]] '''(''' ''')''' const                                                                                                                                     |-| bool|| [[#has_meta|has_meta]] '''(''' [[String GD|String]] name ''')''' const                                                                                                                  |-| bool|| [[#has_method|has_method]] '''(''' [[StringName GD|StringName]] method ''')''' const                                                                                                    |-| bool|| [[#has_signal|has_signal]] '''(''' [[StringName GD|StringName]] signal ''')''' const                                                                                                    |-| bool|| [[#has_user_signal|has_user_signal]] '''(''' [[StringName GD|StringName]] signal ''')''' const                                                                                          |-| bool|| [[#is_blocking_signals|is_blocking_signals]] '''(''' ''')''' const                                                                                                                             |-| bool|| [[#is_class|is_class]] '''(''' [[String GD|String]] class ''')''' const                                                                                                                 |-| bool|| [[#is_connected|is_connected]] '''(''' [[StringName GD|StringName]] signal, [[Callable GD|Callable]] callable ''')''' const                                                      |-| bool|| [[#is_queued_for_deletion|is_queued_for_deletion]] '''(''' ''')''' const                                                                                                                       |-| void|| [[#notification|notification]] '''(''' int what, bool reversed=false ''')'''                                                                              |-| void|| [[#property_list_changed_notify|property_list_changed_notify]] '''(''' ''')'''                                                                                                                 |-| void|| [[#remove_meta|remove_meta]] '''(''' [[String GD|String]] name ''')'''                                                                                                                  |-| void|| [[#set|set]] '''(''' [[String GD|String]] property, [[Variant GD|Variant]] value ''')'''                                                                                         |-| void|| [[#set_block_signals|set_block_signals]] '''(''' bool enable ''')'''                                                                                                        |-| void|| [[#set_deferred|set_deferred]] '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''                                                               |-| void|| [[#set_indexed|set_indexed]] '''(''' [[NodePath GD|NodePath]] property, [[Variant GD|Variant]] value ''')'''                                                                     |-| void|| [[#set_message_translation|set_message_translation]] '''(''' bool enable ''')'''                                                                                            |-| void|| [[#set_meta|set_meta]] '''(''' [[String GD|String]] name, [[Variant GD|Variant]] value ''')'''                                                                                   |-| void|| [[#set_script|set_script]] '''(''' [[Variant GD|Variant]] script ''')'''                                                                                                                |-| [[String GD|String]]|| [[#to_string|to_string]] '''(''' ''')'''                                                                                                                                                       |-| [[StringName GD|StringName]]|| [[#tr|tr]] '''(''' [[StringName GD|StringName]] message ''')''' const                                                                                                                   |}== Signals ===== script_changed ===*  '''script_changed ( )'''Emitted whenever the object's script is changed.== Enumerations ===== ConnectFlags ====== CONNECT_DEFERRED ====== CONNECT_PERSIST ====== CONNECT_ONESHOT ====== CONNECT_REFERENCE_COUNTED ===enum '''ConnectFlags''':*  '''CONNECT_DEFERRED''' = '''1'''  Connects a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time.*  '''CONNECT_PERSIST''' = '''2'''  Persisting connections are saved when the object is serialized to file.*  '''CONNECT_ONESHOT''' = '''4'''  One-shot connections disconnect themselves after emission.*  '''CONNECT_REFERENCE_COUNTED''' = '''8'''  Connect a signal as reference counted. This means that a given signal can be connected several times to the same target, and will only be fully disconnected once no references are left.== Constants ===== NOTIFICATION_POSTINITIALIZE ====== NOTIFICATION_PREDELETE ===*  '''NOTIFICATION_POSTINITIALIZE''' = '''0'''  Called right when the object is initialized. Not available in script.*  '''NOTIFICATION_PREDELETE''' = '''1'''  Called before the object is about to be deleted.== Method Descriptions ===== _get ===*  [[Variant GD|Variant]] '''_get''' '''(''' [[StringName GD|StringName]] property ''')''' virtualVirtual method which can be overridden to customize the return value of [[#get|get]].Returns the given property. Returns {{Span|null}} if the {{Span|property}} does not exist.=== list ===*  [[Array GD|Array]] '''_get_property_list ( )''' virtualVirtual method which can be overridden to customize the return value of [[#get_property_list|get_property_list]].Returns the object's property list as an [[Array GD|Array]] of dictionaries.Each property's [[Dictionary GD|Dictionary]] must contain at least {{Span|name: String}} and {{Span|type: int}} (see [[@GlobalScope GD#Variant.Type|Variant.Type]]) entries. Optionally, it can also include {{Span|hint: int}} (see [[@GlobalScope GD#PropertyHint|PropertyHint]]), {{Span|hint_string: String}}, and {{Span|usage: int}} (see [[@GlobalScope GD#PropertyUsageFlags|PropertyUsageFlags]]).=== _init ===*  void '''_init ( )''' virtualCalled when the object is initialized.=== _notification ===*  void '''_notification''' '''(''' int what ''')''' virtualCalled whenever the object receives a notification, which is identified in {{Span|what}} by a constant. The base {{Span|Object}} has two constants [[Object GD#NOTIFICATION_POSTINITIALIZE|NOTIFICATION_POSTINITIALIZE]] and [[Object GD#NOTIFICATION_PREDELETE|NOTIFICATION_PREDELETE]], but subclasses such as [[Node GD|Node]] define a lot more notifications which are also received by this method.=== _set ===*  bool '''_set''' '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')''' virtualVirtual method which can be overridden to customize the return value of [[#set|set]].Sets a property. Returns {{Span|true}} if the {{Span|property}} exists.=== _to_string ===*  [[String GD|String]] '''_to_string ( )''' virtualVirtual method which can be overridden to customize the return value of [[#to_string|to_string]], and thus the object's representation where it is converted to a string, e.g. with {{Span|print(obj)}}.Returns a [[String GD|String]] representing the object. If not overridden, defaults to {{Span|"[ClassName:RID]"}}.=== add_user_signal ===*  void '''add_user_signal''' '''(''' [[String GD|String]] signal, [[Array GD|Array]] arguments=[  ] ''')'''Adds a user-defined {{Span|signal}}. Arguments are optional, but can be added as an [[Array GD|Array]] of dictionaries, each containing {{Span|name: String}} and {{Span|type: int}} (see [[@GlobalScope GD#Variant.Type|Variant.Type]]) entries.=== call ===*  [[Variant GD|Variant]] '''call''' '''(''' [[StringName GD|StringName]] method, ... ''')''' varargCalls the {{Span|method}} on the object and returns the result. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:::    call("set", "position", Vector2(42.0, 0.0))=== call_deferred ===*  void '''call_deferred''' '''(''' [[StringName GD|StringName]] method, ... ''')''' varargCalls the {{Span|method}} on the object during idle time. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:::    call_deferred("set", "position", Vector2(42.0, 0.0))=== callv ===*  [[Variant GD|Variant]] '''callv''' '''(''' [[StringName GD|StringName]] method, [[Array GD|Array]] arg_array ''')'''Calls the {{Span|method}} on the object and returns the result. Contrarily to [[#call|call]], this method does not support a variable number of arguments but expects all parameters to be via a single [[Array GD|Array]].::    callv("set", [ "position", Vector2(42.0, 0.0) ])=== can_translate_messages ===*  bool '''can_translate_messages ( )''' constReturns {{Span|true}} if the object can translate strings. See [[#set_message_translation|set_message_translation]] and [[#tr|tr]].=== connect ===*  [[@GlobalScope GD#Error|Error]] '''connect''' '''(''' [[StringName GD|StringName]] signal, [[Callable GD|Callable]] callable, [[Array GD|Array]] binds=[  ], int flags=0 ''')''''''FIXME:''' The syntax changed with the addition of [[Callable GD|Callable]], this should be updated.Connects a {{Span|signal}} to a {{Span|method}} on a {{Span|target}} object. Pass optional {{Span|binds}} to the call as an [[Array GD|Array]] of parameters. These parameters will be passed to the method after any parameter used in the call to [[#emit_signal|emit_signal]]. Use {{Span|flags}} to set deferred or one-shot connections. See [[#ConnectFlags|ConnectFlags]] constants.A {{Span|signal}} can only be connected once to a {{Span|method}}. It will throw an error if already connected, unless the signal was connected with [[Object GD#CONNECT_REFERENCE_COUNTED|CONNECT_REFERENCE_COUNTED]]. To avoid this, first, use [[#is_connected|is_connected]] to check for existing connections.If the {{Span|target}} is destroyed in the game's lifecycle, the connection will be lost.Examples:::    connect("pressed", self, "_on_Button_pressed") # BaseButton signal    connect("text_entered", self, "_on_LineEdit_text_entered") # LineEdit signal    connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # User-defined signalAn example of the relationship between {{Span|binds}} passed to [[#connect|connect]] and parameters used when calling [[#emit_signal|emit_signal]]:::    connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # weapon_type and damage are passed last    emit_signal("hit", "Dark lord", 5) # "Dark lord" and 5 are passed first    func _on_Player_hit(hit_by, level, weapon_type, damage):        print("Hit by %s (lvl %d) with weapon %s for %d damage" % [hit_by, level, weapon_type, damage])=== disconnect ===*  void '''disconnect''' '''(''' [[StringName GD|StringName]] signal, [[Callable GD|Callable]] callable ''')''''''FIXME:''' The syntax changed with the addition of [[Callable GD|Callable]], this should be updated.Disconnects a {{Span|signal}} from a {{Span|method}} on the given {{Span|target}}.If you try to disconnect a connection that does not exist, the method will throw an error. Use [[#is_connected|is_connected]] to ensure that the connection exists.=== emit_signal ===*  void '''emit_signal''' '''(''' [[StringName GD|StringName]] signal, ... ''')''' varargEmits the given {{Span|signal}}. The signal must exist, so it should be a built-in signal of this class or one of its parent classes, or a user-defined signal. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:::    emit_signal("hit", weapon_type, damage)    emit_signal("game_over")=== free ===*  void '''free ( )'''Deletes the object from memory. Any pre-existing reference to the freed object will now return {{Span|null}}.=== get ===*  [[Variant GD|Variant]] '''get''' '''(''' [[String GD|String]] property ''')''' constReturns the [[Variant GD|Variant]] value of the given {{Span|property}}. If the {{Span|property}} doesn't exist, this will return {{Span|null}}.=== get_class ===*  [[String GD|String]] '''get_class ( )''' constReturns the object's class as a [[String GD|String]].=== get_incoming_connections ===*  [[Array GD|Array]] '''get_incoming_connections ( )''' constReturns an [[Array GD|Array]] of dictionaries with information about signals that are connected to the object.Each [[Dictionary GD|Dictionary]] contains three String entries:*  {{Span|source}} is a reference to the signal emitter.*  {{Span|signal_name}} is the name of the connected signal.*  {{Span|method_name}} is the name of the method to which the signal is connected.=== get_indexed ===*  [[Variant GD|Variant]] '''get_indexed''' '''(''' [[NodePath GD|NodePath]] property ''')''' constGets the object's property indexed by the given [[NodePath GD|NodePath]]. The node path should be relative to the current object and can use the colon character ({{Span|:}}) to access nested properties. Examples: {{Span|"position:x"}} or {{Span|"material:next_pass:blend_mode"}}.=== get_instance_id ===*  int '''get_instance_id ( )''' constReturns the object's unique instance ID.This ID can be saved in [[EncodedObjectAsID GD|EncodedObjectAsID]], and can be used to retrieve the object instance with [[@GDScript GD#instance_from_id|@GDScript.instance_from_id()]].=== get_meta ===*  [[Variant GD|Variant]] '''get_meta''' '''(''' [[String GD|String]] name ''')''' constReturns the object's metadata entry for the given {{Span|name}}.=== get_meta_list ===*  [[PackedStringArray GD|PackedStringArray]] '''get_meta_list ( )''' constReturns the object's metadata as a [[PackedStringArray GD|PackedStringArray]].=== list ===*  [[Array GD|Array]] '''get_method_list ( )''' constReturns the object's methods and their signatures as an [[Array GD|Array]].=== list ===*  [[Array GD|Array]] '''get_property_list ( )''' constReturns the object's property list as an [[Array GD|Array]] of dictionaries.Each property's [[Dictionary GD|Dictionary]] contain at least {{Span|name: String}} and {{Span|type: int}} (see [[@GlobalScope GD#Variant.Type|Variant.Type]]) entries. Optionally, it can also include {{Span|hint: int}} (see [[@GlobalScope GD#PropertyHint|PropertyHint]]), {{Span|hint_string: String}}, and {{Span|usage: int}} (see [[@GlobalScope GD#PropertyUsageFlags|PropertyUsageFlags]]).=== get_script ===*  [[Variant GD|Variant]] '''get_script ( )''' constReturns the object's [[Script GD|Script]] instance, or {{Span|null}} if none is assigned.=== get_signal_connection_list ===*  [[Array GD|Array]] '''get_signal_connection_list''' '''(''' [[String GD|String]] signal ''')''' constReturns an [[Array GD|Array]] of connections for the given {{Span|signal}}.=== get_signal_list ===*  [[Array GD|Array]] '''get_signal_list ( )''' constReturns the list of signals as an [[Array GD|Array]] of dictionaries.=== has_meta ===*  bool '''has_meta''' '''(''' [[String GD|String]] name ''')''' constReturns {{Span|true}} if a metadata entry is found with the given {{Span|name}}.=== has_method ===*  bool '''has_method''' '''(''' [[StringName GD|StringName]] method ''')''' constReturns {{Span|true}} if the object contains the given {{Span|method}}.=== has_signal ===*  bool '''has_signal''' '''(''' [[StringName GD|StringName]] signal ''')''' constReturns {{Span|true}} if the given {{Span|signal}} exists.=== has_user_signal ===*  bool '''has_user_signal''' '''(''' [[StringName GD|StringName]] signal ''')''' constReturns {{Span|true}} if the given user-defined {{Span|signal}} exists. Only signals added using [[#add_user_signal|add_user_signal]] are taken into account.=== is_blocking_signals ===*  bool '''is_blocking_signals ( )''' constReturns {{Span|true}} if signal emission blocking is enabled.=== is_class ===*  bool '''is_class''' '''(''' [[String GD|String]] class ''')''' constReturns {{Span|true}} if the object inherits from the given {{Span|class}}.=== is_connected ===*  bool '''is_connected''' '''(''' [[StringName GD|StringName]] signal, [[Callable GD|Callable]] callable ''')''' const'''FIXME:''' The syntax changed with the addition of [[Callable GD|Callable]], this should be updated.Returns {{Span|true}} if a connection exists for a given {{Span|signal}}, {{Span|target}}, and {{Span|method}}.=== is_queued_for_deletion ===*  bool '''is_queued_for_deletion ( )''' constReturns {{Span|true}} if the [[Node GD#queue_free|Node.queue_free()]] method was called for the object.=== notification ===*  void '''notification''' '''(''' int what, bool reversed=false ''')'''Send a given notification to the object, which will also trigger a call to the [[Object GD#_notification|_notification]] method of all classes that the object inherits from.If {{Span|reversed}} is {{Span|true}}, [[Object GD#_notification|_notification]] is called first on the object's own class, and then up to its successive parent classes. If {{Span|reversed}} is {{Span|false}}, [[Object GD#_notification|_notification]] is called first on the highest ancestor ({{Span|Object}} itself), and then down to its successive inheriting classes.=== list_changed_notify ===*  void '''property_list_changed_notify ( )'''Notify the editor that the property list has changed, so that editor plugins can take the new values into account. Does nothing on export builds.=== remove_meta ===*  void '''remove_meta''' '''(''' [[String GD|String]] name ''')'''Removes a given entry from the object's metadata.=== set ===*  void '''set''' '''(''' [[String GD|String]] property, [[Variant GD|Variant]] value ''')'''Assigns a new value to the given property. If the {{Span|property}} does not exist, nothing will happen.=== set_block_signals ===*  void '''set_block_signals''' '''(''' bool enable ''')'''If set to {{Span|true}}, signal emission is blocked.=== set_deferred ===*  void '''set_deferred''' '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''Assigns a new value to the given property, after the current frame's physics step. This is equivalent to calling [[#set|set]] via [[#call_deferred|call_deferred]], i.e. {{Span|call_deferred("set", property, value)}}.=== set_indexed ===*  void '''set_indexed''' '''(''' [[NodePath GD|NodePath]] property, [[Variant GD|Variant]] value ''')'''Assigns a new value to the property identified by the [[NodePath GD|NodePath]]. The node path should be relative to the current object and can use the colon character ({{Span|:}}) to access nested properties. Example:::    set_indexed("position", Vector2(42, 0))    set_indexed("position:y", -10)    print(position) # (42, -10)=== set_message_translation ===*  void '''set_message_translation''' '''(''' bool enable ''')'''Defines whether the object can translate strings (with calls to [[#tr|tr]]). Enabled by default.=== set_meta ===*  void '''set_meta''' '''(''' [[String GD|String]] name, [[Variant GD|Variant]] value ''')'''Adds or changes a given entry in the object's metadata. Metadata are serialized, and can take any [[Variant GD|Variant]] value.=== set_script ===*  void '''set_script''' '''(''' [[Variant GD|Variant]] script ''')'''Assigns a script to the object. Each object can have a single script assigned to it, which are used to extend its functionality.If the object already had a script, the previous script instance will be freed and its variables and state will be lost. The new script's [[Object GD#_init|_init]] method will be called.=== to_string ===*  [[String GD|String]] '''to_string ( )'''Returns a [[String GD|String]] representing the object. If not overridden, defaults to {{Span|"[ClassName:RID]"}}.Override the method [[Object GD#_to_string|_to_string]] to customize the [[String GD|String]] representation.=== tr ===*  [[StringName GD|StringName]] '''tr''' '''(''' [[StringName GD|StringName]] message ''')''' constTranslates a message using translation catalogs configured in the Project Settings.Only works if message translation is enabled (which it is by default), otherwise it returns the {{Span|message}} unchanged. See [[#set_message_translation|set_message_translation]].