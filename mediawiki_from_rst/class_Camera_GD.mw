__NOTOC__'''Inherits:''' [[Spatial GD|Spatial]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[ARVRCamera GD|ARVRCamera]], [[ClippedCamera GD|ClippedCamera]], [[InterpolatedCamera GD|InterpolatedCamera]]Camera node, displays from a point of view.== Description ==Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [[Viewport GD|Viewport]] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a [[Viewport GD|Viewport]], and, without one, a scene registered in that [[Viewport GD|Viewport]] (or higher viewports) can't be displayed.== Properties =={| class="wikitable | int|| [[#cull_mask|cull_mask]]|| {{Span|1048575}}         |-| bool|| [[#current|current]]|| {{Span|false}}           |-| [[#DopplerTracking|DopplerTracking]]|| [[#doppler_tracking|doppler_tracking]]|| {{Span|0}}               |-| [[CameraEffects GD|CameraEffects]]|| [[#effects|effects]]||                     |-| [[Environment GD|Environment]]|| [[#environment|environment]]||                     |-| float|| [[#far|far]]|| {{Span|100.0}}           |-| float|| [[#fov|fov]]|| {{Span|70.0}}            |-| [[Vector2 GD|Vector2]]|| [[#frustum_offset|frustum_offset]]|| {{Span|Vector2( 0, 0 )}} |-| float|| [[#h_offset|h_offset]]|| {{Span|0.0}}             |-| [[#KeepAspect|KeepAspect]]|| [[#keep_aspect|keep_aspect]]|| {{Span|1}}               |-| float|| [[#near|near]]|| {{Span|0.05}}            |-| [[#Projection|Projection]]|| [[#projection|projection]]|| {{Span|0}}               |-| float|| [[#size|size]]|| {{Span|1.0}}             |-| float|| [[#v_offset|v_offset]]|| {{Span|0.0}}             |}== Methods =={| class="wikitable | void|| [[#clear_current|clear_current]] '''(''' bool enable_next=true ''')'''                                                                                            |-| [[RID GD|RID]]|| [[#get_camera_rid|get_camera_rid]] '''(''' ''')''' const                                                                                                                             |-| [[Transform GD|Transform]]|| [[#get_camera_transform|get_camera_transform]] '''(''' ''')''' const                                                                                                                 |-| bool|| [[#get_cull_mask_bit|get_cull_mask_bit]] '''(''' int layer ''')''' const                                                                                           |-| [[Array GD|Array]]|| [[#get_frustum|get_frustum]] '''(''' ''')''' const                                                                                                                                   |-| bool|| [[#is_position_behind|is_position_behind]] '''(''' [[Vector3 GD|Vector3]] world_point ''')''' const                                                                           |-| void|| [[#make_current|make_current]] '''(''' ''')'''                                                                                                                                       |-| [[Vector3 GD|Vector3]]|| [[#project_local_ray_normal|project_local_ray_normal]] '''(''' [[Vector2 GD|Vector2]] screen_point ''')''' const                                                              |-| [[Vector3 GD|Vector3]]|| [[#project_position|project_position]] '''(''' [[Vector2 GD|Vector2]] screen_point, float z_depth ''')''' const                                           |-| [[Vector3 GD|Vector3]]|| [[#project_ray_normal|project_ray_normal]] '''(''' [[Vector2 GD|Vector2]] screen_point ''')''' const                                                                          |-| [[Vector3 GD|Vector3]]|| [[#project_ray_origin|project_ray_origin]] '''(''' [[Vector2 GD|Vector2]] screen_point ''')''' const                                                                          |-| void|| [[#set_cull_mask_bit|set_cull_mask_bit]] '''(''' int layer, bool enable ''')'''                                                                 |-| void|| [[#set_frustum|set_frustum]] '''(''' float size, [[Vector2 GD|Vector2]] offset, float z_near, float z_far ''')''' |-| void|| [[#set_orthogonal|set_orthogonal]] '''(''' float size, float z_near, float z_far ''')'''                                 |-| void|| [[#set_perspective|set_perspective]] '''(''' float fov, float z_near, float z_far ''')'''                                |-| [[Vector2 GD|Vector2]]|| [[#unproject_position|unproject_position]] '''(''' [[Vector3 GD|Vector3]] world_point ''')''' const                                                                           |}== Enumerations ===== Projection ====== PROJECTION_PERSPECTIVE ====== PROJECTION_ORTHOGONAL ====== PROJECTION_FRUSTUM ===enum '''Projection''':*  '''PROJECTION_PERSPECTIVE''' = '''0'''  Perspective projection. Objects on the screen becomes smaller when they are far away.*  '''PROJECTION_ORTHOGONAL''' = '''1'''  Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are.*  '''PROJECTION_FRUSTUM''' = '''2'''  Frustum projection. This mode allows adjusting [[#frustum_offset|frustum_offset]] to create "tilted frustum" effects.=== KeepAspect ====== KEEP_WIDTH ====== KEEP_HEIGHT ===enum '''KeepAspect''':*  '''KEEP_WIDTH''' = '''0'''  Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV.*  '''KEEP_HEIGHT''' = '''1'''  Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV.=== DopplerTracking ====== DOPPLER_TRACKING_DISABLED ====== DOPPLER_TRACKING_IDLE_STEP ====== DOPPLER_TRACKING_PHYSICS_STEP ===enum '''DopplerTracking''':*  '''DOPPLER_TRACKING_DISABLED''' = '''0'''  Disables [https://en.wikipedia.org/wiki/Doppler_effect Doppler effect] simulation (default).*  '''DOPPLER_TRACKING_IDLE_STEP''' = '''1'''  Simulate [https://en.wikipedia.org/wiki/Doppler_effect Doppler effect] by tracking positions of objects that are changed in {{Span|_process}}. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's {{Span|pitch shift}}).*  '''DOPPLER_TRACKING_PHYSICS_STEP''' = '''2'''  Simulate [https://en.wikipedia.org/wiki/Doppler_effect Doppler effect] by tracking positions of objects that are changed in {{Span|_physics_process}}. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's {{Span|pitch shift}}).== Property Descriptions ===== cull_mask ===*  int '''cull_mask'''{| class="wikitable | ''Default''|| {{Span|1048575}}          |-| ''Setter''|| set_cull_mask(value) |-| ''Getter''|| get_cull_mask()      |}The culling mask that describes which 3D render layers are rendered by this camera.=== current ===*  bool '''current'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_current(value) |-| ''Getter''|| is_current()       |}If {{Span|true}}, the ancestor [[Viewport GD|Viewport]] is currently using this camera.=== doppler_tracking ===*  [[#DopplerTracking|DopplerTracking]] '''doppler_tracking'''{| class="wikitable | ''Default''|| {{Span|0}}                       |-| ''Setter''|| set_doppler_tracking(value) |-| ''Getter''|| get_doppler_tracking()      |}If not [[Camera GD#DOPPLER_TRACKING_DISABLED|DOPPLER_TRACKING_DISABLED]], this camera will simulate the [https://en.wikipedia.org/wiki/Doppler_effect Doppler effect] for objects changed in particular {{Span|_process}} methods. See [[#DopplerTracking|DopplerTracking]] for possible values.=== effects ===*  [[CameraEffects GD|CameraEffects]] '''effects'''{| class="wikitable | ''Setter''|| set_effects(value) |-| ''Getter''|| get_effects()      |}=== environment ===*  [[Environment GD|Environment]] '''environment'''{| class="wikitable | ''Setter''|| set_environment(value) |-| ''Getter''|| get_environment()      |}The [[Environment GD|Environment]] to use for this camera.=== far ===*  float '''far'''{| class="wikitable | ''Default''|| {{Span|100.0}}       |-| ''Setter''|| set_zfar(value) |-| ''Getter''|| get_zfar()      |}The distance to the far culling boundary for this camera relative to its local Z axis.=== fov ===*  float '''fov'''{| class="wikitable | ''Default''|| {{Span|70.0}}       |-| ''Setter''|| set_fov(value) |-| ''Getter''|| get_fov()      |}The camera's field of view angle (in degrees). Only applicable in perspective mode. Since [[#keep_aspect|keep_aspect]] locks one axis, {{Span|fov}} sets the other axis' field of view angle.=== frustum_offset ===*  [[Vector2 GD|Vector2]] '''frustum_offset'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}       |-| ''Setter''|| set_frustum_offset(value) |-| ''Getter''|| get_frustum_offset()      |}The camera's frustum offset. This can be changed from the default to create "tilted frustum" effects such as `Y-shearing <https://zdoom.org/wiki/Y-shearing>`_.=== h_offset ===*  float '''h_offset'''{| class="wikitable | ''Default''|| {{Span|0.0}}             |-| ''Setter''|| set_h_offset(value) |-| ''Getter''|| get_h_offset()      |}The horizontal (X) offset of the camera viewport.=== keep_aspect ===*  [[#KeepAspect|KeepAspect]] '''keep_aspect'''{| class="wikitable | ''Default''|| {{Span|1}}                       |-| ''Setter''|| set_keep_aspect_mode(value) |-| ''Getter''|| get_keep_aspect_mode()      |}The axis to lock during [[#fov|fov]]/[[#size|size]] adjustments. Can be either [[Camera GD#KEEP_WIDTH|KEEP_WIDTH]] or [[Camera GD#KEEP_HEIGHT|KEEP_HEIGHT]].=== near ===*  float '''near'''{| class="wikitable | ''Default''|| {{Span|0.05}}         |-| ''Setter''|| set_znear(value) |-| ''Getter''|| get_znear()      |}The distance to the near culling boundary for this camera relative to its local Z axis.=== projection ===*  [[#Projection|Projection]] '''projection'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_projection(value) |-| ''Getter''|| get_projection()      |}The camera's projection mode. In [[Camera GD#PROJECTION_PERSPECTIVE|PROJECTION_PERSPECTIVE]] mode, objects' Z distance from the camera's local space scales their perceived size.=== size ===*  float '''size'''{| class="wikitable | ''Default''|| {{Span|1.0}}         |-| ''Setter''|| set_size(value) |-| ''Getter''|| get_size()      |}The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since [[#keep_aspect|keep_aspect]] locks on axis, {{Span|size}} sets the other axis' size length.=== v_offset ===*  float '''v_offset'''{| class="wikitable | ''Default''|| {{Span|0.0}}             |-| ''Setter''|| set_v_offset(value) |-| ''Getter''|| get_v_offset()      |}The vertical (Y) offset of the camera viewport.== Method Descriptions ===== clear_current ===*  void '''clear_current''' '''(''' bool enable_next=true ''')'''If this is the current camera, remove it from being current. If {{Span|enable_next}} is {{Span|true}}, request to make the next camera current, if any.=== get_camera_rid ===*  [[RID GD|RID]] '''get_camera_rid ( )''' constReturns the camera's RID from the [[VisualServer GD|VisualServer]].=== get_camera_transform ===*  [[Transform GD|Transform]] '''get_camera_transform ( )''' constGets the camera transform. Subclassed cameras such as [[InterpolatedCamera GD|InterpolatedCamera]] may provide different transforms than the [[Node GD|Node]] transform.=== get_cull_mask_bit ===*  bool '''get_cull_mask_bit''' '''(''' int layer ''')''' constReturns {{Span|true}} if the given {{Span|layer}} in the [[#cull_mask|cull_mask]] is enabled, {{Span|false}} otherwise.=== get_frustum ===*  [[Array GD|Array]] '''get_frustum ( )''' constReturns the camera's frustum planes in world-space units as an array of [[Plane GD|Plane]]\ s in the following order: near, far, left, top, right, bottom. Not to be confused with [[#frustum_offset|frustum_offset]].=== is_position_behind ===*  bool '''is_position_behind''' '''(''' [[Vector3 GD|Vector3]] world_point ''')''' constReturns {{Span|true}} if the given position is behind the camera.'''Note:''' A position which returns {{Span|false}} may still be outside the camera's field of view.=== make_current ===*  void '''make_current ( )'''Makes this camera the current camera for the [[Viewport GD|Viewport]] (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added.=== project_local_ray_normal ===*  [[Vector3 GD|Vector3]] '''project_local_ray_normal''' '''(''' [[Vector2 GD|Vector2]] screen_point ''')''' constReturns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.=== project_position ===*  [[Vector3 GD|Vector3]] '''project_position''' '''(''' [[Vector2 GD|Vector2]] screen_point, float z_depth ''')''' constReturns the 3D point in worldspace that maps to the given 2D coordinate in the [[Viewport GD|Viewport]] rectangle on a plane that is the given {{Span|z_depth}} distance into the scene away from the camera.=== project_ray_normal ===*  [[Vector3 GD|Vector3]] '''project_ray_normal''' '''(''' [[Vector2 GD|Vector2]] screen_point ''')''' constReturns a normal vector in worldspace, that is the result of projecting a point on the [[Viewport GD|Viewport]] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.=== project_ray_origin ===*  [[Vector3 GD|Vector3]] '''project_ray_origin''' '''(''' [[Vector2 GD|Vector2]] screen_point ''')''' constReturns a 3D position in worldspace, that is the result of projecting a point on the [[Viewport GD|Viewport]] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.=== set_cull_mask_bit ===*  void '''set_cull_mask_bit''' '''(''' int layer, bool enable ''')'''Enables or disables the given {{Span|layer}} in the [[#cull_mask|cull_mask]].=== set_frustum ===*  void '''set_frustum''' '''(''' float size, [[Vector2 GD|Vector2]] offset, float z_near, float z_far ''')'''Sets the camera projection to frustum mode (see [[Camera GD#PROJECTION_FRUSTUM|PROJECTION_FRUSTUM]]), by specifying a {{Span|size}}, an {{Span|offset}}, and the {{Span|z_near}} and {{Span|z_far}} clip planes in world-space units.=== set_orthogonal ===*  void '''set_orthogonal''' '''(''' float size, float z_near, float z_far ''')'''Sets the camera projection to orthogonal mode (see [[Camera GD#PROJECTION_ORTHOGONAL|PROJECTION_ORTHOGONAL]]), by specifying a {{Span|size}}, and the {{Span|z_near}} and {{Span|z_far}} clip planes in world-space units. (As a hint, 2D games often use this projection, with values specified in pixels.)=== set_perspective ===*  void '''set_perspective''' '''(''' float fov, float z_near, float z_far ''')'''Sets the camera projection to perspective mode (see [[Camera GD#PROJECTION_PERSPECTIVE|PROJECTION_PERSPECTIVE]]), by specifying a {{Span|fov}} (field of view) angle in degrees, and the {{Span|z_near}} and {{Span|z_far}} clip planes in world-space units.=== unproject_position ===*  [[Vector2 GD|Vector2]] '''unproject_position''' '''(''' [[Vector3 GD|Vector3]] world_point ''')''' constReturns the 2D coordinate in the [[Viewport GD|Viewport]] rectangle that maps to the given 3D point in worldspace.