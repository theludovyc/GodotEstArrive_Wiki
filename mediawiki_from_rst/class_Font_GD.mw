__NOTOC__'''Inherits:''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[BitmapFont GD|BitmapFont]], [[DynamicFont GD|DynamicFont]]Internationalized font and text drawing support.== Description ==Font contains a Unicode-compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts.== Methods =={| class="wikitable | void|| [[#draw|draw]] '''(''' [[RID GD|RID]] canvas_item, [[Vector2 GD|Vector2]] position, [[String GD|String]] string, [[Color GD|Color]] modulate=Color( 1, 1, 1, 1 ), int clip_w=-1, [[Color GD|Color]] outline_modulate=Color( 1, 1, 1, 1 ) ''')''' const |-| float|| [[#draw_char|draw_char]] '''(''' [[RID GD|RID]] canvas_item, [[Vector2 GD|Vector2]] position, int char, int next=-1, [[Color GD|Color]] modulate=Color( 1, 1, 1, 1 ), bool outline=false ''')''' const                          |-| float|| [[#get_ascent|get_ascent]] '''(''' ''')''' const                                                                                                                                                                                                                                                            |-| float|| [[#get_descent|get_descent]] '''(''' ''')''' const                                                                                                                                                                                                                                                          |-| float|| [[#get_height|get_height]] '''(''' ''')''' const                                                                                                                                                                                                                                                            |-| [[Vector2 GD|Vector2]]|| [[#get_string_size|get_string_size]] '''(''' [[String GD|String]] string ''')''' const                                                                                                                                                                                                               |-| [[Vector2 GD|Vector2]]|| [[#get_wordwrap_string_size|get_wordwrap_string_size]] '''(''' [[String GD|String]] string, float width ''')''' const                                                                                                                                                            |-| bool|| [[#has_outline|has_outline]] '''(''' ''')''' const                                                                                                                                                                                                                                                          |-| bool|| [[#is_distance_field_hint|is_distance_field_hint]] '''(''' ''')''' const                                                                                                                                                                                                                                    |-| void|| [[#update_changes|update_changes]] '''(''' ''')'''                                                                                                                                                                                                                                                          |}== Method Descriptions ===== draw ===*  void '''draw''' '''(''' [[RID GD|RID]] canvas_item, [[Vector2 GD|Vector2]] position, [[String GD|String]] string, [[Color GD|Color]] modulate=Color( 1, 1, 1, 1 ), int clip_w=-1, [[Color GD|Color]] outline_modulate=Color( 1, 1, 1, 1 ) ''')''' constDraw {{Span|string}} into a canvas item using the font at a given position, with {{Span|modulate}} color, and optionally clipping the width. {{Span|position}} specifies the baseline, not the top. To draw from the top, ''ascent'' must be added to the Y axis.=== draw_char ===*  float '''draw_char''' '''(''' [[RID GD|RID]] canvas_item, [[Vector2 GD|Vector2]] position, int char, int next=-1, [[Color GD|Color]] modulate=Color( 1, 1, 1, 1 ), bool outline=false ''')''' constDraw character {{Span|char}} into a canvas item using the font at a given position, with {{Span|modulate}} color, and optionally kerning if {{Span|next}} is passed. clipping the width. {{Span|position}} specifies the baseline, not the top. To draw from the top, ''ascent'' must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.=== get_ascent ===*  float '''get_ascent ( )''' constReturns the font ascent (number of pixels above the baseline).=== get_descent ===*  float '''get_descent ( )''' constReturns the font descent (number of pixels below the baseline).=== get_height ===*  float '''get_height ( )''' constReturns the total font height (ascent plus descent) in pixels.=== get_string_size ===*  [[Vector2 GD|Vector2]] '''get_string_size''' '''(''' [[String GD|String]] string ''')''' constReturns the size of a string, taking kerning and advance into account.=== get_wordwrap_string_size ===*  [[Vector2 GD|Vector2]] '''get_wordwrap_string_size''' '''(''' [[String GD|String]] string, float width ''')''' constReturns the size that the string would have with word wrapping enabled with a fixed {{Span|width}}.=== has_outline ===*  bool '''has_outline ( )''' constReturns {{Span|true}} if the font has an outline.=== is_distance_field_hint ===*  bool '''is_distance_field_hint ( )''' const=== update_changes ===*  void '''update_changes ( )'''After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.