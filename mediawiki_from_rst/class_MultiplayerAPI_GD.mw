__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]High-level multiplayer API.== Description ==This class implements most of the logic behind the high-level multiplayer API.By default, [[SceneTree GD|SceneTree]] has a reference to this class that is used to provide multiplayer capabilities (i.e. RPC/RSET) across the whole scene.It is possible to override the MultiplayerAPI instance used by specific Nodes by setting the [[Node GD#custom_multiplayer|Node.custom_multiplayer()]] property, effectively allowing to run both client and server in the same scene.== Properties =={| class="wikitable | bool|| [[#allow_object_decoding|allow_object_decoding]]|| {{Span|false}} |-| [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]]|| [[#network_peer|network_peer]]||           |-| bool|| [[#refuse_new_network_connections|refuse_new_network_connections]]|| {{Span|false}} |}== Methods =={| class="wikitable | void|| [[#clear|clear]] '''(''' ''')'''                                                                                                                                                                   |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#get_network_connected_peers|get_network_connected_peers]] '''(''' ''')''' const                                                                                                                 |-| int|| [[#get_network_unique_id|get_network_unique_id]] '''(''' ''')''' const                                                                                                                             |-| int|| [[#get_rpc_sender_id|get_rpc_sender_id]] '''(''' ''')''' const                                                                                                                                     |-| bool|| [[#has_network_peer|has_network_peer]] '''(''' ''')''' const                                                                                                                                       |-| bool|| [[#is_network_server|is_network_server]] '''(''' ''')''' const                                                                                                                                     |-| void|| [[#poll|poll]] '''(''' ''')'''                                                                                                                                                                     |-| [[@GlobalScope GD#Error|Error]]|| [[#send_bytes|send_bytes]] '''(''' [[PackedByteArray GD|PackedByteArray]] bytes, int id=0, [[#TransferMode|TransferMode]] mode=2 ''')''' |-| void|| [[#set_root_node|set_root_node]] '''(''' [[Node GD|Node]] node ''')'''                                                                                                                      |}== Signals ===== connected_to_server ===*  '''connected_to_server ( )'''Emitted when this MultiplayerAPI's [[#network_peer|network_peer]] successfully connected to a server. Only emitted on clients.=== connection_failed ===*  '''connection_failed ( )'''Emitted when this MultiplayerAPI's [[#network_peer|network_peer]] fails to establish a connection to a server. Only emitted on clients.=== network_peer_connected ===*  '''network_peer_connected''' '''(''' int id ''')'''Emitted when this MultiplayerAPI's [[#network_peer|network_peer]] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).=== network_peer_disconnected ===*  '''network_peer_disconnected''' '''(''' int id ''')'''Emitted when this MultiplayerAPI's [[#network_peer|network_peer]] disconnects from a peer. Clients get notified when other clients disconnect from the same server.=== network_peer_packet ===*  '''network_peer_packet''' '''(''' int id, [[PackedByteArray GD|PackedByteArray]] packet ''')'''Emitted when this MultiplayerAPI's [[#network_peer|network_peer]] receive a {{Span|packet}} with custom data (see [[#send_bytes|send_bytes]]). ID is the peer ID of the peer that sent the packet.=== server_disconnected ===*  '''server_disconnected ( )'''Emitted when this MultiplayerAPI's [[#network_peer|network_peer]] disconnects from server. Only emitted on clients.== Enumerations ===== RPCMode ====== RPC_MODE_DISABLED ====== RPC_MODE_REMOTE ====== RPC_MODE_MASTER ====== RPC_MODE_PUPPET ====== RPC_MODE_REMOTESYNC ====== RPC_MODE_MASTERSYNC ====== RPC_MODE_PUPPETSYNC ===enum '''RPCMode''':*  '''RPC_MODE_DISABLED''' = '''0'''  Used with [[Node GD#rpc_config|Node.rpc_config()]] or [[Node GD#rset_config|Node.rset_config()]] to disable a method or property for all RPC calls, making it unavailable. Default for all methods.*  '''RPC_MODE_REMOTE''' = '''1'''  Used with [[Node GD#rpc_config|Node.rpc_config()]] or [[Node GD#rset_config|Node.rset_config()]] to set a method to be called or a property to be changed only on the remote end, not locally. Analogous to the {{Span|remote}} keyword. Calls and property changes are accepted from all remote peers, no matter if they are node's master or puppets.*  '''RPC_MODE_MASTER''' = '''2'''  Used with [[Node GD#rpc_config|Node.rpc_config()]] or [[Node GD#rset_config|Node.rset_config()]] to set a method to be called or a property to be changed only on the network master for this node. Analogous to the {{Span|master}} keyword. Only accepts calls or property changes from the node's network puppets, see [[Node GD#set_network_master|Node.set_network_master()]].*  '''RPC_MODE_PUPPET''' = '''3'''  Used with [[Node GD#rpc_config|Node.rpc_config()]] or [[Node GD#rset_config|Node.rset_config()]] to set a method to be called or a property to be changed only on puppets for this node. Analogous to the {{Span|puppet}} keyword. Only accepts calls or property changes from the node's network master, see [[Node GD#set_network_master|Node.set_network_master()]].*  '''RPC_MODE_REMOTESYNC''' = '''4'''  Behave like [[MultiplayerAPI GD#RPC_MODE_REMOTE|RPC_MODE_REMOTE]] but also make the call or property change locally. Analogous to the {{Span|remotesync}} keyword.*  '''RPC_MODE_MASTERSYNC''' = '''5'''  Behave like [[MultiplayerAPI GD#RPC_MODE_MASTER|RPC_MODE_MASTER]] but also make the call or property change locally. Analogous to the {{Span|mastersync}} keyword.*  '''RPC_MODE_PUPPETSYNC''' = '''6'''  Behave like [[MultiplayerAPI GD#RPC_MODE_PUPPET|RPC_MODE_PUPPET]] but also make the call or property change locally. Analogous to the {{Span|puppetsync}} keyword.== Property Descriptions ===== allow_object_decoding ===*  bool '''allow_object_decoding'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_allow_object_decoding(value) |-| ''Getter''|| is_object_decoding_allowed()     |}If {{Span|true}}, the MultiplayerAPI will allow encoding and decoding of object during RPCs/RSETs.'''Warning:''' Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.=== network_peer ===*  [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]] '''network_peer'''{| class="wikitable | ''Setter''|| set_network_peer(value) |-| ''Getter''|| get_network_peer()      |}The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with [[#is_network_server|is_network_server]]) and will set root node's network mode to master, or it will become a regular peer with root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals.=== refuse_new_network_connections ===*  bool '''refuse_new_network_connections'''{| class="wikitable | ''Default''|| {{Span|false}}                                 |-| ''Setter''|| set_refuse_new_network_connections(value) |-| ''Getter''|| is_refusing_new_network_connections()     |}If {{Span|true}}, the MultiplayerAPI's [[#network_peer|network_peer]] refuses new incoming connections.== Method Descriptions ===== clear ===*  void '''clear ( )'''Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing).=== get_network_connected_peers ===*  [[PackedInt32Array GD|PackedInt32Array]] '''get_network_connected_peers ( )''' constReturns the peer IDs of all connected peers of this MultiplayerAPI's [[#network_peer|network_peer]].=== get_network_unique_id ===*  int '''get_network_unique_id ( )''' constReturns the unique peer ID of this MultiplayerAPI's [[#network_peer|network_peer]].=== get_rpc_sender_id ===*  int '''get_rpc_sender_id ( )''' constReturns the sender's peer ID for the RPC currently being executed.'''Note:''' If not inside an RPC this method will return 0.=== has_network_peer ===*  bool '''has_network_peer ( )''' constReturns {{Span|true}} if there is a [[#network_peer|network_peer]] set.=== is_network_server ===*  bool '''is_network_server ( )''' constReturns {{Span|true}} if this MultiplayerAPI's [[#network_peer|network_peer]] is in server mode (listening for connections).=== poll ===*  void '''poll ( )'''Method used for polling the MultiplayerAPI. You only need to worry about this if you are using [[Node GD#custom_multiplayer|Node.custom_multiplayer()]] override or you set [[SceneTree GD#multiplayer_poll|SceneTree.multiplayer_poll()]] to {{Span|false}}. By default, [[SceneTree GD|SceneTree]] will poll its MultiplayerAPI for you.'''Note:''' This method results in RPCs and RSETs being called, so they will be executed in the same context of this function (e.g. {{Span|_process}}, {{Span|physics}}, [[Thread GD|Thread]]).=== send_bytes ===*  [[@GlobalScope GD#Error|Error]] '''send_bytes''' '''(''' [[PackedByteArray GD|PackedByteArray]] bytes, int id=0, [[#TransferMode|TransferMode]] mode=2 ''')'''Sends the given raw {{Span|bytes}} to a specific peer identified by {{Span|id}} (see [[NetworkedMultiplayerPeer GD#set_target_peer|NetworkedMultiplayerPeer.set_target_peer()]]). Default ID is {{Span|0}}, i.e. broadcast to all peers.=== set_root_node ===*  void '''set_root_node''' '''(''' [[Node GD|Node]] node ''')'''Sets the base root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.This effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene.