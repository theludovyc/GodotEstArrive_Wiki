__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]AStar class representation that uses 2D vectors as edges.== Description ==This is a wrapper for the [[AStar GD|AStar]] class which uses 2D vectors instead of 3D vectors.== Methods =={| class="wikitable | float|| [[AStar2D GD#_compute_cost|_compute_cost]] '''(''' int from_id, int to_id ''')''' virtual                                      |-| float|| [[AStar2D GD#_estimate_cost|_estimate_cost]] '''(''' int from_id, int to_id ''')''' virtual                                    |-| void|| [[#add_point|add_point]] '''(''' int id, [[Vector2 GD|Vector2]] position, float weight_scale=1.0 ''')'''    |-| bool|| [[#are_points_connected|are_points_connected]] '''(''' int id, int to_id ''')''' const                               |-| void|| [[#clear|clear]] '''(''' ''')'''                                                                                                                         |-| void|| [[#connect_points|connect_points]] '''(''' int id, int to_id, bool bidirectional=true ''')'''     |-| void|| [[#disconnect_points|disconnect_points]] '''(''' int id, int to_id ''')'''                                           |-| int|| [[#get_available_point_id|get_available_point_id]] '''(''' ''')''' const                                                                                 |-| int|| [[#get_closest_point|get_closest_point]] '''(''' [[Vector2 GD|Vector2]] to_position, bool include_disabled=false ''')''' const |-| [[Vector2 GD|Vector2]]|| [[#get_closest_position_in_segment|get_closest_position_in_segment]] '''(''' [[Vector2 GD|Vector2]] to_position ''')''' const                     |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#get_id_path|get_id_path]] '''(''' int from_id, int to_id ''')'''                                                  |-| int|| [[#get_point_capacity|get_point_capacity]] '''(''' ''')''' const                                                                                         |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#get_point_connections|get_point_connections]] '''(''' int id ''')'''                                                                |-| int|| [[#get_point_count|get_point_count]] '''(''' ''')''' const                                                                                               |-| [[PackedVector2Array GD|PackedVector2Array]]|| [[#get_point_path|get_point_path]] '''(''' int from_id, int to_id ''')'''                                            |-| [[Vector2 GD|Vector2]]|| [[#get_point_position|get_point_position]] '''(''' int id ''')''' const                                                                |-| float|| [[#get_point_weight_scale|get_point_weight_scale]] '''(''' int id ''')''' const                                                        |-| [[Array GD|Array]]|| [[#get_points|get_points]] '''(''' ''')'''                                                                                                               |-| bool|| [[#has_point|has_point]] '''(''' int id ''')''' const                                                                                  |-| bool|| [[#is_point_disabled|is_point_disabled]] '''(''' int id ''')''' const                                                                  |-| void|| [[#remove_point|remove_point]] '''(''' int id ''')'''                                                                                  |-| void|| [[#reserve_space|reserve_space]] '''(''' int num_nodes ''')'''                                                                         |-| void|| [[#set_point_disabled|set_point_disabled]] '''(''' int id, bool disabled=true ''')'''                               |-| void|| [[#set_point_position|set_point_position]] '''(''' int id, [[Vector2 GD|Vector2]] position ''')'''                              |-| void|| [[#set_point_weight_scale|set_point_weight_scale]] '''(''' int id, float weight_scale ''')'''                      |}== Method Descriptions ===== _compute_cost ===*  float '''_compute_cost''' '''(''' int from_id, int to_id ''')''' virtualCalled when computing the cost between two connected points.Note that this function is hidden in the default {{Span|AStar2D}} class.=== _estimate_cost ===*  float '''_estimate_cost''' '''(''' int from_id, int to_id ''')''' virtualCalled when estimating the cost between a point and the path's ending point.Note that this function is hidden in the default {{Span|AStar2D}} class.=== add_point ===*  void '''add_point''' '''(''' int id, [[Vector2 GD|Vector2]] position, float weight_scale=1.0 ''')'''Adds a new point at the given position with the given identifier. The algorithm prefers points with lower {{Span|weight_scale}} to form a path. The {{Span|id}} must be 0 or larger, and the {{Span|weight_scale}} must be 1 or larger.::    var astar = AStar2D.new()    astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1If there already exists a point for the given {{Span|id}}, its position and weight scale are updated to the given values.=== are_points_connected ===*  bool '''are_points_connected''' '''(''' int id, int to_id ''')''' constReturns whether there is a connection/segment between the given points.=== clear ===*  void '''clear ( )'''Clears all the points and segments.=== connect_points ===*  void '''connect_points''' '''(''' int id, int to_id, bool bidirectional=true ''')'''Creates a segment between the given points. If {{Span|bidirectional}} is {{Span|false}}, only movement from {{Span|id}} to {{Span|to_id}} is allowed, not the reverse direction.::    var astar = AStar2D.new()    astar.add_point(1, Vector2(1, 1))    astar.add_point(2, Vector2(0, 5))    astar.connect_points(1, 2, false)=== disconnect_points ===*  void '''disconnect_points''' '''(''' int id, int to_id ''')'''Deletes the segment between the given points.=== get_available_point_id ===*  int '''get_available_point_id ( )''' constReturns the next available point ID with no point associated to it.=== get_closest_point ===*  int '''get_closest_point''' '''(''' [[Vector2 GD|Vector2]] to_position, bool include_disabled=false ''')''' constReturns the ID of the closest point to {{Span|to_position}}, optionally taking disabled points into account. Returns -1 if there are no points in the points pool.=== get_closest_position_in_segment ===*  [[Vector2 GD|Vector2]] '''get_closest_position_in_segment''' '''(''' [[Vector2 GD|Vector2]] to_position ''')''' constReturns the closest position to {{Span|to_position}} that resides inside a segment between two connected points.::    var astar = AStar2D.new()    astar.add_point(1, Vector2(0, 0))    astar.add_point(2, Vector2(0, 5))    astar.connect_points(1, 2)    var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)The result is in the segment that goes from {{Span|y = 0}} to {{Span|y = 5}}. It's the closest position in the segment to the given point.=== get_id_path ===*  [[PackedInt32Array GD|PackedInt32Array]] '''get_id_path''' '''(''' int from_id, int to_id ''')'''Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.::    var astar = AStar2D.new()    astar.add_point(1, Vector2(0, 0))    astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1    astar.add_point(3, Vector2(1, 1))    astar.add_point(4, Vector2(2, 0))        astar.connect_points(1, 2, false)    astar.connect_points(2, 3, false)    astar.connect_points(4, 3, false)    astar.connect_points(1, 4, false)        var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]If you change the 2nd point's weight to 3, then the result will be {{Span|[1, 4, 3]}} instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.=== get_point_capacity ===*  int '''get_point_capacity ( )''' constReturns the capacity of the structure backing the points, useful in conjunction with {{Span|reserve_space}}.=== get_point_connections ===*  [[PackedInt32Array GD|PackedInt32Array]] '''get_point_connections''' '''(''' int id ''')'''Returns an array with the IDs of the points that form the connection with the given point.::    var astar = AStar2D.new()    astar.add_point(1, Vector2(0, 0))    astar.add_point(2, Vector2(0, 1))    astar.add_point(3, Vector2(1, 1))    astar.add_point(4, Vector2(2, 0))        astar.connect_points(1, 2, true)    astar.connect_points(1, 3, true)        var neighbors = astar.get_point_connections(1) # Returns [2, 3]=== get_point_count ===*  int '''get_point_count ( )''' constReturns the number of points currently in the points pool.=== get_point_path ===*  [[PackedVector2Array GD|PackedVector2Array]] '''get_point_path''' '''(''' int from_id, int to_id ''')'''Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.=== get_point_position ===*  [[Vector2 GD|Vector2]] '''get_point_position''' '''(''' int id ''')''' constReturns the position of the point associated with the given {{Span|id}}.=== get_point_weight_scale ===*  float '''get_point_weight_scale''' '''(''' int id ''')''' constReturns the weight scale of the point associated with the given {{Span|id}}.=== get_points ===*  [[Array GD|Array]] '''get_points ( )'''Returns an array of all points.=== has_point ===*  bool '''has_point''' '''(''' int id ''')''' constReturns whether a point associated with the given {{Span|id}} exists.=== is_point_disabled ===*  bool '''is_point_disabled''' '''(''' int id ''')''' constReturns whether a point is disabled or not for pathfinding. By default, all points are enabled.=== remove_point ===*  void '''remove_point''' '''(''' int id ''')'''Removes the point associated with the given {{Span|id}} from the points pool.=== reserve_space ===*  void '''reserve_space''' '''(''' int num_nodes ''')'''Reserves space internally for {{Span|num_nodes}} points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity.=== set_point_disabled ===*  void '''set_point_disabled''' '''(''' int id, bool disabled=true ''')'''Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.=== set_point_position ===*  void '''set_point_position''' '''(''' int id, [[Vector2 GD|Vector2]] position ''')'''Sets the {{Span|position}} for the point with the given {{Span|id}}.=== set_point_weight_scale ===*  void '''set_point_weight_scale''' '''(''' int id, float weight_scale ''')'''Sets the {{Span|weight_scale}} for the point with the given {{Span|id}}.