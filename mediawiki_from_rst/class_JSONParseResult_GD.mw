__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Data class wrapper for decoded JSON.== Description ==Returned by [[JSON GD#parse|JSON.parse()]], {{Span|JSONParseResult}} contains the decoded JSON or error information if the JSON source wasn't successfully parsed. You can check if the JSON source was successfully parsed with {{Span|if json_result.error == OK}}.== Properties =={| class="wikitable | [[@GlobalScope GD#Error|Error]]|| [[#error|error]]||        |-| int|| [[#error_line|error_line]]|| {{Span|-1}} |-| [[String GD|String]]|| [[#error_string|error_string]]|| {{Span|""}} |-| [[Variant GD|Variant]]|| [[#result|result]]||        |}== Property Descriptions ===== error ===*  [[@GlobalScope GD#Error|Error]] '''error'''{| class="wikitable | ''Setter''|| set_error(value) |-| ''Getter''|| get_error()      |}The error type if the JSON source was not successfully parsed. See the [[@GlobalScope GD#Error|Error]] constants.=== error_line ===*  int '''error_line'''{| class="wikitable | ''Default''|| {{Span|-1}}                |-| ''Setter''|| set_error_line(value) |-| ''Getter''|| get_error_line()      |}The line number where the error occurred if JSON source was not successfully parsed.=== error_string ===*  [[String GD|String]] '''error_string'''{| class="wikitable | ''Default''|| {{Span|""}}                  |-| ''Setter''|| set_error_string(value) |-| ''Getter''|| get_error_string()      |}The error message if JSON source was not successfully parsed. See the [[@GlobalScope GD#Error|Error]] constants.=== result ===*  [[Variant GD|Variant]] '''result'''{| class="wikitable | ''Setter''|| set_result(value) |-| ''Getter''|| get_result()      |}A [[Variant GD|Variant]] containing the parsed JSON. Use [[@GDScript GD#typeof|@GDScript.typeof()]] or the {{Span|is}} keyword to check if it is what you expect. For example, if the JSON source starts with curly braces ({{Span|{}}}), a [[Dictionary GD|Dictionary]] will be returned. If the JSON source starts with braces ({{Span|[]}}), an [[Array GD|Array]] will be returned.'''Note:''' The JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.'''Note:''' JSON objects do not preserve key order like Godot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:::    var p = JSON.parse('["hello", "world", "!"]')    if typeof(p.result) == TYPE_ARRAY:        print(p.result[0]) # Prints "hello"    else:        print("unexpected results")