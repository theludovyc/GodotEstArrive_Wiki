__NOTOC__'''Inherits:''' [[Node GD|Node]] '''<''' [[Object GD|Object]]A node with the ability to send HTTP(S) requests.== Description ==A node with the ability to send HTTP requests. Uses [[HTTPClient GD|HTTPClient]] internally.Can be used to make HTTP requests, i.e. download or upload files or web content via HTTP.'''Example of contacting a REST API and printing one of its returned fields:'''::    func _ready():        # Create an HTTP request node and connect its completion signal.        var http_request = HTTPRequest.new()        add_child(http_request)        http_request.connect("request_completed", self, "_http_request_completed")            # Perform the HTTP request. The URL below returns some JSON as of writing.        var error = http_request.request("https://httpbin.org/get")        if error != OK:            push_error("An error occurred in the HTTP request.")            # Called when the HTTP request is completed.    func _http_request_completed(result, response_code, headers, body):        var response = parse_json(body.get_string_from_utf8())            # Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).        print(response.headers["User-Agent"])'''Example of loading and displaying an image using HTTPRequest:'''::    func _ready():        # Create an HTTP request node and connect its completion signal.        var http_request = HTTPRequest.new()        add_child(http_request)        http_request.connect("request_completed", self, "_http_request_completed")            # Perform the HTTP request. The URL below returns a PNG image as of writing.        var error = http_request.request("https://via.placeholder.com/512")        if error != OK:            push_error("An error occurred in the HTTP request.")            # Called when the HTTP request is completed.    func _http_request_completed(result, response_code, headers, body):        var image = Image.new()        var error = image.load_png_from_buffer(body)        if error != OK:            push_error("Couldn't load the image.")            var texture = ImageTexture.new()        texture.create_from_image(image)            # Display the image in a TextureRect node.        var texture_rect = TextureRect.new()        add_child(texture_rect)        texture_rect.texture = texture== Tutorials ==*  :doc:`../tutorials/networking/http_request_class`*  :doc:`../tutorials/networking/ssl_certificates`== Properties =={| class="wikitable | int|| [[#body_size_limit|body_size_limit]]|| {{Span|-1}}    |-| int|| [[#download_chunk_size|download_chunk_size]]|| {{Span|4096}}  |-| [[String GD|String]]|| [[#download_file|download_file]]|| {{Span|""}}    |-| int|| [[#max_redirects|max_redirects]]|| {{Span|8}}     |-| int|| [[#timeout|timeout]]|| {{Span|0}}     |-| bool|| [[#use_threads|use_threads]]|| {{Span|false}} |}== Methods =={| class="wikitable | void|| [[#cancel_request|cancel_request]] '''(''' ''')'''                                                                                                                                                                                                                                                          |-| int|| [[#get_body_size|get_body_size]] '''(''' ''')''' const                                                                                                                                                                                                                                                      |-| int|| [[#get_downloaded_bytes|get_downloaded_bytes]] '''(''' ''')''' const                                                                                                                                                                                                                                        |-| [[#Status|Status]]|| [[#get_http_client_status|get_http_client_status]] '''(''' ''')''' const                                                                                                                                                                                                                                    |-| [[@GlobalScope GD#Error|Error]]|| [[#request|request]] '''(''' [[String GD|String]] url, [[PackedStringArray GD|PackedStringArray]] custom_headers=PackedStringArray(  ), bool ssl_validate_domain=true, [[#Method|Method]] method=0, [[String GD|String]] request_data="" ''')''' |}== Signals ===== request_completed ===*  '''request_completed''' '''(''' int result, int response_code, [[PackedStringArray GD|PackedStringArray]] headers, [[PackedByteArray GD|PackedByteArray]] body ''')'''Emitted when a request is completed.== Enumerations ===== Result ====== RESULT_SUCCESS ====== RESULT_CHUNKED_BODY_SIZE_MISMATCH ====== RESULT_CANT_CONNECT ====== RESULT_CANT_RESOLVE ====== RESULT_CONNECTION_ERROR ====== RESULT_SSL_HANDSHAKE_ERROR ====== RESULT_NO_RESPONSE ====== RESULT_BODY_SIZE_LIMIT_EXCEEDED ====== RESULT_REQUEST_FAILED ====== RESULT_DOWNLOAD_FILE_CANT_OPEN ====== RESULT_DOWNLOAD_FILE_WRITE_ERROR ====== RESULT_REDIRECT_LIMIT_REACHED ====== RESULT_TIMEOUT ===enum '''Result''':*  '''RESULT_SUCCESS''' = '''0'''  Request successful.*  '''RESULT_CHUNKED_BODY_SIZE_MISMATCH''' = '''1'''*  '''RESULT_CANT_CONNECT''' = '''2'''  Request failed while connecting.*  '''RESULT_CANT_RESOLVE''' = '''3'''  Request failed while resolving.*  '''RESULT_CONNECTION_ERROR''' = '''4'''  Request failed due to connection (read/write) error.*  '''RESULT_SSL_HANDSHAKE_ERROR''' = '''5'''  Request failed on SSL handshake.*  '''RESULT_NO_RESPONSE''' = '''6'''  Request does not have a response (yet).*  '''RESULT_BODY_SIZE_LIMIT_EXCEEDED''' = '''7'''  Request exceeded its maximum size limit, see [[#body_size_limit|body_size_limit]].*  '''RESULT_REQUEST_FAILED''' = '''8'''  Request failed (currently unused).*  '''RESULT_DOWNLOAD_FILE_CANT_OPEN''' = '''9'''  HTTPRequest couldn't open the download file.*  '''RESULT_DOWNLOAD_FILE_WRITE_ERROR''' = '''10'''  HTTPRequest couldn't write to the download file.*  '''RESULT_REDIRECT_LIMIT_REACHED''' = '''11'''  Request reached its maximum redirect limit, see [[#max_redirects|max_redirects]].*  '''RESULT_TIMEOUT''' = '''12'''== Property Descriptions ===== body_size_limit ===*  int '''body_size_limit'''{| class="wikitable | ''Default''|| {{Span|-1}}                     |-| ''Setter''|| set_body_size_limit(value) |-| ''Getter''|| get_body_size_limit()      |}Maximum allowed size for response bodies.=== download_chunk_size ===*  int '''download_chunk_size'''{| class="wikitable | ''Default''|| {{Span|4096}}                       |-| ''Setter''|| set_download_chunk_size(value) |-| ''Getter''|| get_download_chunk_size()      |}The size of the buffer used and maximum bytes to read per iteration. See [[HTTPClient GD#read_chunk_size|HTTPClient.read_chunk_size()]].Set this to a higher value (e.g. 65536 for 64 KiB) when downloading large files to achieve better speeds at the cost of memory.=== download_file ===*  [[String GD|String]] '''download_file'''{| class="wikitable | ''Default''|| {{Span|""}}                   |-| ''Setter''|| set_download_file(value) |-| ''Getter''|| get_download_file()      |}The file to download into. Will output any received file into it.=== max_redirects ===*  int '''max_redirects'''{| class="wikitable | ''Default''|| {{Span|8}}                    |-| ''Setter''|| set_max_redirects(value) |-| ''Getter''|| get_max_redirects()      |}Maximum number of allowed redirects.=== timeout ===*  int '''timeout'''{| class="wikitable | ''Default''|| {{Span|0}}              |-| ''Setter''|| set_timeout(value) |-| ''Getter''|| get_timeout()      |}=== use_threads ===*  bool '''use_threads'''{| class="wikitable | ''Default''|| {{Span|false}}              |-| ''Setter''|| set_use_threads(value) |-| ''Getter''|| is_using_threads()     |}If {{Span|true}}, multithreading is used to improve performance.== Method Descriptions ===== cancel_request ===*  void '''cancel_request ( )'''Cancels the current request.=== get_body_size ===*  int '''get_body_size ( )''' constReturns the response body length.'''Note:''' Some Web servers may not send a body length. In this case, the value returned will be {{Span|-1}}. If using chunked transfer encoding, the body length will also be {{Span|-1}}.=== get_downloaded_bytes ===*  int '''get_downloaded_bytes ( )''' constReturns the amount of bytes this HTTPRequest downloaded.=== get_http_client_status ===*  [[#Status|Status]] '''get_http_client_status ( )''' constReturns the current status of the underlying [[HTTPClient GD|HTTPClient]]. See [[#Status|Status]].=== request ===*  [[@GlobalScope GD#Error|Error]] '''request''' '''(''' [[String GD|String]] url, [[PackedStringArray GD|PackedStringArray]] custom_headers=PackedStringArray(  ), bool ssl_validate_domain=true, [[#Method|Method]] method=0, [[String GD|String]] request_data="" ''')'''Creates request on the underlying [[HTTPClient GD|HTTPClient]]. If there is no configuration errors, it tries to connect using [[HTTPClient GD#connect_to_host|HTTPClient.connect_to_host()]] and passes parameters onto [[HTTPClient GD#request|HTTPClient.request()]].Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] if request is successfully created. (Does not imply that the server has responded), [[@GlobalScope GD#ERR_UNCONFIGURED|@GlobalScope.ERR_UNCONFIGURED()]] if not in the tree, [[@GlobalScope GD#ERR_BUSY|@GlobalScope.ERR_BUSY()]] if still processing previous request, [[@GlobalScope GD#ERR_INVALID_PARAMETER|@GlobalScope.ERR_INVALID_PARAMETER()]] if given string is not a valid URL format, or [[@GlobalScope GD#ERR_CANT_CONNECT|@GlobalScope.ERR_CANT_CONNECT()]] if not using thread and the [[HTTPClient GD|HTTPClient]] cannot connect to host.