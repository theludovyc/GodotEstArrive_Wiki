__NOTOC__'''Inherits:''' [[PacketPeer GD|PacketPeer]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]A class representing a specific WebSocket connection.== Description ==This class represent a specific WebSocket connection, you can do lower level operations with it.You can choose to write to the socket in binary or text mode, and you can recognize the mode used for writing by the other peer.== Methods =={| class="wikitable | void|| [[#close|close]] '''(''' int code=1000, [[String GD|String]] reason="" ''')''' |-| [[String GD|String]]|| [[#get_connected_host|get_connected_host]] '''(''' ''')''' const                                        |-| int|| [[#get_connected_port|get_connected_port]] '''(''' ''')''' const                                        |-| [[#WriteMode|WriteMode]]|| [[#get_write_mode|get_write_mode]] '''(''' ''')''' const                                                |-| bool|| [[#is_connected_to_host|is_connected_to_host]] '''(''' ''')''' const                                    |-| void|| [[#set_no_delay|set_no_delay]] '''(''' bool enabled ''')'''                          |-| void|| [[#set_write_mode|set_write_mode]] '''(''' [[#WriteMode|WriteMode]] mode ''')'''  |-| bool|| [[#was_string_packet|was_string_packet]] '''(''' ''')''' const                                          |}== Enumerations ===== WriteMode ====== WRITE_MODE_TEXT ====== WRITE_MODE_BINARY ===enum '''WriteMode''':*  '''WRITE_MODE_TEXT''' = '''0'''  Specifies that WebSockets messages should be transferred as text payload (only valid UTF-8 is allowed).*  '''WRITE_MODE_BINARY''' = '''1'''  Specifies that WebSockets messages should be transferred as binary payload (any byte combination is allowed).== Method Descriptions ===== close ===*  void '''close''' '''(''' int code=1000, [[String GD|String]] reason="" ''')'''Closes this WebSocket connection. {{Span|code}} is the status code for the closure (see RFC 6455 section 7.4 for a list of valid status codes). {{Span|reason}} is the human readable reason for closing the connection (can be any UTF-8 string that's smaller than 123 bytes).'''Note:''' To achieve a clean close, you will need to keep polling until either [[WebSocketClient GD#connection_closed|WebSocketClient.connection_closed()]] or [[WebSocketServer GD#client_disconnected|WebSocketServer.client_disconnected()]] is received.'''Note:''' The HTML5 export might not support all status codes. Please refer to browser-specific documentation for more details.=== get_connected_host ===*  [[String GD|String]] '''get_connected_host ( )''' constReturns the IP address of the connected peer.'''Note:''' Not available in the HTML5 export.=== get_connected_port ===*  int '''get_connected_port ( )''' constReturns the remote port of the connected peer.'''Note:''' Not available in the HTML5 export.=== get_write_mode ===*  [[#WriteMode|WriteMode]] '''get_write_mode ( )''' constGets the current selected write mode. See [[#WriteMode|WriteMode]].=== is_connected_to_host ===*  bool '''is_connected_to_host ( )''' constReturns {{Span|true}} if this peer is currently connected.=== set_no_delay ===*  void '''set_no_delay''' '''(''' bool enabled ''')'''Disable Nagle's algorithm on the underling TCP socket (default). See [[StreamPeerTCP GD#set_no_delay|StreamPeerTCP.set_no_delay()]] for more information.'''Note:''' Not available in the HTML5 export.=== set_write_mode ===*  void '''set_write_mode''' '''(''' [[#WriteMode|WriteMode]] mode ''')'''Sets the socket to use the given [[#WriteMode|WriteMode]].=== was_string_packet ===*  bool '''was_string_packet ( )''' constReturns {{Span|true}} if the last received packet was sent as a text payload. See [[#WriteMode|WriteMode]].