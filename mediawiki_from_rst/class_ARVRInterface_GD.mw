__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[ARVRInterfaceGDNative GD|ARVRInterfaceGDNative]], [[MobileVRInterface GD|MobileVRInterface]]Base class for an AR/VR interface implementation.== Description ==This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through [[ARVRServer GD|ARVRServer]].== Tutorials ==*  :doc:`../tutorials/vr/index`== Properties =={| class="wikitable | bool|| [[#ar_is_anchor_detection_enabled|ar_is_anchor_detection_enabled]]|| {{Span|false}} |-| bool|| [[#interface_is_initialized|interface_is_initialized]]|| {{Span|false}} |-| bool|| [[#interface_is_primary|interface_is_primary]]|| {{Span|false}} |}== Methods =={| class="wikitable | int|| [[#get_camera_feed_id|get_camera_feed_id]] '''(''' ''')'''         |-| int|| [[#get_capabilities|get_capabilities]] '''(''' ''')''' const       |-| [[StringName GD|StringName]]|| [[#get_name|get_name]] '''(''' ''')''' const                       |-| [[Vector2 GD|Vector2]]|| [[#get_render_targetsize|get_render_targetsize]] '''(''' ''')'''   |-| [[#Tracking_status|Tracking_status]]|| [[#get_tracking_status|get_tracking_status]] '''(''' ''')''' const |-| bool|| [[#initialize|initialize]] '''(''' ''')'''                         |-| bool|| [[#is_stereo|is_stereo]] '''(''' ''')'''                           |-| void|| [[#uninitialize|uninitialize]] '''(''' ''')'''                     |}== Enumerations ===== Capabilities ====== ARVR_NONE ====== ARVR_MONO ====== ARVR_STEREO ====== ARVR_AR ====== ARVR_EXTERNAL ===enum '''Capabilities''':*  '''ARVR_NONE''' = '''0'''  No ARVR capabilities.*  '''ARVR_MONO''' = '''1'''  This interface can work with normal rendering output (non-HMD based AR).*  '''ARVR_STEREO''' = '''2'''  This interface supports stereoscopic rendering.*  '''ARVR_AR''' = '''4'''  This interface supports AR (video background and real world tracking).*  '''ARVR_EXTERNAL''' = '''8'''  This interface outputs to an external device. If the main viewport is used, the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of [[#get_render_targetsize|get_render_targetsize]]). Using a separate viewport node frees up the main viewport for other purposes.=== Eyes ====== EYE_MONO ====== EYE_LEFT ====== EYE_RIGHT ===enum '''Eyes''':*  '''EYE_MONO''' = '''0'''  Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported.*  '''EYE_LEFT''' = '''1'''  Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information.*  '''EYE_RIGHT''' = '''2'''  Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information.=== status ====== ARVR_NORMAL_TRACKING ====== ARVR_EXCESSIVE_MOTION ====== ARVR_INSUFFICIENT_FEATURES ====== ARVR_UNKNOWN_TRACKING ====== ARVR_NOT_TRACKING ===enum '''Tracking_status''':*  '''ARVR_NORMAL_TRACKING''' = '''0'''  Tracking is behaving as expected.*  '''ARVR_EXCESSIVE_MOTION''' = '''1'''  Tracking is hindered by excessive motion (the player is moving faster than tracking can keep up).*  '''ARVR_INSUFFICIENT_FEATURES''' = '''2'''  Tracking is hindered by insufficient features, it's too dark (for camera-based tracking), player is blocked, etc.*  '''ARVR_UNKNOWN_TRACKING''' = '''3'''  We don't know the status of the tracking or this interface does not provide feedback.*  '''ARVR_NOT_TRACKING''' = '''4'''  Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.).== Property Descriptions ===== ar_is_anchor_detection_enabled ===*  bool '''ar_is_anchor_detection_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                              |-| ''Setter''|| set_anchor_detection_is_enabled(value) |-| ''Getter''|| get_anchor_detection_is_enabled()      |}On an AR interface, {{Span|true}} if anchor detection is enabled.=== interface_is_initialized ===*  bool '''interface_is_initialized'''{| class="wikitable | ''Default''|| {{Span|false}}                 |-| ''Setter''|| set_is_initialized(value) |-| ''Getter''|| is_initialized()          |}{{Span|true}} if this interface been initialized.=== interface_is_primary ===*  bool '''interface_is_primary'''{| class="wikitable | ''Default''|| {{Span|false}}             |-| ''Setter''|| set_is_primary(value) |-| ''Getter''|| is_primary()          |}{{Span|true}} if this is the primary interface.== Method Descriptions ===== get_camera_feed_id ===*  int '''get_camera_feed_id ( )'''If this is an AR interface that requires displaying a camera feed as the background, this method returns the feed ID in the [[CameraServer GD|CameraServer]] for this interface.=== get_capabilities ===*  int '''get_capabilities ( )''' constReturns a combination of [[#Capabilities|Capabilities]] flags providing information about the capabilities of this interface.=== get_name ===*  [[StringName GD|StringName]] '''get_name ( )''' constReturns the name of this interface (OpenVR, OpenHMD, ARKit, etc).=== get_render_targetsize ===*  [[Vector2 GD|Vector2]] '''get_render_targetsize ( )'''Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.=== get_tracking_status ===*  [[#Tracking_status|Tracking_status]] '''get_tracking_status ( )''' constIf supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.=== initialize ===*  bool '''initialize ( )'''Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.After initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.'''Note:''' You must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot, such as for mobile VR.If you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively, you can add a separate viewport node to your scene and enable AR/VR on that viewport. It will be used to output to the HMD, leaving you free to do anything you like in the main window, such as using a separate camera as a spectator camera or rendering something completely different.While currently not used, you can activate additional interfaces. You may wish to do this if you want to track controllers from other platforms. However, at this point in time only one interface can render to an HMD.=== is_stereo ===*  bool '''is_stereo ( )'''Returns {{Span|true}} if the current output of this interface is in stereo.=== uninitialize ===*  void '''uninitialize ( )'''Turns the interface off.