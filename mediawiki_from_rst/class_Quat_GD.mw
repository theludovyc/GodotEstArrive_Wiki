__NOTOC__Quaternion.== Description ==A unit quaternion used for representing 3D rotations.It is similar to [[Basis GD|Basis]], which implements matrix representation of rotations, and can be parametrized using both an axis-angle pair or Euler angles. But due to its compactness and the way it is stored in memory, certain operations (obtaining axis-angle and performing SLERP, in particular) are more efficient and robust against floating-point errors.Quaternions need to be (re)normalized.== Tutorials ==*  `#interpolating-with-quaternions <../tutorials/3d/using_transforms.html#interpolating-with-quaternions>`_ in :doc:`../tutorials/3d/using_transforms`== Properties =={| class="wikitable | float|| [[#w|w]]|| {{Span|1.0}} |-| float|| [[#x|x]]|| {{Span|0.0}} |-| float|| [[#y|y]]|| {{Span|0.0}} |-| float|| [[#z|z]]|| {{Span|0.0}} |}== Methods =={| class="wikitable | [[Quat GD|Quat]]|| [[Quat GD#Quat|Quat]] '''(''' [[Basis GD|Basis]] from ''')'''                                                                                                      |-| [[Quat GD|Quat]]|| [[Quat GD#Quat|Quat]] '''(''' [[Vector3 GD|Vector3]] euler ''')'''                                                                                                 |-| [[Quat GD|Quat]]|| [[Quat GD#Quat|Quat]] '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''                                                                 |-| [[Quat GD|Quat]]|| [[Quat GD#Quat|Quat]] '''(''' float x, float y, float z, float w ''')'''                  |-| [[Quat GD|Quat]]|| [[#cubic_slerp|cubic_slerp]] '''(''' [[Quat GD|Quat]] b, [[Quat GD|Quat]] pre_a, [[Quat GD|Quat]] post_b, float t ''')''' |-| float|| [[#dot|dot]] '''(''' [[Quat GD|Quat]] b ''')'''                                                                                                             |-| [[Vector3 GD|Vector3]]|| [[#get_euler|get_euler]] '''(''' ''')'''                                                                                                                           |-| [[Quat GD|Quat]]|| [[#inverse|inverse]] '''(''' ''')'''                                                                                                                               |-| bool|| [[#is_equal_approx|is_equal_approx]] '''(''' [[Quat GD|Quat]] quat ''')'''                                                                                  |-| bool|| [[#is_normalized|is_normalized]] '''(''' ''')'''                                                                                                                   |-| float|| [[#length|length]] '''(''' ''')'''                                                                                                                                 |-| float|| [[#length_squared|length_squared]] '''(''' ''')'''                                                                                                                 |-| [[Quat GD|Quat]]|| [[#normalized|normalized]] '''(''' ''')'''                                                                                                                         |-| void|| [[#set_axis_angle|set_axis_angle]] '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''                                             |-| void|| [[#set_euler|set_euler]] '''(''' [[Vector3 GD|Vector3]] euler ''')'''                                                                                       |-| [[Quat GD|Quat]]|| [[#slerp|slerp]] '''(''' [[Quat GD|Quat]] b, float t ''')'''                                                                            |-| [[Quat GD|Quat]]|| [[#slerpni|slerpni]] '''(''' [[Quat GD|Quat]] b, float t ''')'''                                                                        |-| [[Vector3 GD|Vector3]]|| [[#xform|xform]] '''(''' [[Vector3 GD|Vector3]] v ''')'''                                                                                                   |}== Constants ===== IDENTITY ===*  '''IDENTITY''' = '''Quat( 0, 0, 0, 1 )'''  The identity rotation. Equivalent to an identity matrix. If a vector is transformed by an identity quaternion, it will not change.== Property Descriptions ===== w ===*  float '''w'''{| class="wikitable | ''Default''|| {{Span|1.0}} |}W component of the quaternion.=== x ===*  float '''x'''{| class="wikitable | ''Default''|| {{Span|0.0}} |}X component of the quaternion.=== y ===*  float '''y'''{| class="wikitable | ''Default''|| {{Span|0.0}} |}Y component of the quaternion.=== z ===*  float '''z'''{| class="wikitable | ''Default''|| {{Span|0.0}} |}Z component of the quaternion.== Method Descriptions ===== Quat ===*  [[Quat GD|Quat]] '''Quat''' '''(''' [[Basis GD|Basis]] from ''')'''Returns the rotation matrix corresponding to the given quaternion.*  [[Quat GD|Quat]] '''Quat''' '''(''' [[Vector3 GD|Vector3]] euler ''')'''Returns a quaternion that will perform a rotation specified by Euler angles (in the YXZ convention: first Z, then X, and Y last), given in the vector format as (X angle, Y angle, Z angle).*  [[Quat GD|Quat]] '''Quat''' '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''Returns a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector.*  [[Quat GD|Quat]] '''Quat''' '''(''' float x, float y, float z, float w ''')'''Returns a quaternion defined by these values.=== cubic_slerp ===*  [[Quat GD|Quat]] '''cubic_slerp''' '''(''' [[Quat GD|Quat]] b, [[Quat GD|Quat]] pre_a, [[Quat GD|Quat]] post_b, float t ''')'''Performs a cubic spherical-linear interpolation with another quaternion.=== dot ===*  float '''dot''' '''(''' [[Quat GD|Quat]] b ''')'''Returns the dot product of two quaternions.=== get_euler ===*  [[Vector3 GD|Vector3]] '''get_euler ( )'''Returns Euler angles (in the YXZ convention: first Z, then X, and Y last) corresponding to the rotation represented by the unit quaternion. Returned vector contains the rotation angles in the format (X angle, Y angle, Z angle).=== inverse ===*  [[Quat GD|Quat]] '''inverse ( )'''Returns the inverse of the quaternion.=== is_equal_approx ===*  bool '''is_equal_approx''' '''(''' [[Quat GD|Quat]] quat ''')'''Returns {{Span|true}} if this quaterion and {{Span|quat}} are approximately equal, by running [[@GDScript GD#is_equal_approx|@GDScript.is_equal_approx()]] on each component.=== is_normalized ===*  bool '''is_normalized ( )'''Returns whether the quaternion is normalized or not.=== length ===*  float '''length ( )'''Returns the length of the quaternion.=== length_squared ===*  float '''length_squared ( )'''Returns the length of the quaternion, squared.=== normalized ===*  [[Quat GD|Quat]] '''normalized ( )'''Returns a copy of the quaternion, normalized to unit length.=== set_axis_angle ===*  void '''set_axis_angle''' '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''Sets the quaternion to a rotation which rotates around axis by the specified angle, in radians. The axis must be a normalized vector.=== set_euler ===*  void '''set_euler''' '''(''' [[Vector3 GD|Vector3]] euler ''')'''Sets the quaternion to a rotation specified by Euler angles (in the YXZ convention: first Z, then X, and Y last), given in the vector format as (X angle, Y angle, Z angle).=== slerp ===*  [[Quat GD|Quat]] '''slerp''' '''(''' [[Quat GD|Quat]] b, float t ''')'''Performs a spherical-linear interpolation with another quaternion.=== slerpni ===*  [[Quat GD|Quat]] '''slerpni''' '''(''' [[Quat GD|Quat]] b, float t ''')'''Performs a spherical-linear interpolation with another quaterion without checking if the rotation path is not bigger than 90Â°.=== xform ===*  [[Vector3 GD|Vector3]] '''xform''' '''(''' [[Vector3 GD|Vector3]] v ''')'''Transforms the vector {{Span|v}} by this quaternion.