__NOTOC__'''Inherits:''' [[Object GD|Object]]'''Inherited By:''' [[AnimationPlayer GD|AnimationPlayer]], [[AnimationTree GD|AnimationTree]], [[AudioStreamPlayer GD|AudioStreamPlayer]], [[CanvasItem GD|CanvasItem]], [[CanvasLayer GD|CanvasLayer]], [[EditorFileSystem GD|EditorFileSystem]], [[EditorInterface GD|EditorInterface]], [[EditorPlugin GD|EditorPlugin]], [[EditorResourcePreview GD|EditorResourcePreview]], [[HTTPRequest GD|HTTPRequest]], [[InstancePlaceholder GD|InstancePlaceholder]], [[NavigationAgent GD|NavigationAgent]], [[NavigationAgent2D GD|NavigationAgent2D]], [[NavigationObstacle GD|NavigationObstacle]], [[NavigationObstacle2D GD|NavigationObstacle2D]], [[ResourcePreloader GD|ResourcePreloader]], [[SkeletonIK GD|SkeletonIK]], [[Spatial GD|Spatial]], [[Timer GD|Timer]], [[Tween GD|Tween]], [[Viewport GD|Viewport]], [[WorldEnvironment GD|WorldEnvironment]]Base class for all ''scene'' objects.== Description ==Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.A tree of nodes is called a ''scene''. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.'''Scene tree:''' The [[SceneTree GD|SceneTree]] contains the active tree of nodes. When a node is added to the scene tree, it receives the [[Node GD#NOTIFICATION_ENTER_TREE|NOTIFICATION_ENTER_TREE]] notification and its [[Node GD#_enter_tree|_enter_tree]] callback is triggered. Child nodes are always added ''after'' their parent node, i.e. the [[Node GD#_enter_tree|_enter_tree]] callback of a parent node will be triggered before its child's.Once all nodes have been added in the scene tree, they receive the [[Node GD#NOTIFICATION_READY|NOTIFICATION_READY]] notification and their respective [[Node GD#_ready|_ready]] callbacks are triggered. For groups of nodes, the [[Node GD#_ready|_ready]] callback is called in reverse order, starting with the children and moving up to the parent nodes.This means that when adding a node to the scene tree, the following order will be used for the callbacks: [[Node GD#_enter_tree|_enter_tree]] of the parent, [[Node GD#_enter_tree|_enter_tree]] of the children, [[Node GD#_ready|_ready]] of the children and finally [[Node GD#_ready|_ready]] of the parent (recursively for the entire scene tree).'''Processing:''' Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [[Node GD#_process|_process]], toggled with [[#set_process|set_process]]) happens as fast as possible and is dependent on the frame rate, so the processing time ''delta'' is passed as an argument. Physics processing (callback [[Node GD#_physics_process|_physics_process]], toggled with [[#set_physics_process|set_physics_process]]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.Nodes can also process input events. When present, the [[Node GD#_input|_input]] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [[Node GD#_unhandled_input|_unhandled_input]] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [[Control GD|Control]] nodes), ensuring that the node only receives the events that were meant for it.To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with the [[#owner|owner]] property. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.Finally, when a node is freed with [[Object GD#free|Object.free()]] or [[#queue_free|queue_free]], it will also free all its children.'''Groups:''' Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See [[#add_to_group|add_to_group]], [[#is_in_group|is_in_group]] and [[#remove_from_group|remove_from_group]]. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on [[SceneTree GD|SceneTree]].'''Networking with nodes:''' After connecting to a server (or making one, see [[NetworkedMultiplayerENet GD|NetworkedMultiplayerENet]]), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [[#rpc|rpc]] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its [[NodePath GD|NodePath]] (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos.== Tutorials ==*  :doc:`../getting_started/step_by_step/scenes_and_nodes`== Properties =={| class="wikitable | [[MultiplayerAPI GD|MultiplayerAPI]]|| [[#custom_multiplayer|custom_multiplayer]]||       |-| [[String GD|String]]|| [[#filename|filename]]||       |-| [[MultiplayerAPI GD|MultiplayerAPI]]|| [[#multiplayer|multiplayer]]||       |-| [[StringName GD|StringName]]|| [[#name|name]]||       |-| [[Node GD|Node]]|| [[#owner|owner]]||       |-| [[#PauseMode|PauseMode]]|| [[#pause_mode|pause_mode]]|| {{Span|0}} |-| int|| [[#process_priority|process_priority]]|| {{Span|0}} |}== Methods =={| class="wikitable | void|| [[Node GD#_enter_tree|_enter_tree]] '''(''' ''')''' virtual                                                                                                                                   |-| void|| [[Node GD#_exit_tree|_exit_tree]] '''(''' ''')''' virtual                                                                                                                                     |-| [[String GD|String]]|| [[Node GD#_get_configuration_warning|_get_configuration_warning]] '''(''' ''')''' virtual                                                                                                     |-| void|| [[Node GD#_input|_input]] '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtual                                                                                                   |-| void|| [[Node GD#_physics_process|_physics_process]] '''(''' float delta ''')''' virtual                                                                                         |-| void|| [[Node GD#_process|_process]] '''(''' float delta ''')''' virtual                                                                                                         |-| void|| [[Node GD#_ready|_ready]] '''(''' ''')''' virtual                                                                                                                                             |-| void|| [[Node GD#_unhandled_input|_unhandled_input]] '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtual                                                                               |-| void|| [[Node GD#_unhandled_key_input|_unhandled_key_input]] '''(''' [[InputEventKey GD|InputEventKey]] event ''')''' virtual                                                                 |-| void|| [[#add_child|add_child]] '''(''' [[Node GD|Node]] node, bool legible_unique_name=false ''')'''                                                               |-| void|| [[#add_child_below_node|add_child_below_node]] '''(''' [[Node GD|Node]] preceding_node, [[Node GD|Node]] node, bool legible_unique_name=false ''')''' |-| void|| [[#add_to_group|add_to_group]] '''(''' [[StringName GD|StringName]] group, bool persistent=false ''')'''                                                     |-| bool|| [[#can_process|can_process]] '''(''' ''')''' const                                                                                                                                     |-| [[Node GD|Node]]|| [[#duplicate|duplicate]] '''(''' int flags=15 ''')''' const                                                                                                          |-| [[Node GD|Node]]|| [[#find_node|find_node]] '''(''' [[String GD|String]] mask, bool recursive=true, bool owned=true ''')''' const                            |-| [[Node GD|Node]]|| [[#find_parent|find_parent]] '''(''' [[String GD|String]] mask ''')''' const                                                                                                    |-| [[Node GD|Node]]|| [[#get_child|get_child]] '''(''' int idx ''')''' const                                                                                                               |-| int|| [[#get_child_count|get_child_count]] '''(''' ''')''' const                                                                                                                             |-| [[Array GD|Array]]|| [[#get_children|get_children]] '''(''' ''')''' const                                                                                                                                   |-| [[Array GD|Array]]|| [[#get_groups|get_groups]] '''(''' ''')''' const                                                                                                                                       |-| int|| [[#get_index|get_index]] '''(''' ''')''' const                                                                                                                                         |-| int|| [[#get_network_master|get_network_master]] '''(''' ''')''' const                                                                                                                       |-| [[Node GD|Node]]|| [[#get_node|get_node]] '''(''' [[NodePath GD|NodePath]] path ''')''' const                                                                                                      |-| [[Array GD|Array]]|| [[#get_node_and_resource|get_node_and_resource]] '''(''' [[NodePath GD|NodePath]] path ''')'''                                                                                  |-| [[Node GD|Node]]|| [[#get_node_or_null|get_node_or_null]] '''(''' [[NodePath GD|NodePath]] path ''')''' const                                                                                      |-| [[Node GD|Node]]|| [[#get_parent|get_parent]] '''(''' ''')''' const                                                                                                                                       |-| [[NodePath GD|NodePath]]|| [[#get_path|get_path]] '''(''' ''')''' const                                                                                                                                           |-| [[NodePath GD|NodePath]]|| [[#get_path_to|get_path_to]] '''(''' [[Node GD|Node]] node ''')''' const                                                                                                        |-| float|| [[#get_physics_process_delta_time|get_physics_process_delta_time]] '''(''' ''')''' const                                                                                               |-| int|| [[#get_position_in_parent|get_position_in_parent]] '''(''' ''')''' const                                                                                                               |-| float|| [[#get_process_delta_time|get_process_delta_time]] '''(''' ''')''' const                                                                                                               |-| bool|| [[#get_scene_instance_load_placeholder|get_scene_instance_load_placeholder]] '''(''' ''')''' const                                                                                     |-| [[SceneTree GD|SceneTree]]|| [[#get_tree|get_tree]] '''(''' ''')''' const                                                                                                                                           |-| [[Viewport GD|Viewport]]|| [[#get_viewport|get_viewport]] '''(''' ''')''' const                                                                                                                                   |-| bool|| [[#has_node|has_node]] '''(''' [[NodePath GD|NodePath]] path ''')''' const                                                                                                      |-| bool|| [[#has_node_and_resource|has_node_and_resource]] '''(''' [[NodePath GD|NodePath]] path ''')''' const                                                                            |-| bool|| [[#is_a_parent_of|is_a_parent_of]] '''(''' [[Node GD|Node]] node ''')''' const                                                                                                  |-| bool|| [[#is_displayed_folded|is_displayed_folded]] '''(''' ''')''' const                                                                                                                     |-| bool|| [[#is_greater_than|is_greater_than]] '''(''' [[Node GD|Node]] node ''')''' const                                                                                                |-| bool|| [[#is_in_group|is_in_group]] '''(''' [[StringName GD|StringName]] group ''')''' const                                                                                           |-| bool|| [[#is_inside_tree|is_inside_tree]] '''(''' ''')''' const                                                                                                                               |-| bool|| [[#is_network_master|is_network_master]] '''(''' ''')''' const                                                                                                                         |-| bool|| [[#is_physics_processing|is_physics_processing]] '''(''' ''')''' const                                                                                                                 |-| bool|| [[#is_physics_processing_internal|is_physics_processing_internal]] '''(''' ''')''' const                                                                                               |-| bool|| [[#is_processing|is_processing]] '''(''' ''')''' const                                                                                                                                 |-| bool|| [[#is_processing_input|is_processing_input]] '''(''' ''')''' const                                                                                                                     |-| bool|| [[#is_processing_internal|is_processing_internal]] '''(''' ''')''' const                                                                                                               |-| bool|| [[#is_processing_unhandled_input|is_processing_unhandled_input]] '''(''' ''')''' const                                                                                                 |-| bool|| [[#is_processing_unhandled_key_input|is_processing_unhandled_key_input]] '''(''' ''')''' const                                                                                         |-| void|| [[#move_child|move_child]] '''(''' [[Node GD|Node]] child_node, int to_position ''')'''                                                                       |-| void|| [[#print_stray_nodes|print_stray_nodes]] '''(''' ''')'''                                                                                                                               |-| void|| [[#print_tree|print_tree]] '''(''' ''')'''                                                                                                                                             |-| void|| [[#print_tree_pretty|print_tree_pretty]] '''(''' ''')'''                                                                                                                               |-| void|| [[#propagate_call|propagate_call]] '''(''' [[StringName GD|StringName]] method, [[Array GD|Array]] args=[  ], bool parent_first=false ''')'''         |-| void|| [[#propagate_notification|propagate_notification]] '''(''' int what ''')'''                                                                                          |-| void|| [[#queue_free|queue_free]] '''(''' ''')'''                                                                                                                                             |-| void|| [[#raise|raise]] '''(''' ''')'''                                                                                                                                                       |-| void|| [[#remove_and_skip|remove_and_skip]] '''(''' ''')'''                                                                                                                                   |-| void|| [[#remove_child|remove_child]] '''(''' [[Node GD|Node]] node ''')'''                                                                                                            |-| void|| [[#remove_from_group|remove_from_group]] '''(''' [[StringName GD|StringName]] group ''')'''                                                                                     |-| void|| [[#replace_by|replace_by]] '''(''' [[Node GD|Node]] node, bool keep_data=false ''')'''                                                                       |-| void|| [[#request_ready|request_ready]] '''(''' ''')'''                                                                                                                                       |-| [[Variant GD|Variant]]|| [[#rpc|rpc]] '''(''' [[StringName GD|StringName]] method, ... ''')''' vararg                                                                                                    |-| int|| [[#rpc_config|rpc_config]] '''(''' [[StringName GD|StringName]] method, [[#RPCMode|RPCMode]] mode ''')'''                                                |-| [[Variant GD|Variant]]|| [[#rpc_id|rpc_id]] '''(''' int peer_id, [[StringName GD|StringName]] method, ... ''')''' vararg                                                               |-| [[Variant GD|Variant]]|| [[#rpc_unreliable|rpc_unreliable]] '''(''' [[StringName GD|StringName]] method, ... ''')''' vararg                                                                              |-| [[Variant GD|Variant]]|| [[#rpc_unreliable_id|rpc_unreliable_id]] '''(''' int peer_id, [[StringName GD|StringName]] method, ... ''')''' vararg                                         |-| void|| [[#rset|rset]] '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''                                                                       |-| int|| [[#rset_config|rset_config]] '''(''' [[StringName GD|StringName]] property, [[#RPCMode|RPCMode]] mode ''')'''                                            |-| void|| [[#rset_id|rset_id]] '''(''' int peer_id, [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''                                  |-| void|| [[#rset_unreliable|rset_unreliable]] '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''                                                 |-| void|| [[#rset_unreliable_id|rset_unreliable_id]] '''(''' int peer_id, [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''            |-| void|| [[#set_display_folded|set_display_folded]] '''(''' bool fold ''')'''                                                                                                |-| void|| [[#set_network_master|set_network_master]] '''(''' int id, bool recursive=true ''')'''                                                            |-| void|| [[#set_physics_process|set_physics_process]] '''(''' bool enable ''')'''                                                                                            |-| void|| [[#set_physics_process_internal|set_physics_process_internal]] '''(''' bool enable ''')'''                                                                          |-| void|| [[#set_process|set_process]] '''(''' bool enable ''')'''                                                                                                            |-| void|| [[#set_process_input|set_process_input]] '''(''' bool enable ''')'''                                                                                                |-| void|| [[#set_process_internal|set_process_internal]] '''(''' bool enable ''')'''                                                                                          |-| void|| [[#set_process_unhandled_input|set_process_unhandled_input]] '''(''' bool enable ''')'''                                                                            |-| void|| [[#set_process_unhandled_key_input|set_process_unhandled_key_input]] '''(''' bool enable ''')'''                                                                    |-| void|| [[#set_scene_instance_load_placeholder|set_scene_instance_load_placeholder]] '''(''' bool load_placeholder ''')'''                                                  |-| void|| [[#update_configuration_warning|update_configuration_warning]] '''(''' ''')'''                                                                                                         |}== Signals ===== ready ===*  '''ready ( )'''Emitted when the node is ready.=== renamed ===*  '''renamed ( )'''Emitted when the node is renamed.=== tree_entered ===*  '''tree_entered ( )'''Emitted when the node enters the tree.=== tree_exited ===*  '''tree_exited ( )'''Emitted after the node exits the tree and is no longer active.=== tree_exiting ===*  '''tree_exiting ( )'''Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization (or a "destructor", if you will).== Enumerations ===== PauseMode ====== PAUSE_MODE_INHERIT ====== PAUSE_MODE_STOP ====== PAUSE_MODE_PROCESS ===enum '''PauseMode''':*  '''PAUSE_MODE_INHERIT''' = '''0'''  Inherits pause mode from the node's parent. For the root node, it is equivalent to [[Node GD#PAUSE_MODE_STOP|PAUSE_MODE_STOP]]. Default.*  '''PAUSE_MODE_STOP''' = '''1'''  Stops processing when the [[SceneTree GD|SceneTree]] is paused.*  '''PAUSE_MODE_PROCESS''' = '''2'''  Continue to process regardless of the [[SceneTree GD|SceneTree]] pause state.=== DuplicateFlags ====== DUPLICATE_SIGNALS ====== DUPLICATE_GROUPS ====== DUPLICATE_SCRIPTS ====== DUPLICATE_USE_INSTANCING ===enum '''DuplicateFlags''':*  '''DUPLICATE_SIGNALS''' = '''1'''  Duplicate the node's signals.*  '''DUPLICATE_GROUPS''' = '''2'''  Duplicate the node's groups.*  '''DUPLICATE_SCRIPTS''' = '''4'''  Duplicate the node's scripts.*  '''DUPLICATE_USE_INSTANCING''' = '''8'''  Duplicate using instancing.An instance stays linked to the original so when the original changes, the instance changes too.== Constants ===== NOTIFICATION_ENTER_TREE ====== NOTIFICATION_EXIT_TREE ====== NOTIFICATION_MOVED_IN_PARENT ====== NOTIFICATION_READY ====== NOTIFICATION_PAUSED ====== NOTIFICATION_UNPAUSED ====== NOTIFICATION_PHYSICS_PROCESS ====== NOTIFICATION_PROCESS ====== NOTIFICATION_PARENTED ====== NOTIFICATION_UNPARENTED ====== NOTIFICATION_INSTANCED ====== NOTIFICATION_DRAG_BEGIN ====== NOTIFICATION_DRAG_END ====== NOTIFICATION_PATH_CHANGED ====== NOTIFICATION_INTERNAL_PROCESS ====== NOTIFICATION_INTERNAL_PHYSICS_PROCESS ====== NOTIFICATION_WM_MOUSE_ENTER ====== NOTIFICATION_WM_MOUSE_EXIT ====== NOTIFICATION_WM_FOCUS_IN ====== NOTIFICATION_WM_FOCUS_OUT ====== NOTIFICATION_WM_QUIT_REQUEST ====== NOTIFICATION_WM_GO_BACK_REQUEST ====== NOTIFICATION_WM_UNFOCUS_REQUEST ====== NOTIFICATION_OS_MEMORY_WARNING ====== NOTIFICATION_TRANSLATION_CHANGED ====== NOTIFICATION_WM_ABOUT ====== NOTIFICATION_CRASH ====== NOTIFICATION_OS_IME_UPDATE ====== NOTIFICATION_APP_RESUMED ====== NOTIFICATION_APP_PAUSED ===*  '''NOTIFICATION_ENTER_TREE''' = '''10'''  Notification received when the node enters a [[SceneTree GD|SceneTree]].*  '''NOTIFICATION_EXIT_TREE''' = '''11'''  Notification received when the node is about to exit a [[SceneTree GD|SceneTree]].*  '''NOTIFICATION_MOVED_IN_PARENT''' = '''12'''  Notification received when the node is moved in the parent.*  '''NOTIFICATION_READY''' = '''13'''  Notification received when the node is ready. See [[Node GD#_ready|_ready]].*  '''NOTIFICATION_PAUSED''' = '''14'''  Notification received when the node is paused.*  '''NOTIFICATION_UNPAUSED''' = '''15'''  Notification received when the node is unpaused.*  '''NOTIFICATION_PHYSICS_PROCESS''' = '''16'''  Notification received every frame when the physics process flag is set (see [[#set_physics_process|set_physics_process]]).*  '''NOTIFICATION_PROCESS''' = '''17'''  Notification received every frame when the process flag is set (see [[#set_process|set_process]]).*  '''NOTIFICATION_PARENTED''' = '''18'''  Notification received when a node is set as a child of another node.'''Note:''' This doesn't mean that a node entered the [[SceneTree GD|SceneTree]].*  '''NOTIFICATION_UNPARENTED''' = '''19'''  Notification received when a node is unparented (parent removed it from the list of children).*  '''NOTIFICATION_INSTANCED''' = '''20'''  Notification received when the node is instanced.*  '''NOTIFICATION_DRAG_BEGIN''' = '''21'''  Notification received when a drag begins.*  '''NOTIFICATION_DRAG_END''' = '''22'''  Notification received when a drag ends.*  '''NOTIFICATION_PATH_CHANGED''' = '''23'''  Notification received when the node's [[NodePath GD|NodePath]] changed.*  '''NOTIFICATION_INTERNAL_PROCESS''' = '''25'''  Notification received every frame when the internal process flag is set (see [[#set_process_internal|set_process_internal]]).*  '''NOTIFICATION_INTERNAL_PHYSICS_PROCESS''' = '''26'''  Notification received every frame when the internal physics process flag is set (see [[#set_physics_process_internal|set_physics_process_internal]]).*  '''NOTIFICATION_WM_MOUSE_ENTER''' = '''1002'''  Notification received from the OS when the mouse enters the game window.Implemented on desktop and web platforms.*  '''NOTIFICATION_WM_MOUSE_EXIT''' = '''1003'''  Notification received from the OS when the mouse leaves the game window.Implemented on desktop and web platforms.*  '''NOTIFICATION_WM_FOCUS_IN''' = '''1004'''  Notification received from the OS when the game window is focused.Implemented on all platforms.*  '''NOTIFICATION_WM_FOCUS_OUT''' = '''1005'''  Notification received from the OS when the game window is unfocused.Implemented on all platforms.*  '''NOTIFICATION_WM_QUIT_REQUEST''' = '''1006'''  Notification received from the OS when a quit request is sent (e.g. closing the window with a "Close" button or Alt+F4).Implemented on desktop platforms.*  '''NOTIFICATION_WM_GO_BACK_REQUEST''' = '''1007'''  Notification received from the OS when a go back request is sent (e.g. pressing the "Back" button on Android).Specific to the Android platform.*  '''NOTIFICATION_WM_UNFOCUS_REQUEST''' = '''1008'''  Notification received from the OS when an unfocus request is sent (e.g. another OS window wants to take the focus).No supported platforms currently send this notification.*  '''NOTIFICATION_OS_MEMORY_WARNING''' = '''1009'''  Notification received from the OS when the application is exceeding its allocated memory.Specific to the iOS platform.*  '''NOTIFICATION_TRANSLATION_CHANGED''' = '''1010'''  Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like [[Object GD#tr|Object.tr()]].*  '''NOTIFICATION_WM_ABOUT''' = '''1011'''  Notification received from the OS when a request for "About" information is sent.Specific to the macOS platform.*  '''NOTIFICATION_CRASH''' = '''1012'''  Notification received from Godot's crash handler when the engine is about to crash.Implemented on desktop platforms if the crash handler is enabled.*  '''NOTIFICATION_OS_IME_UPDATE''' = '''1013'''  Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string).Specific to the macOS platform.*  '''NOTIFICATION_APP_RESUMED''' = '''1014'''  Notification received from the OS when the app is resumed.Specific to the Android platform.*  '''NOTIFICATION_APP_PAUSED''' = '''1015'''  Notification received from the OS when the app is paused.Specific to the Android platform.== Property Descriptions ===== custom_multiplayer ===*  [[MultiplayerAPI GD|MultiplayerAPI]] '''custom_multiplayer'''{| class="wikitable | ''Setter''|| set_custom_multiplayer(value) |-| ''Getter''|| get_custom_multiplayer()      |}The override to the default [[MultiplayerAPI GD|MultiplayerAPI]]. Set to {{Span|null}} to use the default [[SceneTree GD|SceneTree]] one.=== filename ===*  [[String GD|String]] '''filename'''{| class="wikitable | ''Setter''|| set_filename(value) |-| ''Getter''|| get_filename()      |}When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.=== multiplayer ===*  [[MultiplayerAPI GD|MultiplayerAPI]] '''multiplayer'''{| class="wikitable | ''Getter''|| get_multiplayer() |}The [[MultiplayerAPI GD|MultiplayerAPI]] instance associated with this node. Either the [[#custom_multiplayer|custom_multiplayer]], or the default SceneTree one (if inside tree).=== name ===*  [[StringName GD|StringName]] '''name'''{| class="wikitable | ''Setter''|| set_name(value) |-| ''Getter''|| get_name()      |}The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed.=== owner ===*  [[Node GD|Node]] '''owner'''{| class="wikitable | ''Setter''|| set_owner(value) |-| ''Getter''|| get_owner()      |}The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using [[PackedScene GD|PackedScene]]), all the nodes it owns will be saved with it. This allows for the creation of complex [[SceneTree GD|SceneTree]]\ s, with instancing and subinstancing.=== pause_mode ===*  [[#PauseMode|PauseMode]] '''pause_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_pause_mode(value) |-| ''Getter''|| get_pause_mode()      |}Pause mode. How the node will behave if the [[SceneTree GD|SceneTree]] is paused.=== process_priority ===*  int '''process_priority'''{| class="wikitable | ''Default''|| {{Span|0}}                       |-| ''Setter''|| set_process_priority(value) |-| ''Getter''|| get_process_priority()      |}The node's priority in the execution order of the enabled processing callbacks (i.e. [[Node GD#NOTIFICATION_PROCESS|NOTIFICATION_PROCESS]], [[Node GD#NOTIFICATION_PHYSICS_PROCESS|NOTIFICATION_PHYSICS_PROCESS]] and their internal counterparts). Nodes whose process priority value is ''lower'' will have their processing callbacks executed first.== Method Descriptions ===== _enter_tree ===*  void '''_enter_tree ( )''' virtualCalled when the node enters the [[SceneTree GD|SceneTree]] (e.g. upon instancing, scene changing, or after calling [[#add_child|add_child]] in a script). If the node has children, its [[Node GD#_enter_tree|_enter_tree]] callback will be called first, and then that of the children.Corresponds to the [[Node GD#NOTIFICATION_ENTER_TREE|NOTIFICATION_ENTER_TREE]] notification in [[Object GD#_notification|_notification]].=== _exit_tree ===*  void '''_exit_tree ( )''' virtualCalled when the node is about to leave the [[SceneTree GD|SceneTree]] (e.g. upon freeing, scene changing, or after calling [[#remove_child|remove_child]] in a script). If the node has children, its [[Node GD#_exit_tree|_exit_tree]] callback will be called last, after all its children have left the tree.Corresponds to the [[Node GD#NOTIFICATION_EXIT_TREE|NOTIFICATION_EXIT_TREE]] notification in [[Object GD#_notification|_notification]] and signal [[#tree_exiting|tree_exiting]]. To get notified when the node has already left the active tree, connect to the [[#tree_exited|tree_exited]].=== _get_configuration_warning ===*  [[String GD|String]] '''_get_configuration_warning ( )''' virtualThe string returned from this method is displayed as a warning in the Scene Dock if the script that overrides it is a {{Span|tool}} script.Returning an empty string produces no warning.Call [[#update_configuration_warning|update_configuration_warning]] when the warning needs to be updated for this node.=== _input ===*  void '''_input''' '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtualCalled when there is an input event. The input event propagates up through the node tree until a node consumes it.It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [[#set_process_input|set_process_input]].To consume the input event and stop it propagating further to other nodes, [[SceneTree GD#set_input_as_handled|SceneTree.set_input_as_handled()]] can be called.For gameplay input, [[Node GD#_unhandled_input|_unhandled_input]] and [[Node GD#_unhandled_key_input|_unhandled_key_input]] are usually a better fit as they allow the GUI to intercept the events first.=== _physics_process ===*  void '''_physics_process''' '''(''' float delta ''')''' virtualCalled during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the {{Span|delta}} variable should be constant.It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [[#set_physics_process|set_physics_process]].Corresponds to the [[Node GD#NOTIFICATION_PHYSICS_PROCESS|NOTIFICATION_PHYSICS_PROCESS]] notification in [[Object GD#_notification|_notification]].=== _process ===*  void '''_process''' '''(''' float delta ''')''' virtualCalled during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the {{Span|delta}} time since the previous frame is not constant.It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [[#set_process|set_process]].Corresponds to the [[Node GD#NOTIFICATION_PROCESS|NOTIFICATION_PROCESS]] notification in [[Object GD#_notification|_notification]].=== _ready ===*  void '''_ready ( )''' virtualCalled when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their [[Node GD#_ready|_ready]] callbacks get triggered first, and the parent node will receive the ready notification afterwards.Corresponds to the [[Node GD#NOTIFICATION_READY|NOTIFICATION_READY]] notification in [[Object GD#_notification|_notification]]. See also the {{Span|onready}} keyword for variables.Usually used for initialization. For even earlier initialization, [[Object GD#_init|_init]] may be used. See also [[Node GD#_enter_tree|_enter_tree]].'''Note:''' [[Node GD#_ready|_ready]] may be called only once for each node. After removing a node from the scene tree and adding again, {{Span|_ready}} will not be called for the second time. This can be bypassed with requesting another call with [[#request_ready|request_ready]], which may be called anywhere before adding the node again.=== _unhandled_input ===*  void '''_unhandled_input''' '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtualCalled when an [[InputEvent GD|InputEvent]] hasn't been consumed by [[Node GD#_input|_input]] or any GUI. The input event propagates up through the node tree until a node consumes it.It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [[#set_process_unhandled_input|set_process_unhandled_input]].To consume the input event and stop it propagating further to other nodes, [[SceneTree GD#set_input_as_handled|SceneTree.set_input_as_handled()]] can be called.For gameplay input, this and [[Node GD#_unhandled_key_input|_unhandled_key_input]] are usually a better fit than [[Node GD#_input|_input]] as they allow the GUI to intercept the events first.=== _unhandled_key_input ===*  void '''_unhandled_key_input''' '''(''' [[InputEventKey GD|InputEventKey]] event ''')''' virtualCalled when an [[InputEventKey GD|InputEventKey]] hasn't been consumed by [[Node GD#_input|_input]] or any GUI. The input event propagates up through the node tree until a node consumes it.It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [[#set_process_unhandled_key_input|set_process_unhandled_key_input]].To consume the input event and stop it propagating further to other nodes, [[SceneTree GD#set_input_as_handled|SceneTree.set_input_as_handled()]] can be called.For gameplay input, this and [[Node GD#_unhandled_input|_unhandled_input]] are usually a better fit than [[Node GD#_input|_input]] as they allow the GUI to intercept the events first.=== add_child ===*  void '''add_child''' '''(''' [[Node GD|Node]] node, bool legible_unique_name=false ''')'''Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.If {{Span|legible_unique_name}} is {{Span|true}}, the child node will have an human-readable name based on the name of the node being instanced instead of its type.'''Note:''' If the child node already has a parent, the function will fail. Use [[#remove_child|remove_child]] first to remove the node from its current parent. For example:::    if child_node.get_parent():        child_node.get_parent().remove_child(child_node)    add_child(child_node)If you need the child node to be added below a specific node in the list of children, use [[#add_child_below_node|add_child_below_node]] instead of this method.'''Note:''' If you want a child to be persisted to a [[PackedScene GD|PackedScene]], you must set [[#owner|owner]] in addition to calling [[#add_child|add_child]]. This is typically relevant for [https://godot.readthedocs.io/en/latest/tutorials/misc/running_code_in_the_editor.html tool scripts] and [https://godot.readthedocs.io/en/latest/tutorials/plugins/editor/index.html editor plugins]. If [[#add_child|add_child]] is called without setting [[#owner|owner]], the newly added {{Span|Node}} will not be visible in the scene tree, though it will be visible in the 2D/3D view.=== add_child_below_node ===*  void '''add_child_below_node''' '''(''' [[Node GD|Node]] preceding_node, [[Node GD|Node]] node, bool legible_unique_name=false ''')'''Adds a child node below the {{Span|preceding_node}}.If {{Span|legible_unique_name}} is {{Span|true}}, the child node will have an human-readable name based on the name of the node being instanced instead of its type.Use [[#add_child|add_child]] instead of this method if you don't need the child node to be added below a specific node in the list of children.=== add_to_group ===*  void '''add_to_group''' '''(''' [[StringName GD|StringName]] group, bool persistent=false ''')'''Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [[#is_inside_tree|is_inside_tree]]). See notes in the description, and the group methods in [[SceneTree GD|SceneTree]].The {{Span|persistent}} option is used when packing node to [[PackedScene GD|PackedScene]] and saving to file. Non-persistent groups aren't stored.=== can_process ===*  bool '''can_process ( )''' constReturns {{Span|true}} if the node can process while the scene tree is paused (see [[#pause_mode|pause_mode]]). Always returns {{Span|true}} if the scene tree is not paused, and {{Span|false}} if the node is not in the tree.=== duplicate ===*  [[Node GD|Node]] '''duplicate''' '''(''' int flags=15 ''')''' constDuplicates the node, returning a new node.You can fine-tune the behavior using the {{Span|flags}} (see [[#DuplicateFlags|DuplicateFlags]]).'''Note:''' It will not work properly if the node contains a script with constructor arguments (i.e. needs to supply arguments to [[Object GD#_init|_init]] method). In that case, the node will be duplicated without a script.=== find_node ===*  [[Node GD|Node]] '''find_node''' '''(''' [[String GD|String]] mask, bool recursive=true, bool owned=true ''')''' constFinds a descendant of this node whose name matches {{Span|mask}} as in [[String GD#match|String.match()]] (i.e. case-sensitive, but {{Span|"*"}} matches zero or more characters and {{Span|"?"}} matches any single character except {{Span|"."}}).'''Note:''' It does not match against the full path, just against individual node names.If {{Span|owned}} is {{Span|true}}, this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through a script, because those scenes don't have an owner.=== find_parent ===*  [[Node GD|Node]] '''find_parent''' '''(''' [[String GD|String]] mask ''')''' constFinds the first parent of the current node whose name matches {{Span|mask}} as in [[String GD#match|String.match()]] (i.e. case-sensitive, but {{Span|"*"}} matches zero or more characters and {{Span|"?"}} matches any single character except {{Span|"."}}).'''Note:''' It does not match against the full path, just against individual node names.=== get_child ===*  [[Node GD|Node]] '''get_child''' '''(''' int idx ''')''' constReturns a child node by its index (see [[#get_child_count|get_child_count]]). This method is often used for iterating all children of a node.To access a child node via its name, use [[#get_node|get_node]].=== get_child_count ===*  int '''get_child_count ( )''' constReturns the number of child nodes.=== get_children ===*  [[Array GD|Array]] '''get_children ( )''' constReturns an array of references to node's children.=== get_groups ===*  [[Array GD|Array]] '''get_groups ( )''' constReturns an array listing the groups that the node is a member of.=== get_index ===*  int '''get_index ( )''' constReturns the node's index, i.e. its position among the siblings of its parent.=== get_network_master ===*  int '''get_network_master ( )''' constReturns the peer ID of the network master for this node. See [[#set_network_master|set_network_master]].=== get_node ===*  [[Node GD|Node]] '''get_node''' '''(''' [[NodePath GD|NodePath]] path ''')''' constFetches a node. The [[NodePath GD|NodePath]] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a {{Span|null instance}} is returned and an error is logged. Attempts to access methods on the return value will result in an "Attempt to call <method> on a null instance." error.'''Note:''' Fetching absolute paths only works when the node is inside the scene tree (see [[#is_inside_tree|is_inside_tree]]).'''Example:''' Assume your current node is Character and the following tree:::    /root    /root/Character    /root/Character/Sword    /root/Character/Backpack/Dagger    /root/MyGame    /root/Swamp/Alligator    /root/Swamp/Mosquito    /root/Swamp/GoblinPossible paths are:::    get_node("Sword")    get_node("Backpack/Dagger")    get_node("../Swamp/Alligator")    get_node("/root/MyGame")=== get_node_and_resource ===*  [[Array GD|Array]] '''get_node_and_resource''' '''(''' [[NodePath GD|NodePath]] path ''')'''Fetches a node and one of its resources as specified by the [[NodePath GD|NodePath]]'s subname (e.g. {{Span|Area2D/CollisionShape2D:shape}}). If several nested resources are specified in the [[NodePath GD|NodePath]], the last one will be fetched.The return value is an array of size 3: the first index points to the {{Span|Node}} (or {{Span|null}} if not found), the second index points to the [[Resource GD|Resource]] (or {{Span|null}} if not found), and the third index is the remaining [[NodePath GD|NodePath]], if any.For example, assuming that {{Span|Area2D/CollisionShape2D}} is a valid node and that its {{Span|shape}} property has been assigned a [[RectangleShape2D GD|RectangleShape2D]] resource, one could have this kind of output:::    print(get_node_and_resource("Area2D/CollisionShape2D")) # [[CollisionShape2D:1161], Null, ]    print(get_node_and_resource("Area2D/CollisionShape2D:shape")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]    print(get_node_and_resource("Area2D/CollisionShape2D:shape:extents")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]=== get_node_or_null ===*  [[Node GD|Node]] '''get_node_or_null''' '''(''' [[NodePath GD|NodePath]] path ''')''' constSimilar to [[#get_node|get_node]], but does not log an error if {{Span|path}} does not point to a valid {{Span|Node}}.=== get_parent ===*  [[Node GD|Node]] '''get_parent ( )''' constReturns the parent node of the current node, or an empty {{Span|Node}} if the node lacks a parent.=== get_path ===*  [[NodePath GD|NodePath]] '''get_path ( )''' constReturns the absolute path of the current node. This only works if the current node is inside the scene tree (see [[#is_inside_tree|is_inside_tree]]).=== get_path_to ===*  [[NodePath GD|NodePath]] '''get_path_to''' '''(''' [[Node GD|Node]] node ''')''' constReturns the relative [[NodePath GD|NodePath]] from this node to the specified {{Span|node}}. Both nodes must be in the same scene or the function will fail.=== get_physics_process_delta_time ===*  float '''get_physics_process_delta_time ( )''' constReturns the time elapsed since the last physics-bound frame (see [[Node GD#_physics_process|_physics_process]]). This is always a constant value in physics processing unless the frames per second is changed via [[Engine GD#iterations_per_second|Engine.iterations_per_second()]].=== get_position_in_parent ===*  int '''get_position_in_parent ( )''' constReturns the node's order in the scene tree branch. For example, if called on the first child node the position is {{Span|0}}.=== get_process_delta_time ===*  float '''get_process_delta_time ( )''' constReturns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.=== get_scene_instance_load_placeholder ===*  bool '''get_scene_instance_load_placeholder ( )''' constReturns {{Span|true}} if this is an instance load placeholder. See [[InstancePlaceholder GD|InstancePlaceholder]].=== get_tree ===*  [[SceneTree GD|SceneTree]] '''get_tree ( )''' constReturns the [[SceneTree GD|SceneTree]] that contains this node.=== get_viewport ===*  [[Viewport GD|Viewport]] '''get_viewport ( )''' constReturns the node's [[Viewport GD|Viewport]].=== has_node ===*  bool '''has_node''' '''(''' [[NodePath GD|NodePath]] path ''')''' constReturns {{Span|true}} if the node that the [[NodePath GD|NodePath]] points to exists.=== has_node_and_resource ===*  bool '''has_node_and_resource''' '''(''' [[NodePath GD|NodePath]] path ''')''' constReturns {{Span|true}} if the [[NodePath GD|NodePath]] points to a valid node and its subname points to a valid resource, e.g. {{Span|Area2D/CollisionShape2D:shape}}. Properties with a non-[[Resource GD|Resource]] type (e.g. nodes or primitive math types) are not considered resources.=== is_a_parent_of ===*  bool '''is_a_parent_of''' '''(''' [[Node GD|Node]] node ''')''' constReturns {{Span|true}} if the given node is a direct or indirect child of the current node.=== is_displayed_folded ===*  bool '''is_displayed_folded ( )''' constReturns {{Span|true}} if the node is folded (collapsed) in the Scene dock.=== is_greater_than ===*  bool '''is_greater_than''' '''(''' [[Node GD|Node]] node ''')''' constReturns {{Span|true}} if the given node occurs later in the scene hierarchy than the current node.=== is_in_group ===*  bool '''is_in_group''' '''(''' [[StringName GD|StringName]] group ''')''' constReturns {{Span|true}} if this node is in the specified group. See notes in the description, and the group methods in [[SceneTree GD|SceneTree]].=== is_inside_tree ===*  bool '''is_inside_tree ( )''' constReturns {{Span|true}} if this node is currently inside a [[SceneTree GD|SceneTree]].=== is_network_master ===*  bool '''is_network_master ( )''' constReturns {{Span|true}} if the local system is the master of this node.=== is_physics_processing ===*  bool '''is_physics_processing ( )''' constReturns {{Span|true}} if physics processing is enabled (see [[#set_physics_process|set_physics_process]]).=== is_physics_processing_internal ===*  bool '''is_physics_processing_internal ( )''' constReturns {{Span|true}} if internal physics processing is enabled (see [[#set_physics_process_internal|set_physics_process_internal]]).=== is_processing ===*  bool '''is_processing ( )''' constReturns {{Span|true}} if processing is enabled (see [[#set_process|set_process]]).=== is_processing_input ===*  bool '''is_processing_input ( )''' constReturns {{Span|true}} if the node is processing input (see [[#set_process_input|set_process_input]]).=== is_processing_internal ===*  bool '''is_processing_internal ( )''' constReturns {{Span|true}} if internal processing is enabled (see [[#set_process_internal|set_process_internal]]).=== is_processing_unhandled_input ===*  bool '''is_processing_unhandled_input ( )''' constReturns {{Span|true}} if the node is processing unhandled input (see [[#set_process_unhandled_input|set_process_unhandled_input]]).=== is_processing_unhandled_key_input ===*  bool '''is_processing_unhandled_key_input ( )''' constReturns {{Span|true}} if the node is processing unhandled key input (see [[#set_process_unhandled_key_input|set_process_unhandled_key_input]]).=== move_child ===*  void '''move_child''' '''(''' [[Node GD|Node]] child_node, int to_position ''')'''Moves a child node to a different position (order) among the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.=== print_stray_nodes ===*  void '''print_stray_nodes ( )'''Prints all stray nodes (nodes outside the [[SceneTree GD|SceneTree]]). Used for debugging. Works only in debug builds.=== print_tree ===*  void '''print_tree ( )'''Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the [[#get_node|get_node]] function.'''Example output:'''::    TheGame    TheGame/Menu    TheGame/Menu/Label    TheGame/Menu/Camera2D    TheGame/SplashScreen    TheGame/SplashScreen/Camera2D=== print_tree_pretty ===*  void '''print_tree_pretty ( )'''Similar to [[#print_tree|print_tree]], this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees.'''Example output:'''::     ┖╴TheGame        ┠╴Menu        ┃  ┠╴Label        ┃  ┖╴Camera2D        ┖-SplashScreen           ┖╴Camera2D=== propagate_call ===*  void '''propagate_call''' '''(''' [[StringName GD|StringName]] method, [[Array GD|Array]] args=[  ], bool parent_first=false ''')'''Calls the given method (if present) with the arguments given in {{Span|args}} on this node and recursively on all its children. If the {{Span|parent_first}} argument is {{Span|true}}, the method will be called on the current node first, then on all its children. If {{Span|parent_first}} is {{Span|false}}, the children will be called first.=== propagate_notification ===*  void '''propagate_notification''' '''(''' int what ''')'''Notifies the current node and all its children recursively by calling [[Object GD#notification|Object.notification()]] on all of them.=== queue_free ===*  void '''queue_free ( )'''Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [[Object GD#free|Object.free()]]. Use [[Object GD#is_queued_for_deletion|Object.is_queued_for_deletion()]] to check whether a node will be deleted at the end of the frame.=== raise ===*  void '''raise ( )'''Moves this node to the bottom of parent node's children hierarchy. This is often useful in GUIs ([[Control GD|Control]] nodes), because their order of drawing depends on their order in the tree, i.e. the further they are on the node list, the higher they are drawn. After using {{Span|raise}}, a Control will be drawn on top of their siblings.=== remove_and_skip ===*  void '''remove_and_skip ( )'''Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.=== remove_child ===*  void '''remove_child''' '''(''' [[Node GD|Node]] node ''')'''Removes a child node. The node is NOT deleted and must be deleted manually.=== remove_from_group ===*  void '''remove_from_group''' '''(''' [[StringName GD|StringName]] group ''')'''Removes a node from a group. See notes in the description, and the group methods in [[SceneTree GD|SceneTree]].=== replace_by ===*  void '''replace_by''' '''(''' [[Node GD|Node]] node, bool keep_data=false ''')'''Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.=== request_ready ===*  void '''request_ready ( )'''Requests that {{Span|_ready}} be called again. Note that the method won't be called immediately, but is scheduled for when the node is added to the scene tree again (see [[Node GD#_ready|_ready]]). {{Span|_ready}} is called only for the node which requested it, which means that you need to request ready for each child if you want them to call {{Span|_ready}} too (in which case, {{Span|_ready}} will be called in the same order as it would normally).=== rpc ===*  [[Variant GD|Variant]] '''rpc''' '''(''' [[StringName GD|StringName]] method, ... ''')''' varargSends a remote procedure call request for the given {{Span|method}} to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same [[NodePath GD|NodePath]], including the exact same node name. Behaviour depends on the RPC configuration for the given method, see [[#rpc_config|rpc_config]]. Methods are not exposed to RPCs by default. See also [[#rset|rset]] and [[#rset_config|rset_config]] for properties. Returns an empty [[Variant GD|Variant]].'''Note:''' You can only safely use RPCs on clients after you received the {{Span|connected_to_server}} signal from the [[SceneTree GD|SceneTree]]. You also need to keep track of the connection state, either by the [[SceneTree GD|SceneTree]] signals like {{Span|server_disconnected}} or by checking {{Span|SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED}}.=== rpc_config ===*  int '''rpc_config''' '''(''' [[StringName GD|StringName]] method, [[#RPCMode|RPCMode]] mode ''')'''Changes the RPC mode for the given {{Span|method}} to the given {{Span|mode}}. See [[#RPCMode|RPCMode]]. An alternative is annotating methods and properties with the corresponding keywords ({{Span|remote}}, {{Span|master}}, {{Span|puppet}}, {{Span|remotesync}}, {{Span|mastersync}}, {{Span|puppetsync}}). By default, methods are not exposed to networking (and RPCs). See also [[#rset|rset]] and [[#rset_config|rset_config]] for properties.=== rpc_id ===*  [[Variant GD|Variant]] '''rpc_id''' '''(''' int peer_id, [[StringName GD|StringName]] method, ... ''')''' varargSends a [[#rpc|rpc]] to a specific peer identified by {{Span|peer_id}} (see [[NetworkedMultiplayerPeer GD#set_target_peer|NetworkedMultiplayerPeer.set_target_peer()]]). Returns an empty [[Variant GD|Variant]].=== rpc_unreliable ===*  [[Variant GD|Variant]] '''rpc_unreliable''' '''(''' [[StringName GD|StringName]] method, ... ''')''' varargSends a [[#rpc|rpc]] using an unreliable protocol. Returns an empty [[Variant GD|Variant]].=== rpc_unreliable_id ===*  [[Variant GD|Variant]] '''rpc_unreliable_id''' '''(''' int peer_id, [[StringName GD|StringName]] method, ... ''')''' varargSends a [[#rpc|rpc]] to a specific peer identified by {{Span|peer_id}} using an unreliable protocol (see [[NetworkedMultiplayerPeer GD#set_target_peer|NetworkedMultiplayerPeer.set_target_peer()]]). Returns an empty [[Variant GD|Variant]].=== rset ===*  void '''rset''' '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see [[#rset_config|rset_config]]. See also [[#rpc|rpc]] for RPCs for methods, most information applies to this method as well.=== rset_config ===*  int '''rset_config''' '''(''' [[StringName GD|StringName]] property, [[#RPCMode|RPCMode]] mode ''')'''Changes the RPC mode for the given {{Span|property}} to the given {{Span|mode}}. See [[#RPCMode|RPCMode]]. An alternative is annotating methods and properties with the corresponding keywords ({{Span|remote}}, {{Span|master}}, {{Span|puppet}}, {{Span|remotesync}}, {{Span|mastersync}}, {{Span|puppetsync}}). By default, properties are not exposed to networking (and RPCs). See also [[#rpc|rpc]] and [[#rpc_config|rpc_config]] for methods.=== rset_id ===*  void '''rset_id''' '''(''' int peer_id, [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''Remotely changes the property's value on a specific peer identified by {{Span|peer_id}} (see [[NetworkedMultiplayerPeer GD#set_target_peer|NetworkedMultiplayerPeer.set_target_peer()]]).=== rset_unreliable ===*  void '''rset_unreliable''' '''(''' [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''Remotely changes the property's value on other peers (and locally) using an unreliable protocol.=== rset_unreliable_id ===*  void '''rset_unreliable_id''' '''(''' int peer_id, [[StringName GD|StringName]] property, [[Variant GD|Variant]] value ''')'''Remotely changes property's value on a specific peer identified by {{Span|peer_id}} using an unreliable protocol (see [[NetworkedMultiplayerPeer GD#set_target_peer|NetworkedMultiplayerPeer.set_target_peer()]]).=== set_display_folded ===*  void '''set_display_folded''' '''(''' bool fold ''')'''Sets the folded state of the node in the Scene dock.=== set_network_master ===*  void '''set_network_master''' '''(''' int id, bool recursive=true ''')'''Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the {{Span|master}} and {{Span|puppet}} keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If {{Span|recursive}}, the given peer is recursively set as the master for all children of this node.=== set_physics_process ===*  void '''set_physics_process''' '''(''' bool enable ''')'''Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a [[Node GD#NOTIFICATION_PHYSICS_PROCESS|NOTIFICATION_PHYSICS_PROCESS]] at a fixed (usually 60 FPS, see [[Engine GD#iterations_per_second|Engine.iterations_per_second()]] to change) interval (and the [[Node GD#_physics_process|_physics_process]] callback will be called if exists). Enabled automatically if [[Node GD#_physics_process|_physics_process]] is overridden. Any calls to this before [[Node GD#_ready|_ready]] will be ignored.=== set_physics_process_internal ===*  void '''set_physics_process_internal''' '''(''' bool enable ''')'''Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal [[Node GD#_physics_process|_physics_process]] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting ([[#set_physics_process|set_physics_process]]). Only useful for advanced uses to manipulate built-in nodes' behaviour.=== set_process ===*  void '''set_process''' '''(''' bool enable ''')'''Enables or disables processing. When a node is being processed, it will receive a [[Node GD#NOTIFICATION_PROCESS|NOTIFICATION_PROCESS]] on every drawn frame (and the [[Node GD#_process|_process]] callback will be called if exists). Enabled automatically if [[Node GD#_process|_process]] is overridden. Any calls to this before [[Node GD#_ready|_ready]] will be ignored.=== set_process_input ===*  void '''set_process_input''' '''(''' bool enable ''')'''Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [[Node GD#_input|_input]] is overridden. Any calls to this before [[Node GD#_ready|_ready]] will be ignored.=== set_process_internal ===*  void '''set_process_internal''' '''(''' bool enable ''')'''Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal [[Node GD#_process|_process]] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting ([[#set_process|set_process]]). Only useful for advanced uses to manipulate built-in nodes' behaviour.=== set_process_unhandled_input ===*  void '''set_process_unhandled_input''' '''(''' bool enable ''')'''Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [[Control GD|Control]]). Enabled automatically if [[Node GD#_unhandled_input|_unhandled_input]] is overridden. Any calls to this before [[Node GD#_ready|_ready]] will be ignored.=== set_process_unhandled_key_input ===*  void '''set_process_unhandled_key_input''' '''(''' bool enable ''')'''Enables unhandled key input processing. Enabled automatically if [[Node GD#_unhandled_key_input|_unhandled_key_input]] is overridden. Any calls to this before [[Node GD#_ready|_ready]] will be ignored.=== set_scene_instance_load_placeholder ===*  void '''set_scene_instance_load_placeholder''' '''(''' bool load_placeholder ''')'''Sets whether this is an instance load placeholder. See [[InstancePlaceholder GD|InstancePlaceholder]].=== update_configuration_warning ===*  void '''update_configuration_warning ( )'''Updates the warning displayed for this node in the Scene Dock.Use [[Node GD#_get_configuration_warning|_get_configuration_warning]] to setup the warning message to display.