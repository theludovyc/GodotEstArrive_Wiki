__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Low-level class for creating parsers for [https://en.wikipedia.org/wiki/XML XML] files.== Description ==This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low-level so it can be applied to any possible schema.== Methods =={| class="wikitable | int|| [[#get_attribute_count|get_attribute_count]] '''(''' ''')''' const                                                        |-| [[String GD|String]]|| [[#get_attribute_name|get_attribute_name]] '''(''' int idx ''')''' const                                |-| [[String GD|String]]|| [[#get_attribute_value|get_attribute_value]] '''(''' int idx ''')''' const                              |-| int|| [[#get_current_line|get_current_line]] '''(''' ''')''' const                                                              |-| [[String GD|String]]|| [[#get_named_attribute_value|get_named_attribute_value]] '''(''' [[String GD|String]] name ''')''' const           |-| [[String GD|String]]|| [[#get_named_attribute_value_safe|get_named_attribute_value_safe]] '''(''' [[String GD|String]] name ''')''' const |-| [[String GD|String]]|| [[#get_node_data|get_node_data]] '''(''' ''')''' const                                                                    |-| [[String GD|String]]|| [[#get_node_name|get_node_name]] '''(''' ''')''' const                                                                    |-| int|| [[#get_node_offset|get_node_offset]] '''(''' ''')''' const                                                                |-| [[#NodeType|NodeType]]|| [[#get_node_type|get_node_type]] '''(''' ''')'''                                                                          |-| bool|| [[#has_attribute|has_attribute]] '''(''' [[String GD|String]] name ''')''' const                                   |-| bool|| [[#is_empty|is_empty]] '''(''' ''')''' const                                                                              |-| [[@GlobalScope GD#Error|Error]]|| [[#open|open]] '''(''' [[String GD|String]] file ''')'''                                                           |-| [[@GlobalScope GD#Error|Error]]|| [[#open_buffer|open_buffer]] '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''                         |-| [[@GlobalScope GD#Error|Error]]|| [[#read|read]] '''(''' ''')'''                                                                                            |-| [[@GlobalScope GD#Error|Error]]|| [[#seek|seek]] '''(''' int position ''')'''                                                             |-| void|| [[#skip_section|skip_section]] '''(''' ''')'''                                                                            |}== Enumerations ===== NodeType ====== NODE_NONE ====== NODE_ELEMENT ====== NODE_ELEMENT_END ====== NODE_TEXT ====== NODE_COMMENT ====== NODE_CDATA ====== NODE_UNKNOWN ===enum '''NodeType''':*  '''NODE_NONE''' = '''0'''  There's no node (no file or buffer opened).*  '''NODE_ELEMENT''' = '''1'''  Element (tag).*  '''NODE_ELEMENT_END''' = '''2'''  End of element.*  '''NODE_TEXT''' = '''3'''  Text node.*  '''NODE_COMMENT''' = '''4'''  Comment node.*  '''NODE_CDATA''' = '''5'''  CDATA content.*  '''NODE_UNKNOWN''' = '''6'''  Unknown node.== Method Descriptions ===== get_attribute_count ===*  int '''get_attribute_count ( )''' constGets the amount of attributes in the current element.=== get_attribute_name ===*  [[String GD|String]] '''get_attribute_name''' '''(''' int idx ''')''' constGets the name of the attribute specified by the index in {{Span|idx}} argument.=== get_attribute_value ===*  [[String GD|String]] '''get_attribute_value''' '''(''' int idx ''')''' constGets the value of the attribute specified by the index in {{Span|idx}} argument.=== get_current_line ===*  int '''get_current_line ( )''' constGets the current line in the parsed file (currently not implemented).=== get_named_attribute_value ===*  [[String GD|String]] '''get_named_attribute_value''' '''(''' [[String GD|String]] name ''')''' constGets the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.=== get_named_attribute_value_safe ===*  [[String GD|String]] '''get_named_attribute_value_safe''' '''(''' [[String GD|String]] name ''')''' constGets the value of a certain attribute of the current element by name. This will return an empty [[String GD|String]] if the attribute is not found.=== get_node_data ===*  [[String GD|String]] '''get_node_data ( )''' constGets the contents of a text node. This will raise an error in any other type of node.=== get_node_name ===*  [[String GD|String]] '''get_node_name ( )''' constGets the name of the current element node. This will raise an error if the current node type is neither [[XMLParser GD#NODE_ELEMENT|NODE_ELEMENT]] nor [[XMLParser GD#NODE_ELEMENT_END|NODE_ELEMENT_END]].=== get_node_offset ===*  int '''get_node_offset ( )''' constGets the byte offset of the current node since the beginning of the file or buffer.=== get_node_type ===*  [[#NodeType|NodeType]] '''get_node_type ( )'''Gets the type of the current node. Compare with [[#NodeType|NodeType]] constants.=== has_attribute ===*  bool '''has_attribute''' '''(''' [[String GD|String]] name ''')''' constCheck whether the current element has a certain attribute.=== is_empty ===*  bool '''is_empty ( )''' constCheck whether the current element is empty (this only works for completely empty tags, e.g. {{Span|<element \>}}).=== open ===*  [[@GlobalScope GD#Error|Error]] '''open''' '''(''' [[String GD|String]] file ''')'''Opens an XML file for parsing. This returns an error code.=== open_buffer ===*  [[@GlobalScope GD#Error|Error]] '''open_buffer''' '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''Opens an XML raw buffer for parsing. This returns an error code.=== read ===*  [[@GlobalScope GD#Error|Error]] '''read ( )'''Reads the next node of the file. This returns an error code.=== seek ===*  [[@GlobalScope GD#Error|Error]] '''seek''' '''(''' int position ''')'''Moves the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.=== skip_section ===*  void '''skip_section ( )'''Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.