__NOTOC__'''Inherits:''' [[WebSocketMultiplayerPeer GD|WebSocketMultiplayerPeer]] '''<''' [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]] '''<''' [[PacketPeer GD|PacketPeer]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]A WebSocket server implementation.== Description ==This class implements a WebSocket server that can also support the high-level multiplayer API.After starting the server ([[#listen|listen]]), you will need to [[NetworkedMultiplayerPeer GD#poll|NetworkedMultiplayerPeer.poll()]] it at regular intervals (e.g. inside [[Node GD#_process|_process]]). When clients connect, disconnect, or send data, you will receive the appropriate signal.'''Note:''' Not available in HTML5 exports.== Properties =={| class="wikitable | [[String GD|String]]|| [[#bind_ip|bind_ip]]|| {{Span|"*"}} |-| [[X509Certificate GD|X509Certificate]]|| [[#ca_chain|ca_chain]]||         |-| [[CryptoKey GD|CryptoKey]]|| [[#private_key|private_key]]||         |-| [[X509Certificate GD|X509Certificate]]|| [[#ssl_certificate|ssl_certificate]]||         |}== Methods =={| class="wikitable | void|| [[#disconnect_peer|disconnect_peer]] '''(''' int id, int code=1000, [[String GD|String]] reason="" ''')'''                                     |-| [[String GD|String]]|| [[#get_peer_address|get_peer_address]] '''(''' int id ''')''' const                                                                                                     |-| int|| [[#get_peer_port|get_peer_port]] '''(''' int id ''')''' const                                                                                                           |-| bool|| [[#has_peer|has_peer]] '''(''' int id ''')''' const                                                                                                                     |-| bool|| [[#is_listening|is_listening]] '''(''' ''')''' const                                                                                                                                      |-| [[@GlobalScope GD#Error|Error]]|| [[#listen|listen]] '''(''' int port, [[PackedStringArray GD|PackedStringArray]] protocols=PackedStringArray(  ), bool gd_mp_api=false ''')''' |-| void|| [[#stop|stop]] '''(''' ''')'''                                                                                                                                                            |}== Signals ===== client_close_request ===*  '''client_close_request''' '''(''' int id, int code, [[String GD|String]] reason ''')'''Emitted when a client requests a clean close. You should keep polling until you get a [[#client_disconnected|client_disconnected]] signal with the same {{Span|id}} to achieve the clean close. See [[WebSocketPeer GD#close|WebSocketPeer.close()]] for more details.=== client_connected ===*  '''client_connected''' '''(''' int id, [[String GD|String]] protocol ''')'''Emitted when a new client connects. "protocol" will be the sub-protocol agreed with the client.=== client_disconnected ===*  '''client_disconnected''' '''(''' int id, bool was_clean_close ''')'''Emitted when a client disconnects. {{Span|was_clean_close}} will be {{Span|true}} if the connection was shutdown cleanly.=== data_received ===*  '''data_received''' '''(''' int id ''')'''Emitted when a new message is received.'''Note:''' This signal is ''not'' emitted when used as high-level multiplayer peer.== Property Descriptions ===== bind_ip ===*  [[String GD|String]] '''bind_ip'''{| class="wikitable | ''Default''|| {{Span|"*"}}            |-| ''Setter''|| set_bind_ip(value) |-| ''Getter''|| get_bind_ip()      |}When not set to {{Span|*}} will restrict incoming connections to the specified IP address. Setting {{Span|bind_ip}} to {{Span|127.0.0.1}} will cause the server to listen only to the local host.=== ca_chain ===*  [[X509Certificate GD|X509Certificate]] '''ca_chain'''{| class="wikitable | ''Setter''|| set_ca_chain(value) |-| ''Getter''|| get_ca_chain()      |}When using SSL (see [[#private_key|private_key]] and [[#ssl_certificate|ssl_certificate]]), you can set this to a valid [[X509Certificate GD|X509Certificate]] to be provided as additional CA chain information during the SSL handshake.=== private_key ===*  [[CryptoKey GD|CryptoKey]] '''private_key'''{| class="wikitable | ''Setter''|| set_private_key(value) |-| ''Getter''|| get_private_key()      |}When set to a valid [[CryptoKey GD|CryptoKey]] (along with [[#ssl_certificate|ssl_certificate]]) will cause the server to require SSL instead of regular TCP (i.e. the {{Span|wss://}} protocol).=== ssl_certificate ===*  [[X509Certificate GD|X509Certificate]] '''ssl_certificate'''{| class="wikitable | ''Setter''|| set_ssl_certificate(value) |-| ''Getter''|| get_ssl_certificate()      |}When set to a valid [[X509Certificate GD|X509Certificate]] (along with [[#private_key|private_key]]) will cause the server to require SSL instead of regular TCP (i.e. the {{Span|wss://}} protocol).== Method Descriptions ===== disconnect_peer ===*  void '''disconnect_peer''' '''(''' int id, int code=1000, [[String GD|String]] reason="" ''')'''Disconnects the peer identified by {{Span|id}} from the server. See [[WebSocketPeer GD#close|WebSocketPeer.close()]] for more information.=== get_peer_address ===*  [[String GD|String]] '''get_peer_address''' '''(''' int id ''')''' constReturns the IP address of the given peer.=== get_peer_port ===*  int '''get_peer_port''' '''(''' int id ''')''' constReturns the remote port of the given peer.=== has_peer ===*  bool '''has_peer''' '''(''' int id ''')''' constReturns {{Span|true}} if a peer with the given ID is connected.=== is_listening ===*  bool '''is_listening ( )''' constReturns {{Span|true}} if the server is actively listening on a port.=== listen ===*  [[@GlobalScope GD#Error|Error]] '''listen''' '''(''' int port, [[PackedStringArray GD|PackedStringArray]] protocols=PackedStringArray(  ), bool gd_mp_api=false ''')'''Starts listening on the given port.You can specify the desired subprotocols via the "protocols" array. If the list empty (default), no sub-protocol will be requested.If {{Span|true}} is passed as {{Span|gd_mp_api}}, the server will behave like a network peer for the [[MultiplayerAPI GD|MultiplayerAPI]], connections from non-Godot clients will not work, and [[#data_received|data_received]] will not be emitted.If {{Span|false}} is passed instead (default), you must call [[PacketPeer GD|PacketPeer]] functions ({{Span|put_packet}}, {{Span|get_packet}}, etc.), on the [[WebSocketPeer GD|WebSocketPeer]] returned via {{Span|get_peer(id)}} to communicate with the peer with given {{Span|id}} (e.g. {{Span|get_peer(id).get_available_packet_count}}).=== stop ===*  void '''stop ( )'''Stops the server and clear its state.