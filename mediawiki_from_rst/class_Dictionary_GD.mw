__NOTOC__Dictionary type.== Description ==Dictionary type. Associative container which contains values referenced by unique keys. Dictionary are composed of pairs of keys (which must be unique) and values. You can define a dictionary by placing a comma separated list of {{Span|key: value}} pairs in curly braces {{Span|{}}}.Erasing elements while iterating over them '''is not supported'''.Creating a dictionary:::    var my_dir = {} # Creates an empty dictionary.    var points_dir = {"White": 50, "Yellow": 75, "Orange": 100}    var my_dir = {        key1: value1,        key2: value2,        key3: value3,    }You can access values of a dictionary by referencing appropriate key in above example {{Span|points_dir["White"]}} would return value of 50.::    export(String, "White", "Yellow", "Orange") var my_color    var points_dir = {"White": 50, "Yellow": 75, "Orange": 100}        func _ready():        var points = points_dir[my_color]In the above code {{Span|points}} will be assigned the value that is paired with the appropriate color selected in {{Span|my_color}}.Dictionaries can contain more complex data:::    my_dir = {"First Array": [1, 2, 3, 4]} # Assigns an Array to a String key.To add a key to an existing dictionary, access it like an existing key and assign to it:::    var points_dir = {"White": 50, "Yellow": 75, "Orange": 100}    var points_dir["Blue"] = 150 # Add "Blue" as a key and assign 150 as its value.Finally, dictionaries can contain different types of keys and values in the same dictionary:::    var my_dir = {"String Key": 5, 4: [1, 2, 3], 7: "Hello"} # This is a valid dictionary.'''Note:''' Unlike [[Array GD|Array]]\ s you can't compare dictionaries directly:::    array1 = [1, 2, 3]    array2 = [1, 2, 3]        func compare_arrays():        print(array1 == array2) # Will print true.        dir1 = {"a": 1, "b": 2, "c": 3}    dir2 = {"a": 1, "b": 2, "c": 3}        func compare_dictionaries():        print(dir1 == dir2) # Will NOT print true.You need to first calculate the dictionary's hash with [[#hash|hash]] before you can compare them:::    dir1 = {"a": 1, "b": 2, "c": 3}    dir2 = {"a": 1, "b": 2, "c": 3}        func compare_dictionaries():        print(dir1.hash() == dir2.hash()) # Will print true.== Tutorials ==*  `#dictionary <../getting_started/scripting/gdscript/gdscript_basics.html#dictionary>`_ in :doc:`../getting_started/scripting/gdscript/gdscript_basics`== Methods =={| class="wikitable | void|| [[#clear|clear]] '''(''' ''')'''                                                                           |-| [[Dictionary GD|Dictionary]]|| [[#duplicate|duplicate]] '''(''' bool deep=false ''')'''                                |-| bool|| [[#empty|empty]] '''(''' ''')'''                                                                           |-| bool|| [[#erase|erase]] '''(''' [[Variant GD|Variant]] key ''')'''                                         |-| [[Variant GD|Variant]]|| [[#get|get]] '''(''' [[Variant GD|Variant]] key, [[Variant GD|Variant]] default=null ''')''' |-| bool|| [[#has|has]] '''(''' [[Variant GD|Variant]] key ''')'''                                             |-| bool|| [[#has_all|has_all]] '''(''' [[Array GD|Array]] keys ''')'''                                        |-| int|| [[#hash|hash]] '''(''' ''')'''                                                                             |-| [[Array GD|Array]]|| [[#keys|keys]] '''(''' ''')'''                                                                             |-| int|| [[#size|size]] '''(''' ''')'''                                                                             |-| [[Array GD|Array]]|| [[#values|values]] '''(''' ''')'''                                                                         |}== Method Descriptions ===== clear ===*  void '''clear ( )'''Clear the dictionary, removing all key/value pairs.=== duplicate ===*  [[Dictionary GD|Dictionary]] '''duplicate''' '''(''' bool deep=false ''')'''Creates a copy of the dictionary, and returns it.=== empty ===*  bool '''empty ( )'''Returns {{Span|true}} if the dictionary is empty.=== erase ===*  bool '''erase''' '''(''' [[Variant GD|Variant]] key ''')'''Erase a dictionary key/value pair by key. Returns {{Span|true}} if the given key was present in the dictionary, {{Span|false}} otherwise. Does not erase elements while iterating over the dictionary.=== get ===*  [[Variant GD|Variant]] '''get''' '''(''' [[Variant GD|Variant]] key, [[Variant GD|Variant]] default=null ''')'''Returns the current value for the specified key in the {{Span|Dictionary}}. If the key does not exist, the method returns the value of the optional default argument, or {{Span|null}} if it is omitted.=== has ===*  bool '''has''' '''(''' [[Variant GD|Variant]] key ''')'''Returns {{Span|true}} if the dictionary has a given key.=== has_all ===*  bool '''has_all''' '''(''' [[Array GD|Array]] keys ''')'''Returns {{Span|true}} if the dictionary has all of the keys in the given array.=== hash ===*  int '''hash ( )'''Returns a hashed integer value representing the dictionary contents. This can be used to compare dictionaries by value:::    var dict1 = {0: 10}    var dict2 = {0: 10}    # The line below prints `true`, whereas it would have printed `false` if both variables were compared directly.    print(dict1.hash() == dict2.hash())=== keys ===*  [[Array GD|Array]] '''keys ( )'''Returns the list of keys in the {{Span|Dictionary}}.=== size ===*  int '''size ( )'''Returns the size of the dictionary (in pairs).=== values ===*  [[Array GD|Array]] '''values ( )'''Returns the list of values in the {{Span|Dictionary}}.