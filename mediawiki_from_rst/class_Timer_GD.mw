__NOTOC__'''Inherits:''' [[Node GD|Node]] '''<''' [[Object GD|Object]]A countdown timer.== Description ==Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one-shot" mode.== Properties =={| class="wikitable | bool|| [[#autostart|autostart]]|| {{Span|false}} |-| bool|| [[#one_shot|one_shot]]|| {{Span|false}} |-| bool|| [[#paused|paused]]||           |-| [[#TimerProcessMode|TimerProcessMode]]|| [[#process_mode|process_mode]]|| {{Span|1}}     |-| float|| [[#time_left|time_left]]||           |-| float|| [[#wait_time|wait_time]]|| {{Span|1.0}}   |}== Methods =={| class="wikitable | bool|| [[#is_stopped|is_stopped]] '''(''' ''')''' const                       |-| void|| [[#start|start]] '''(''' float time_sec=-1 ''')''' |-| void|| [[#stop|stop]] '''(''' ''')'''                                         |}== Signals ===== timeout ===*  '''timeout ( )'''Emitted when the timer reaches 0.== Enumerations ===== TimerProcessMode ====== TIMER_PROCESS_PHYSICS ====== TIMER_PROCESS_IDLE ===enum '''TimerProcessMode''':*  '''TIMER_PROCESS_PHYSICS''' = '''0'''  Update the timer during the physics step at each frame (fixed framerate processing).*  '''TIMER_PROCESS_IDLE''' = '''1'''  Update the timer during the idle time at each frame.== Property Descriptions ===== autostart ===*  bool '''autostart'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| set_autostart(value) |-| ''Getter''|| has_autostart()      |}If {{Span|true}}, the timer will automatically start when entering the scene tree.'''Note:''' This property is automatically set to {{Span|false}} after the timer enters the scene tree and starts.=== one_shot ===*  bool '''one_shot'''{| class="wikitable | ''Default''|| {{Span|false}}           |-| ''Setter''|| set_one_shot(value) |-| ''Getter''|| is_one_shot()       |}If {{Span|true}}, the timer will stop when reaching 0. If {{Span|false}}, it will restart.=== paused ===*  bool '''paused'''{| class="wikitable | ''Setter''|| set_paused(value) |-| ''Getter''|| is_paused()       |}If {{Span|true}}, the timer is paused and will not process until it is unpaused again, even if [[#start|start]] is called.=== process_mode ===*  [[#TimerProcessMode|TimerProcessMode]] '''process_mode'''{| class="wikitable | ''Default''|| {{Span|1}}                         |-| ''Setter''|| set_timer_process_mode(value) |-| ''Getter''|| get_timer_process_mode()      |}Processing mode. See [[#TimerProcessMode|TimerProcessMode]].=== time_left ===*  float '''time_left'''{| class="wikitable | ''Getter''|| get_time_left() |}The timer's remaining time in seconds. Returns 0 if the timer is inactive.'''Note:''' You cannot set this value. To change the timer's remaining time, use [[#start|start]].=== wait_time ===*  float '''wait_time'''{| class="wikitable | ''Default''|| {{Span|1.0}}              |-| ''Setter''|| set_wait_time(value) |-| ''Getter''|| get_wait_time()      |}Wait time in seconds.== Method Descriptions ===== is_stopped ===*  bool '''is_stopped ( )''' constReturns {{Span|true}} if the timer is stopped.=== start ===*  void '''start''' '''(''' float time_sec=-1 ''')'''Starts the timer. Sets {{Span|wait_time}} to {{Span|time_sec}} if {{Span|time_sec > 0}}. This also resets the remaining time to {{Span|wait_time}}.'''Note:''' this method will not resume a paused timer. See [[#paused|paused]].=== stop ===*  void '''stop ( )'''Stops the timer.