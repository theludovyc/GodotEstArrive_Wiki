__NOTOC__'''Inherits:''' [[MainLoop GD|MainLoop]] '''<''' [[Object GD|Object]]Manages the game loop via a hierarchy of nodes.== Description ==As one of the most important classes, the {{Span|SceneTree}} manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.You can also use the {{Span|SceneTree}} to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.{{Span|SceneTree}} is the default [[MainLoop GD|MainLoop]] implementation used by scenes, and is thus in charge of the game loop.== Tutorials ==*  :doc:`../getting_started/step_by_step/scene_tree`*  :doc:`../tutorials/viewports/multiple_resolutions`== Properties =={| class="wikitable | [[Node GD|Node]]|| [[#current_scene|current_scene]]||           |-| bool|| [[#debug_collisions_hint|debug_collisions_hint]]|| {{Span|false}} |-| bool|| [[#debug_navigation_hint|debug_navigation_hint]]|| {{Span|false}} |-| [[Node GD|Node]]|| [[#edited_scene_root|edited_scene_root]]||           |-| [[MultiplayerAPI GD|MultiplayerAPI]]|| [[#multiplayer|multiplayer]]||           |-| bool|| [[#multiplayer_poll|multiplayer_poll]]|| {{Span|true}}  |-| [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]]|| [[#network_peer|network_peer]]||           |-| bool|| [[#paused|paused]]|| {{Span|false}} |-| bool|| [[#refuse_new_network_connections|refuse_new_network_connections]]|| {{Span|false}} |-| [[Viewport GD|Viewport]]|| [[#root|root]]||           |-| bool|| [[#use_font_oversampling|use_font_oversampling]]|| {{Span|false}} |}== Methods =={| class="wikitable | [[Variant GD|Variant]]|| [[#call_group|call_group]] '''(''' [[StringName GD|StringName]] group, [[StringName GD|StringName]] method, ... ''')''' vararg                                                                                                         |-| [[Variant GD|Variant]]|| [[#call_group_flags|call_group_flags]] '''(''' int flags, [[StringName GD|StringName]] group, [[StringName GD|StringName]] method, ... ''')''' vararg                                                                |-| [[@GlobalScope GD#Error|Error]]|| [[#change_scene|change_scene]] '''(''' [[String GD|String]] path ''')'''                                                                                                                                                                      |-| [[@GlobalScope GD#Error|Error]]|| [[#change_scene_to|change_scene_to]] '''(''' [[PackedScene GD|PackedScene]] packed_scene ''')'''                                                                                                                                              |-| [[SceneTreeTimer GD|SceneTreeTimer]]|| [[#create_timer|create_timer]] '''(''' float time_sec, bool pause_mode_process=true ''')'''                                                                                                                   |-| int|| [[#get_frame|get_frame]] '''(''' ''')''' const                                                                                                                                                                                                       |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#get_network_connected_peers|get_network_connected_peers]] '''(''' ''')''' const                                                                                                                                                                   |-| int|| [[#get_network_unique_id|get_network_unique_id]] '''(''' ''')''' const                                                                                                                                                                               |-| int|| [[#get_node_count|get_node_count]] '''(''' ''')''' const                                                                                                                                                                                             |-| [[Array GD|Array]]|| [[#get_nodes_in_group|get_nodes_in_group]] '''(''' [[StringName GD|StringName]] group ''')'''                                                                                                                                                 |-| int|| [[#get_rpc_sender_id|get_rpc_sender_id]] '''(''' ''')''' const                                                                                                                                                                                       |-| bool|| [[#has_group|has_group]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                                              |-| bool|| [[#has_network_peer|has_network_peer]] '''(''' ''')''' const                                                                                                                                                                                         |-| bool|| [[#is_input_handled|is_input_handled]] '''(''' ''')'''                                                                                                                                                                                               |-| bool|| [[#is_network_server|is_network_server]] '''(''' ''')''' const                                                                                                                                                                                       |-| void|| [[#notify_group|notify_group]] '''(''' [[StringName GD|StringName]] group, int notification ''')'''                                                                                                                         |-| void|| [[#notify_group_flags|notify_group_flags]] '''(''' int call_flags, [[StringName GD|StringName]] group, int notification ''')'''                                                                           |-| void|| [[#queue_delete|queue_delete]] '''(''' [[Object GD|Object]] obj ''')'''                                                                                                                                                                       |-| void|| [[#quit|quit]] '''(''' int exit_code=-1 ''')'''                                                                                                                                                                                    |-| [[@GlobalScope GD#Error|Error]]|| [[#reload_current_scene|reload_current_scene]] '''(''' ''')'''                                                                                                                                                                                       |-| void|| [[#set_auto_accept_quit|set_auto_accept_quit]] '''(''' bool enabled ''')'''                                                                                                                                                       |-| void|| [[#set_group|set_group]] '''(''' [[StringName GD|StringName]] group, [[String GD|String]] property, [[Variant GD|Variant]] value ''')'''                                                                                        |-| void|| [[#set_group_flags|set_group_flags]] '''(''' int call_flags, [[StringName GD|StringName]] group, [[String GD|String]] property, [[Variant GD|Variant]] value ''')'''                                          |-| void|| [[#set_input_as_handled|set_input_as_handled]] '''(''' ''')'''                                                                                                                                                                                       |-| void|| [[#set_quit_on_go_back|set_quit_on_go_back]] '''(''' bool enabled ''')'''                                                                                                                                                         |-| void|| [[#set_screen_stretch|set_screen_stretch]] '''(''' [[#StretchMode|StretchMode]] mode, [[#StretchAspect|StretchAspect]] aspect, [[Vector2 GD|Vector2]] minsize, float shrink=1 ''')''' |}== Signals ===== connected_to_server ===*  '''connected_to_server ( )'''Emitted whenever this {{Span|SceneTree}}'s [[#network_peer|network_peer]] successfully connected to a server. Only emitted on clients.=== connection_failed ===*  '''connection_failed ( )'''Emitted whenever this {{Span|SceneTree}}'s [[#network_peer|network_peer]] fails to establish a connection to a server. Only emitted on clients.=== files_dropped ===*  '''files_dropped''' '''(''' [[PackedStringArray GD|PackedStringArray]] files, int screen ''')'''Emitted when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated.=== global_menu_action ===*  '''global_menu_action''' '''(''' [[Variant GD|Variant]] id, [[Variant GD|Variant]] meta ''')'''Emitted whenever global menu item is clicked.=== idle_frame ===*  '''idle_frame ( )'''Emitted immediately before [[Node GD#_process|_process]] is called on every node in the {{Span|SceneTree}}.=== network_peer_connected ===*  '''network_peer_connected''' '''(''' int id ''')'''Emitted whenever this {{Span|SceneTree}}'s [[#network_peer|network_peer]] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1).=== network_peer_disconnected ===*  '''network_peer_disconnected''' '''(''' int id ''')'''Emitted whenever this {{Span|SceneTree}}'s [[#network_peer|network_peer]] disconnects from a peer. Clients get notified when other clients disconnect from the same server.=== node_added ===*  '''node_added''' '''(''' [[Node GD|Node]] node ''')'''Emitted whenever a node is added to the {{Span|SceneTree}}.=== node_configuration_warning_changed ===*  '''node_configuration_warning_changed''' '''(''' [[Node GD|Node]] node ''')'''Emitted when a node's configuration changed. Only emitted in {{Span|tool}} mode.=== node_removed ===*  '''node_removed''' '''(''' [[Node GD|Node]] node ''')'''Emitted whenever a node is removed from the {{Span|SceneTree}}.=== node_renamed ===*  '''node_renamed''' '''(''' [[Node GD|Node]] node ''')'''Emitted whenever a node is renamed.=== physics_frame ===*  '''physics_frame ( )'''Emitted immediately before [[Node GD#_physics_process|_physics_process]] is called on every node in the {{Span|SceneTree}}.=== screen_resized ===*  '''screen_resized ( )'''Emitted when the screen resolution (fullscreen) or window size (windowed) changes.=== server_disconnected ===*  '''server_disconnected ( )'''Emitted whenever this {{Span|SceneTree}}'s [[#network_peer|network_peer]] disconnected from server. Only emitted on clients.=== tree_changed ===*  '''tree_changed ( )'''Emitted whenever the {{Span|SceneTree}} hierarchy changed (children being moved or renamed, etc.).== Enumerations ===== GroupCallFlags ====== GROUP_CALL_DEFAULT ====== GROUP_CALL_REVERSE ====== GROUP_CALL_REALTIME ====== GROUP_CALL_UNIQUE ===enum '''GroupCallFlags''':*  '''GROUP_CALL_DEFAULT''' = '''0'''  Call a group with no flags (default).*  '''GROUP_CALL_REVERSE''' = '''1'''  Call a group in reverse scene order.*  '''GROUP_CALL_REALTIME''' = '''2'''  Call a group immediately (calls are normally made on idle).*  '''GROUP_CALL_UNIQUE''' = '''4'''  Call a group only once even if the call is executed many times.=== StretchMode ====== STRETCH_MODE_DISABLED ====== STRETCH_MODE_2D ====== STRETCH_MODE_VIEWPORT ===enum '''StretchMode''':*  '''STRETCH_MODE_DISABLED''' = '''0'''  No stretching.*  '''STRETCH_MODE_2D''' = '''1'''  Render stretching in higher resolution (interpolated).*  '''STRETCH_MODE_VIEWPORT''' = '''2'''  Keep the specified display resolution. No interpolation. Content may appear pixelated.=== StretchAspect ====== STRETCH_ASPECT_IGNORE ====== STRETCH_ASPECT_KEEP ====== STRETCH_ASPECT_KEEP_WIDTH ====== STRETCH_ASPECT_KEEP_HEIGHT ====== STRETCH_ASPECT_EXPAND ===enum '''StretchAspect''':*  '''STRETCH_ASPECT_IGNORE''' = '''0'''  Fill the window with the content stretched to cover excessive space. Content may appear stretched.*  '''STRETCH_ASPECT_KEEP''' = '''1'''  Retain the same aspect ratio by padding with black bars on either axis. This prevents distortion.*  '''STRETCH_ASPECT_KEEP_WIDTH''' = '''2'''  Expand vertically. Left/right black bars may appear if the window is too wide.*  '''STRETCH_ASPECT_KEEP_HEIGHT''' = '''3'''  Expand horizontally. Top/bottom black bars may appear if the window is too tall.*  '''STRETCH_ASPECT_EXPAND''' = '''4'''  Expand in both directions, retaining the same aspect ratio. This prevents distortion while avoiding black bars.== Property Descriptions ===== current_scene ===*  [[Node GD|Node]] '''current_scene'''{| class="wikitable | ''Setter''|| set_current_scene(value) |-| ''Getter''|| get_current_scene()      |}The current scene.=== debug_collisions_hint ===*  bool '''debug_collisions_hint'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_debug_collisions_hint(value) |-| ''Getter''|| is_debugging_collisions_hint()   |}If {{Span|true}}, collision shapes will be visible when running the game from the editor for debugging purposes.=== debug_navigation_hint ===*  bool '''debug_navigation_hint'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_debug_navigation_hint(value) |-| ''Getter''|| is_debugging_navigation_hint()   |}If {{Span|true}}, navigation polygons will be visible when running the game from the editor for debugging purposes.=== edited_scene_root ===*  [[Node GD|Node]] '''edited_scene_root'''{| class="wikitable | ''Setter''|| set_edited_scene_root(value) |-| ''Getter''|| get_edited_scene_root()      |}The root of the edited scene.=== multiplayer ===*  [[MultiplayerAPI GD|MultiplayerAPI]] '''multiplayer'''{| class="wikitable | ''Setter''|| set_multiplayer(value) |-| ''Getter''|| get_multiplayer()      |}The default [[MultiplayerAPI GD|MultiplayerAPI]] instance for this {{Span|SceneTree}}.=== multiplayer_poll ===*  bool '''multiplayer_poll'''{| class="wikitable | ''Default''|| {{Span|true}}                            |-| ''Setter''|| set_multiplayer_poll_enabled(value) |-| ''Getter''|| is_multiplayer_poll_enabled()       |}If {{Span|true}} (default value), enables automatic polling of the [[MultiplayerAPI GD|MultiplayerAPI]] for this SceneTree during [[#idle_frame|idle_frame]].If {{Span|false}}, you need to manually call [[MultiplayerAPI GD#poll|MultiplayerAPI.poll()]] to process network packets and deliver RPCs/RSETs. This allows running RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual [[Mutex GD|Mutex]] protection when accessing the [[MultiplayerAPI GD|MultiplayerAPI]] from threads.=== network_peer ===*  [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]] '''network_peer'''{| class="wikitable | ''Setter''|| set_network_peer(value) |-| ''Getter''|| get_network_peer()      |}The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the {{Span|SceneTree}} will become a network server (check with [[#is_network_server|is_network_server]]) and will set the root node's network mode to master, or it will become a regular peer with the root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to {{Span|SceneTree}}'s signals.=== paused ===*  bool '''paused'''{| class="wikitable | ''Default''|| {{Span|false}}        |-| ''Setter''|| set_pause(value) |-| ''Getter''|| is_paused()      |}If {{Span|true}}, the {{Span|SceneTree}} is paused. Doing so will have the following behavior:*  2D and 3D physics will be stopped.*  [[Node GD#_process|_process]], [[Node GD#_physics_process|_physics_process]] and [[Node GD#_input|_input]] will not be called anymore in nodes.=== refuse_new_network_connections ===*  bool '''refuse_new_network_connections'''{| class="wikitable | ''Default''|| {{Span|false}}                                 |-| ''Setter''|| set_refuse_new_network_connections(value) |-| ''Getter''|| is_refusing_new_network_connections()     |}If {{Span|true}}, the {{Span|SceneTree}}'s [[#network_peer|network_peer]] refuses new incoming connections.=== root ===*  [[Viewport GD|Viewport]] '''root'''{| class="wikitable | ''Getter''|| get_root() |}The {{Span|SceneTree}}'s root [[Viewport GD|Viewport]].=== use_font_oversampling ===*  bool '''use_font_oversampling'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_use_font_oversampling(value) |-| ''Getter''|| is_using_font_oversampling()     |}If {{Span|true}}, font oversampling is used.== Method Descriptions ===== call_group ===*  [[Variant GD|Variant]] '''call_group''' '''(''' [[StringName GD|StringName]] group, [[StringName GD|StringName]] method, ... ''')''' varargCalls {{Span|method}} on each member of the given group.=== call_group_flags ===*  [[Variant GD|Variant]] '''call_group_flags''' '''(''' int flags, [[StringName GD|StringName]] group, [[StringName GD|StringName]] method, ... ''')''' varargCalls {{Span|method}} on each member of the given group, respecting the given [[#GroupCallFlags|GroupCallFlags]].=== change_scene ===*  [[@GlobalScope GD#Error|Error]] '''change_scene''' '''(''' [[String GD|String]] path ''')'''Changes the running scene to the one at the given {{Span|path}}, after loading it into a [[PackedScene GD|PackedScene]] and creating a new instance.Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] on success, [[@GlobalScope GD#ERR_CANT_OPEN|@GlobalScope.ERR_CANT_OPEN()]] if the {{Span|path}} cannot be loaded into a [[PackedScene GD|PackedScene]], or [[@GlobalScope GD#ERR_CANT_CREATE|@GlobalScope.ERR_CANT_CREATE()]] if that scene cannot be instantiated.=== change_scene_to ===*  [[@GlobalScope GD#Error|Error]] '''change_scene_to''' '''(''' [[PackedScene GD|PackedScene]] packed_scene ''')'''Changes the running scene to a new instance of the given [[PackedScene GD|PackedScene]].Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] on success or [[@GlobalScope GD#ERR_CANT_CREATE|@GlobalScope.ERR_CANT_CREATE()]] if the scene cannot be instantiated.=== create_timer ===*  [[SceneTreeTimer GD|SceneTreeTimer]] '''create_timer''' '''(''' float time_sec, bool pause_mode_process=true ''')'''Returns a [[SceneTreeTimer GD|SceneTreeTimer]] which will [[SceneTreeTimer GD#timeout|SceneTreeTimer.timeout()]] after the given time in seconds elapsed in this {{Span|SceneTree}}. If {{Span|pause_mode_process}} is set to {{Span|false}}, pausing the {{Span|SceneTree}} will also pause the timer.Commonly used to create a one-shot delay timer as in the following example:::    func some_function():        print("start")        yield(get_tree().create_timer(1.0), "timeout")        print("end")=== get_frame ===*  int '''get_frame ( )''' constReturns the current frame number, i.e. the total frame count since the application started.=== get_network_connected_peers ===*  [[PackedInt32Array GD|PackedInt32Array]] '''get_network_connected_peers ( )''' constReturns the peer IDs of all connected peers of this {{Span|SceneTree}}'s [[#network_peer|network_peer]].=== get_network_unique_id ===*  int '''get_network_unique_id ( )''' constReturns the unique peer ID of this {{Span|SceneTree}}'s [[#network_peer|network_peer]].=== get_node_count ===*  int '''get_node_count ( )''' constReturns the number of nodes in this {{Span|SceneTree}}.=== get_nodes_in_group ===*  [[Array GD|Array]] '''get_nodes_in_group''' '''(''' [[StringName GD|StringName]] group ''')'''Returns a list of all nodes assigned to the given group.=== get_rpc_sender_id ===*  int '''get_rpc_sender_id ( )''' constReturns the sender's peer ID for the most recently received RPC call.=== has_group ===*  bool '''has_group''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if the given group exists.=== has_network_peer ===*  bool '''has_network_peer ( )''' constReturns {{Span|true}} if there is a [[#network_peer|network_peer]] set.=== is_input_handled ===*  bool '''is_input_handled ( )'''Returns {{Span|true}} if the most recent [[InputEvent GD|InputEvent]] was marked as handled with [[#set_input_as_handled|set_input_as_handled]].=== is_network_server ===*  bool '''is_network_server ( )''' constReturns {{Span|true}} if this {{Span|SceneTree}}'s [[#network_peer|network_peer]] is in server mode (listening for connections).=== notify_group ===*  void '''notify_group''' '''(''' [[StringName GD|StringName]] group, int notification ''')'''Sends the given notification to all members of the {{Span|group}}.=== notify_group_flags ===*  void '''notify_group_flags''' '''(''' int call_flags, [[StringName GD|StringName]] group, int notification ''')'''Sends the given notification to all members of the {{Span|group}}, respecting the given [[#GroupCallFlags|GroupCallFlags]].=== queue_delete ===*  void '''queue_delete''' '''(''' [[Object GD|Object]] obj ''')'''Queues the given object for deletion, delaying the call to [[Object GD#free|Object.free()]] to after the current frame.=== quit ===*  void '''quit''' '''(''' int exit_code=-1 ''')'''Quits the application. A process {{Span|exit_code}} can optionally be passed as an argument. If this argument is {{Span|0}} or greater, it will override the [[OS GD#exit_code|OS.exit_code()]] defined before quitting the application.=== reload_current_scene ===*  [[@GlobalScope GD#Error|Error]] '''reload_current_scene ( )'''Reloads the currently active scene.Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] on success, [[@GlobalScope GD#ERR_UNCONFIGURED|@GlobalScope.ERR_UNCONFIGURED()]] if no [[#current_scene|current_scene]] was defined yet, [[@GlobalScope GD#ERR_CANT_OPEN|@GlobalScope.ERR_CANT_OPEN()]] if [[#current_scene|current_scene]] cannot be loaded into a [[PackedScene GD|PackedScene]], or [[@GlobalScope GD#ERR_CANT_CREATE|@GlobalScope.ERR_CANT_CREATE()]] if the scene cannot be instantiated.=== set_auto_accept_quit ===*  void '''set_auto_accept_quit''' '''(''' bool enabled ''')'''If {{Span|true}}, the application automatically accepts quitting. Enabled by default.For mobile platforms, see [[#set_quit_on_go_back|set_quit_on_go_back]].=== set_group ===*  void '''set_group''' '''(''' [[StringName GD|StringName]] group, [[String GD|String]] property, [[Variant GD|Variant]] value ''')'''Sets the given {{Span|property}} to {{Span|value}} on all members of the given group.=== set_group_flags ===*  void '''set_group_flags''' '''(''' int call_flags, [[StringName GD|StringName]] group, [[String GD|String]] property, [[Variant GD|Variant]] value ''')'''Sets the given {{Span|property}} to {{Span|value}} on all members of the given group, respecting the given [[#GroupCallFlags|GroupCallFlags]].=== set_input_as_handled ===*  void '''set_input_as_handled ( )'''Marks the most recent [[InputEvent GD|InputEvent]] as handled.=== set_quit_on_go_back ===*  void '''set_quit_on_go_back''' '''(''' bool enabled ''')'''If {{Span|true}}, the application quits automatically on going back (e.g. on Android). Enabled by default.To handle 'Go Back' button when this option is disabled, use [[MainLoop GD#NOTIFICATION_WM_GO_BACK_REQUEST|MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST()]].=== set_screen_stretch ===*  void '''set_screen_stretch''' '''(''' [[#StretchMode|StretchMode]] mode, [[#StretchAspect|StretchAspect]] aspect, [[Vector2 GD|Vector2]] minsize, float shrink=1 ''')'''Configures screen stretching to the given [[#StretchMode|StretchMode]], [[#StretchAspect|StretchAspect]], minimum size and {{Span|shrink}} ratio.