__NOTOC__'''Inherits:''' [[Control GD|Control]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Multiline text editing control.== Description ==TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.== Properties =={| class="wikitable | bool|| [[#breakpoint_gutter|breakpoint_gutter]]|| {{Span|false}}    |-| bool|| [[#caret_blink|caret_blink]]|| {{Span|false}}    |-| float|| [[#caret_blink_speed|caret_blink_speed]]|| {{Span|0.65}}     |-| bool|| [[#caret_block_mode|caret_block_mode]]|| {{Span|false}}    |-| bool|| [[#caret_moving_by_right_click|caret_moving_by_right_click]]|| {{Span|true}}     |-| bool|| [[#context_menu_enabled|context_menu_enabled]]|| {{Span|true}}     |-| bool|| [[#draw_spaces|draw_spaces]]|| {{Span|false}}    |-| bool|| [[#draw_tabs|draw_tabs]]|| {{Span|false}}    |-| [[#FocusMode|FocusMode]]|| focus_mode|| {{Span|2}} (parent override) |-| bool|| [[#fold_gutter|fold_gutter]]|| {{Span|false}}    |-| bool|| [[#hiding_enabled|hiding_enabled]]|| {{Span|false}}    |-| bool|| [[#highlight_all_occurrences|highlight_all_occurrences]]|| {{Span|false}}    |-| bool|| [[#highlight_current_line|highlight_current_line]]|| {{Span|false}}    |-| bool|| [[#minimap_draw|minimap_draw]]|| {{Span|false}}    |-| int|| [[#minimap_width|minimap_width]]|| {{Span|80}}       |-| [[#CursorShape|CursorShape]]|| mouse_default_cursor_shape|| {{Span|1}} (parent override) |-| bool|| [[#override_selected_font_color|override_selected_font_color]]|| {{Span|false}}    |-| bool|| [[#readonly|readonly]]|| {{Span|false}}    |-| int|| [[#scroll_horizontal|scroll_horizontal]]|| {{Span|0}}        |-| float|| [[#scroll_vertical|scroll_vertical]]|| {{Span|0.0}}      |-| bool|| [[#selecting_enabled|selecting_enabled]]|| {{Span|true}}     |-| bool|| [[#shortcut_keys_enabled|shortcut_keys_enabled]]|| {{Span|true}}     |-| bool|| [[#show_line_numbers|show_line_numbers]]|| {{Span|false}}    |-| bool|| [[#smooth_scrolling|smooth_scrolling]]|| {{Span|false}}    |-| bool|| [[#syntax_highlighting|syntax_highlighting]]|| {{Span|false}}    |-| [[String GD|String]]|| [[#text|text]]|| {{Span|""}}       |-| float|| [[#v_scroll_speed|v_scroll_speed]]|| {{Span|80.0}}     |-| bool|| [[#wrap_enabled|wrap_enabled]]|| {{Span|false}}    |}== Methods =={| class="wikitable | void|| [[#add_color_region|add_color_region]] '''(''' [[String GD|String]] begin_key, [[String GD|String]] end_key, [[Color GD|Color]] color, bool line_only=false ''')'''   |-| void|| [[#add_keyword_color|add_keyword_color]] '''(''' [[String GD|String]] keyword, [[Color GD|Color]] color ''')'''                                                                                 |-| bool|| [[#can_fold|can_fold]] '''(''' int line ''')''' const                                                                                                                                       |-| void|| [[#center_viewport_to_cursor|center_viewport_to_cursor]] '''(''' ''')'''                                                                                                                                      |-| void|| [[#clear_colors|clear_colors]] '''(''' ''')'''                                                                                                                                                                |-| void|| [[#clear_undo_history|clear_undo_history]] '''(''' ''')'''                                                                                                                                                    |-| void|| [[#copy|copy]] '''(''' ''')'''                                                                                                                                                                                |-| int|| [[#cursor_get_column|cursor_get_column]] '''(''' ''')''' const                                                                                                                                                |-| int|| [[#cursor_get_line|cursor_get_line]] '''(''' ''')''' const                                                                                                                                                    |-| void|| [[#cursor_set_column|cursor_set_column]] '''(''' int column, bool adjust_viewport=true ''')'''                                                                           |-| void|| [[#cursor_set_line|cursor_set_line]] '''(''' int line, bool adjust_viewport=true, bool can_be_hidden=true, int wrap_index=0 ''')''' |-| void|| [[#cut|cut]] '''(''' ''')'''                                                                                                                                                                                  |-| void|| [[#deselect|deselect]] '''(''' ''')'''                                                                                                                                                                        |-| void|| [[#fold_all_lines|fold_all_lines]] '''(''' ''')'''                                                                                                                                                            |-| void|| [[#fold_line|fold_line]] '''(''' int line ''')'''                                                                                                                                           |-| [[Array GD|Array]]|| [[#get_breakpoints|get_breakpoints]] '''(''' ''')''' const                                                                                                                                                    |-| [[Color GD|Color]]|| [[#get_keyword_color|get_keyword_color]] '''(''' [[String GD|String]] keyword ''')''' const                                                                                                            |-| [[String GD|String]]|| [[#get_line|get_line]] '''(''' int line ''')''' const                                                                                                                                       |-| int|| [[#get_line_count|get_line_count]] '''(''' ''')''' const                                                                                                                                                      |-| [[PopupMenu GD|PopupMenu]]|| [[#get_menu|get_menu]] '''(''' ''')''' const                                                                                                                                                                  |-| int|| [[#get_selection_from_column|get_selection_from_column]] '''(''' ''')''' const                                                                                                                                |-| int|| [[#get_selection_from_line|get_selection_from_line]] '''(''' ''')''' const                                                                                                                                    |-| [[String GD|String]]|| [[#get_selection_text|get_selection_text]] '''(''' ''')''' const                                                                                                                                              |-| int|| [[#get_selection_to_column|get_selection_to_column]] '''(''' ''')''' const                                                                                                                                    |-| int|| [[#get_selection_to_line|get_selection_to_line]] '''(''' ''')''' const                                                                                                                                        |-| [[String GD|String]]|| [[#get_word_under_cursor|get_word_under_cursor]] '''(''' ''')''' const                                                                                                                                        |-| bool|| [[#has_keyword_color|has_keyword_color]] '''(''' [[String GD|String]] keyword ''')''' const                                                                                                            |-| void|| [[#insert_text_at_cursor|insert_text_at_cursor]] '''(''' [[String GD|String]] text ''')'''                                                                                                             |-| bool|| [[#is_folded|is_folded]] '''(''' int line ''')''' const                                                                                                                                     |-| bool|| [[#is_line_hidden|is_line_hidden]] '''(''' int line ''')''' const                                                                                                                           |-| bool|| [[#is_selection_active|is_selection_active]] '''(''' ''')''' const                                                                                                                                            |-| void|| [[#menu_option|menu_option]] '''(''' int option ''')'''                                                                                                                                     |-| void|| [[#paste|paste]] '''(''' ''')'''                                                                                                                                                                              |-| void|| [[#redo|redo]] '''(''' ''')'''                                                                                                                                                                                |-| void|| [[#remove_breakpoints|remove_breakpoints]] '''(''' ''')'''                                                                                                                                                    |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#search|search]] '''(''' [[String GD|String]] key, int flags, int from_line, int from_column ''')''' const                                     |-| void|| [[#select|select]] '''(''' int from_line, int from_column, int to_line, int to_column ''')'''                                         |-| void|| [[#select_all|select_all]] '''(''' ''')'''                                                                                                                                                                    |-| void|| [[#set_line_as_hidden|set_line_as_hidden]] '''(''' int line, bool enable ''')'''                                                                                         |-| void|| [[#toggle_fold_line|toggle_fold_line]] '''(''' int line ''')'''                                                                                                                             |-| void|| [[#undo|undo]] '''(''' ''')'''                                                                                                                                                                                |-| void|| [[#unfold_line|unfold_line]] '''(''' int line ''')'''                                                                                                                                       |-| void|| [[#unhide_all_lines|unhide_all_lines]] '''(''' ''')'''                                                                                                                                                        |}== Theme Properties =={| class="wikitable | [[Color GD|Color]]|| background_color|| Color( 0, 0, 0, 0 )             |-| [[Color GD|Color]]|| bookmark_color|| Color( 0.08, 0.49, 0.98, 1 )    |-| [[Color GD|Color]]|| brace_mismatch_color|| Color( 1, 0.2, 0.2, 1 )         |-| [[Color GD|Color]]|| breakpoint_color|| Color( 0.8, 0.8, 0.4, 0.2 )     |-| [[Color GD|Color]]|| caret_background_color|| Color( 0, 0, 0, 1 )             |-| [[Color GD|Color]]|| caret_color|| Color( 0.88, 0.88, 0.88, 1 )    |-| [[Color GD|Color]]|| code_folding_color|| Color( 0.8, 0.8, 0.8, 0.8 )     |-| [[StyleBox GD|StyleBox]]|| completion||                                 |-| [[Color GD|Color]]|| completion_background_color|| Color( 0.17, 0.16, 0.2, 1 )     |-| [[Color GD|Color]]|| completion_existing_color|| Color( 0.87, 0.87, 0.87, 0.13 ) |-| [[Color GD|Color]]|| completion_font_color|| Color( 0.67, 0.67, 0.67, 1 )    |-| int|| completion_lines|| 7                               |-| int|| completion_max_width|| 50                              |-| [[Color GD|Color]]|| completion_scroll_color|| Color( 1, 1, 1, 1 )             |-| int|| completion_scroll_width|| 3                               |-| [[Color GD|Color]]|| completion_selected_color|| Color( 0.26, 0.26, 0.27, 1 )    |-| [[Color GD|Color]]|| current_line_color|| Color( 0.25, 0.25, 0.26, 0.8 )  |-| [[Color GD|Color]]|| executing_line_color|| Color( 0.2, 0.8, 0.2, 0.4 )     |-| [[StyleBox GD|StyleBox]]|| focus||                                 |-| [[Texture2D GD|Texture2D]]|| fold||                                 |-| [[Texture2D GD|Texture2D]]|| folded||                                 |-| [[Font GD|Font]]|| font||                                 |-| [[Color GD|Color]]|| font_color|| Color( 0.88, 0.88, 0.88, 1 )    |-| [[Color GD|Color]]|| font_color_readonly|| Color( 0.88, 0.88, 0.88, 0.5 )  |-| [[Color GD|Color]]|| font_color_selected|| Color( 0, 0, 0, 1 )             |-| [[Color GD|Color]]|| function_color|| Color( 0.4, 0.64, 0.81, 1 )     |-| [[Color GD|Color]]|| line_number_color|| Color( 0.67, 0.67, 0.67, 0.4 )  |-| int|| line_spacing|| 4                               |-| [[Color GD|Color]]|| mark_color|| Color( 1, 0.4, 0.4, 0.4 )       |-| [[Color GD|Color]]|| member_variable_color|| Color( 0.9, 0.31, 0.35, 1 )     |-| [[StyleBox GD|StyleBox]]|| normal||                                 |-| [[Color GD|Color]]|| number_color|| Color( 0.92, 0.58, 0.2, 1 )     |-| [[StyleBox GD|StyleBox]]|| read_only||                                 |-| [[Color GD|Color]]|| safe_line_number_color|| Color( 0.67, 0.78, 0.67, 0.6 )  |-| [[Color GD|Color]]|| selection_color|| Color( 0.49, 0.49, 0.49, 1 )    |-| [[Texture2D GD|Texture2D]]|| space||                                 |-| [[Color GD|Color]]|| symbol_color|| Color( 0.94, 0.94, 0.94, 1 )    |-| [[Texture2D GD|Texture2D]]|| tab||                                 |-| [[Color GD|Color]]|| word_highlighted_color|| Color( 0.8, 0.9, 0.9, 0.15 )    |}== Signals ===== breakpoint_toggled ===*  '''breakpoint_toggled''' '''(''' int row ''')'''Emitted when a breakpoint is placed via the breakpoint gutter.=== cursor_changed ===*  '''cursor_changed ( )'''Emitted when the cursor changes.=== info_clicked ===*  '''info_clicked''' '''(''' int row, [[String GD|String]] info ''')'''Emitted when the info icon is clicked.=== request_completion ===*  '''request_completion ( )'''=== symbol_lookup ===*  '''symbol_lookup''' '''(''' [[String GD|String]] symbol, int row, int column ''')'''=== symbol_validate ===*  '''symbol_validate''' '''(''' [[String GD|String]] symbol ''')'''=== text_changed ===*  '''text_changed ( )'''Emitted when the text changes.== Enumerations ===== SearchFlags ====== SEARCH_MATCH_CASE ====== SEARCH_WHOLE_WORDS ====== SEARCH_BACKWARDS ===enum '''SearchFlags''':*  '''SEARCH_MATCH_CASE''' = '''1'''  Match case when searching.*  '''SEARCH_WHOLE_WORDS''' = '''2'''  Match whole words when searching.*  '''SEARCH_BACKWARDS''' = '''4'''  Search from end to beginning.=== SearchResult ====== SEARCH_RESULT_COLUMN ====== SEARCH_RESULT_LINE ===enum '''SearchResult''':*  '''SEARCH_RESULT_COLUMN''' = '''0'''  Used to access the result column from [[#search|search]].*  '''SEARCH_RESULT_LINE''' = '''1'''  Used to access the result line from [[#search|search]].=== MenuItems ====== MENU_CUT ====== MENU_COPY ====== MENU_PASTE ====== MENU_CLEAR ====== MENU_SELECT_ALL ====== MENU_UNDO ====== MENU_REDO ====== MENU_MAX ===enum '''MenuItems''':*  '''MENU_CUT''' = '''0'''  Cuts (copies and clears) the selected text.*  '''MENU_COPY''' = '''1'''  Copies the selected text.*  '''MENU_PASTE''' = '''2'''  Pastes the clipboard text over the selected text (or at the cursor's position).*  '''MENU_CLEAR''' = '''3'''  Erases the whole {{Span|TextEdit}} text.*  '''MENU_SELECT_ALL''' = '''4'''  Selects the whole {{Span|TextEdit}} text.*  '''MENU_UNDO''' = '''5'''  Undoes the previous action.*  '''MENU_REDO''' = '''6'''  Redoes the previous action.*  '''MENU_MAX''' = '''7'''  Represents the size of the [[#MenuItems|MenuItems]] enum.== Property Descriptions ===== breakpoint_gutter ===*  bool '''breakpoint_gutter'''{| class="wikitable | ''Default''|| {{Span|false}}                            |-| ''Setter''|| set_breakpoint_gutter_enabled(value) |-| ''Getter''|| is_breakpoint_gutter_enabled()       |}If {{Span|true}}, the breakpoint gutter is visible.=== caret_blink ===*  bool '''caret_blink'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| cursor_set_blink_enabled(value) |-| ''Getter''|| cursor_get_blink_enabled()      |}If {{Span|true}}, the caret (visual cursor) blinks.=== caret_blink_speed ===*  float '''caret_blink_speed'''{| class="wikitable | ''Default''|| {{Span|0.65}}                      |-| ''Setter''|| cursor_set_blink_speed(value) |-| ''Getter''|| cursor_get_blink_speed()      |}Duration (in seconds) of a caret's blinking cycle.=== caret_block_mode ===*  bool '''caret_block_mode'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| cursor_set_block_mode(value) |-| ''Getter''|| cursor_is_block_mode()       |}If {{Span|true}}, the caret displays as a rectangle.If {{Span|false}}, the caret displays as a bar.=== caret_moving_by_right_click ===*  bool '''caret_moving_by_right_click'''{| class="wikitable | ''Default''|| {{Span|true}}                           |-| ''Setter''|| set_right_click_moves_caret(value) |-| ''Getter''|| is_right_click_moving_caret()      |}If {{Span|true}}, a right-click moves the cursor at the mouse position before displaying the context menu.If {{Span|false}}, the context menu disregards mouse location.=== context_menu_enabled ===*  bool '''context_menu_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                        |-| ''Setter''|| set_context_menu_enabled(value) |-| ''Getter''|| is_context_menu_enabled()       |}If {{Span|true}}, a right-click displays the context menu.=== draw_spaces ===*  bool '''draw_spaces'''{| class="wikitable | ''Default''|| {{Span|false}}              |-| ''Setter''|| set_draw_spaces(value) |-| ''Getter''|| is_drawing_spaces()    |}If {{Span|true}}, the "space" character will have a visible representation.=== draw_tabs ===*  bool '''draw_tabs'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| set_draw_tabs(value) |-| ''Getter''|| is_drawing_tabs()    |}If {{Span|true}}, the "tab" character will have a visible representation.=== fold_gutter ===*  bool '''fold_gutter'''{| class="wikitable | ''Default''|| {{Span|false}}                   |-| ''Setter''|| set_draw_fold_gutter(value) |-| ''Getter''|| is_drawing_fold_gutter()    |}If {{Span|true}}, the fold gutter is visible. This enables folding groups of indented lines.=== hiding_enabled ===*  bool '''hiding_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                 |-| ''Setter''|| set_hiding_enabled(value) |-| ''Getter''|| is_hiding_enabled()       |}If {{Span|true}}, all lines that have been set to hidden by [[#set_line_as_hidden|set_line_as_hidden]], will not be visible.=== highlight_all_occurrences ===*  bool '''highlight_all_occurrences'''{| class="wikitable | ''Default''|| {{Span|false}}                              |-| ''Setter''|| set_highlight_all_occurrences(value)   |-| ''Getter''|| is_highlight_all_occurrences_enabled() |}If {{Span|true}}, all occurrences of the selected text will be highlighted.=== highlight_current_line ===*  bool '''highlight_current_line'''{| class="wikitable | ''Default''|| {{Span|false}}                           |-| ''Setter''|| set_highlight_current_line(value)   |-| ''Getter''|| is_highlight_current_line_enabled() |}If {{Span|true}}, the line containing the cursor is highlighted.=== minimap_draw ===*  bool '''minimap_draw'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| draw_minimap(value)  |-| ''Getter''|| is_drawing_minimap() |}=== minimap_width ===*  int '''minimap_width'''{| class="wikitable | ''Default''|| {{Span|80}}                   |-| ''Setter''|| set_minimap_width(value) |-| ''Getter''|| get_minimap_width()      |}=== override_selected_font_color ===*  bool '''override_selected_font_color'''{| class="wikitable | ''Default''|| {{Span|false}}                               |-| ''Setter''|| set_override_selected_font_color(value) |-| ''Getter''|| is_overriding_selected_font_color()     |}=== readonly ===*  bool '''readonly'''{| class="wikitable | ''Default''|| {{Span|false}}           |-| ''Setter''|| set_readonly(value) |-| ''Getter''|| is_readonly()       |}If {{Span|true}}, read-only mode is enabled. Existing text cannot be modified and new text cannot be added.=== scroll_horizontal ===*  int '''scroll_horizontal'''{| class="wikitable | ''Default''|| {{Span|0}}               |-| ''Setter''|| set_h_scroll(value) |-| ''Getter''|| get_h_scroll()      |}The current horizontal scroll value.=== scroll_vertical ===*  float '''scroll_vertical'''{| class="wikitable | ''Default''|| {{Span|0.0}}             |-| ''Setter''|| set_v_scroll(value) |-| ''Getter''|| get_v_scroll()      |}The current vertical scroll value.=== selecting_enabled ===*  bool '''selecting_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                     |-| ''Setter''|| set_selecting_enabled(value) |-| ''Getter''|| is_selecting_enabled()       |}=== shortcut_keys_enabled ===*  bool '''shortcut_keys_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                         |-| ''Setter''|| set_shortcut_keys_enabled(value) |-| ''Getter''|| is_shortcut_keys_enabled()       |}=== show_line_numbers ===*  bool '''show_line_numbers'''{| class="wikitable | ''Default''|| {{Span|false}}                      |-| ''Setter''|| set_show_line_numbers(value)   |-| ''Getter''|| is_show_line_numbers_enabled() |}If {{Span|true}}, line numbers are displayed to the left of the text.=== smooth_scrolling ===*  bool '''smooth_scrolling'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| set_smooth_scroll_enable(value) |-| ''Getter''|| is_smooth_scroll_enabled()      |}If {{Span|true}}, sets the {{Span|step}} of the scrollbars to {{Span|0.25}} which results in smoother scrolling.=== syntax_highlighting ===*  bool '''syntax_highlighting'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| set_syntax_coloring(value)   |-| ''Getter''|| is_syntax_coloring_enabled() |}If {{Span|true}}, any custom color properties that have been set for this {{Span|TextEdit}} will be visible.=== text ===*  [[String GD|String]] '''text'''{| class="wikitable | ''Default''|| {{Span|""}}          |-| ''Setter''|| set_text(value) |-| ''Getter''|| get_text()      |}String value of the {{Span|TextEdit}}.=== v_scroll_speed ===*  float '''v_scroll_speed'''{| class="wikitable | ''Default''|| {{Span|80.0}}                  |-| ''Setter''|| set_v_scroll_speed(value) |-| ''Getter''|| get_v_scroll_speed()      |}Vertical scroll sensitivity.=== wrap_enabled ===*  bool '''wrap_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}               |-| ''Setter''|| set_wrap_enabled(value) |-| ''Getter''|| is_wrap_enabled()       |}If {{Span|true}}, enables text wrapping when it goes beyond the edge of what is visible.== Method Descriptions ===== add_color_region ===*  void '''add_color_region''' '''(''' [[String GD|String]] begin_key, [[String GD|String]] end_key, [[Color GD|Color]] color, bool line_only=false ''')'''Adds color region (given the delimiters) and its colors.=== add_keyword_color ===*  void '''add_keyword_color''' '''(''' [[String GD|String]] keyword, [[Color GD|Color]] color ''')'''Adds a {{Span|keyword}} and its [[Color GD|Color]].=== can_fold ===*  bool '''can_fold''' '''(''' int line ''')''' constReturns if the given line is foldable, that is, it has indented lines right below it.=== center_viewport_to_cursor ===*  void '''center_viewport_to_cursor ( )'''=== clear_colors ===*  void '''clear_colors ( )'''Clears all custom syntax coloring information previously added with [[#add_color_region|add_color_region]] or [[#add_keyword_color|add_keyword_color]].=== clear_undo_history ===*  void '''clear_undo_history ( )'''Clears the undo history.=== copy ===*  void '''copy ( )'''Copy's the current text selection.=== cursor_get_column ===*  int '''cursor_get_column ( )''' constReturns the column the editing cursor is at.=== cursor_get_line ===*  int '''cursor_get_line ( )''' constReturns the line the editing cursor is at.=== cursor_set_column ===*  void '''cursor_set_column''' '''(''' int column, bool adjust_viewport=true ''')'''Moves the cursor at the specified {{Span|column}} index.If {{Span|adjust_viewport}} is set to {{Span|true}}, the viewport will center at the cursor position after the move occurs.=== cursor_set_line ===*  void '''cursor_set_line''' '''(''' int line, bool adjust_viewport=true, bool can_be_hidden=true, int wrap_index=0 ''')'''Moves the cursor at the specified {{Span|line}} index.If {{Span|adjust_viewport}} is set to {{Span|true}}, the viewport will center at the cursor position after the move occurs.If {{Span|can_be_hidden}} is set to {{Span|true}}, the specified {{Span|line}} can be hidden using [[#set_line_as_hidden|set_line_as_hidden]].=== cut ===*  void '''cut ( )'''Cut's the current selection.=== deselect ===*  void '''deselect ( )'''Deselects the current selection.=== fold_all_lines ===*  void '''fold_all_lines ( )'''Folds all lines that are possible to be folded (see [[#can_fold|can_fold]]).=== fold_line ===*  void '''fold_line''' '''(''' int line ''')'''Folds the given line, if possible (see [[#can_fold|can_fold]]).=== get_breakpoints ===*  [[Array GD|Array]] '''get_breakpoints ( )''' constReturns an array containing the line number of each breakpoint.=== get_keyword_color ===*  [[Color GD|Color]] '''get_keyword_color''' '''(''' [[String GD|String]] keyword ''')''' constReturns the [[Color GD|Color]] of the specified {{Span|keyword}}.=== get_line ===*  [[String GD|String]] '''get_line''' '''(''' int line ''')''' constReturns the text of a specific line.=== get_line_count ===*  int '''get_line_count ( )''' constReturns the amount of total lines in the text.=== get_menu ===*  [[PopupMenu GD|PopupMenu]] '''get_menu ( )''' constReturns the [[PopupMenu GD|PopupMenu]] of this {{Span|TextEdit}}. By default, this menu is displayed when right-clicking on the {{Span|TextEdit}}.=== get_selection_from_column ===*  int '''get_selection_from_column ( )''' constReturns the selection begin column.=== get_selection_from_line ===*  int '''get_selection_from_line ( )''' constReturns the selection begin line.=== get_selection_text ===*  [[String GD|String]] '''get_selection_text ( )''' constReturns the text inside the selection.=== get_selection_to_column ===*  int '''get_selection_to_column ( )''' constReturns the selection end column.=== get_selection_to_line ===*  int '''get_selection_to_line ( )''' constReturns the selection end line.=== get_word_under_cursor ===*  [[String GD|String]] '''get_word_under_cursor ( )''' constReturns a [[String GD|String]] text with the word under the mouse cursor location.=== has_keyword_color ===*  bool '''has_keyword_color''' '''(''' [[String GD|String]] keyword ''')''' constReturns whether the specified {{Span|keyword}} has a color set to it or not.=== insert_text_at_cursor ===*  void '''insert_text_at_cursor''' '''(''' [[String GD|String]] text ''')'''Insert the specified text at the cursor position.=== is_folded ===*  bool '''is_folded''' '''(''' int line ''')''' constReturns whether the line at the specified index is folded or not.=== is_line_hidden ===*  bool '''is_line_hidden''' '''(''' int line ''')''' constReturns whether the line at the specified index is hidden or not.=== is_selection_active ===*  bool '''is_selection_active ( )''' constReturns {{Span|true}} if the selection is active.=== menu_option ===*  void '''menu_option''' '''(''' int option ''')'''Triggers a right-click menu action by the specified index. See [[#MenuItems|MenuItems]] for a list of available indexes.=== paste ===*  void '''paste ( )'''Paste the current selection.=== redo ===*  void '''redo ( )'''Perform redo operation.=== remove_breakpoints ===*  void '''remove_breakpoints ( )'''Removes all the breakpoints. This will not fire the [[#breakpoint_toggled|breakpoint_toggled]] signal.=== search ===*  [[PackedInt32Array GD|PackedInt32Array]] '''search''' '''(''' [[String GD|String]] key, int flags, int from_line, int from_column ''')''' constPerform a search inside the text. Search flags can be specified in the [[#SearchFlags|SearchFlags]] enum.Returns an empty {{Span|PackedInt32Array}} if no result was found. Otherwise, the result line and column can be accessed at indices specified in the [[#SearchResult|SearchResult]] enum, e.g:::    var result = search(key, flags, line, column)    if result.size() > 0:        # Result found.        var res_line = result[TextEdit.SEARCH_RESULT_LINE]        var res_column = result[TextEdit.SEARCH_RESULT_COLUMN]=== select ===*  void '''select''' '''(''' int from_line, int from_column, int to_line, int to_column ''')'''Perform selection, from line/column to line/column.=== select_all ===*  void '''select_all ( )'''Select all the text.=== set_line_as_hidden ===*  void '''set_line_as_hidden''' '''(''' int line, bool enable ''')'''If {{Span|true}}, hides the line of the specified index.=== toggle_fold_line ===*  void '''toggle_fold_line''' '''(''' int line ''')'''Toggle the folding of the code block at the given line.=== undo ===*  void '''undo ( )'''Perform undo operation.=== unfold_line ===*  void '''unfold_line''' '''(''' int line ''')'''Unfolds the given line, if folded.=== unhide_all_lines ===*  void '''unhide_all_lines ( )'''Unhide all lines that were previously set to hidden by [[#set_line_as_hidden|set_line_as_hidden]].