__NOTOC__'''Inherits:''' [[Object GD|Object]]Operating System functions.== Description ==Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc.== Properties =={| class="wikitable | [[String GD|String]]|| [[#clipboard|clipboard]]|| {{Span|""}}              |-| int|| [[#current_screen|current_screen]]|| {{Span|0}}               |-| int|| [[#exit_code|exit_code]]|| {{Span|0}}               |-| bool|| [[#keep_screen_on|keep_screen_on]]|| {{Span|true}}            |-| bool|| [[#low_processor_usage_mode|low_processor_usage_mode]]|| {{Span|false}}           |-| int|| [[#low_processor_usage_mode_sleep_usec|low_processor_usage_mode_sleep_usec]]|| {{Span|6900}}            |-| [[Vector2 GD|Vector2]]|| [[#max_window_size|max_window_size]]|| {{Span|Vector2( 0, 0 )}} |-| [[Vector2 GD|Vector2]]|| [[#min_window_size|min_window_size]]|| {{Span|Vector2( 0, 0 )}} |-| [[#ScreenOrientation|ScreenOrientation]]|| [[#screen_orientation|screen_orientation]]|| {{Span|0}}               |-| bool|| [[#vsync_enabled|vsync_enabled]]|| {{Span|true}}            |-| bool|| [[#vsync_via_compositor|vsync_via_compositor]]|| {{Span|false}}           |-| bool|| [[#window_borderless|window_borderless]]|| {{Span|false}}           |-| bool|| [[#window_fullscreen|window_fullscreen]]|| {{Span|false}}           |-| bool|| [[#window_maximized|window_maximized]]|| {{Span|false}}           |-| bool|| [[#window_minimized|window_minimized]]|| {{Span|false}}           |-| bool|| [[#window_per_pixel_transparency_enabled|window_per_pixel_transparency_enabled]]|| {{Span|false}}           |-| [[Vector2 GD|Vector2]]|| [[#window_position|window_position]]|| {{Span|Vector2( 0, 0 )}} |-| bool|| [[#window_resizable|window_resizable]]|| {{Span|true}}            |-| [[Vector2 GD|Vector2]]|| [[#window_size|window_size]]|| {{Span|Vector2( 0, 0 )}} |}== Methods =={| class="wikitable | void|| [[#alert|alert]] '''(''' [[String GD|String]] text, [[String GD|String]] title="Alert!" ''')'''                                                                                                                                               |-| bool|| [[#can_draw|can_draw]] '''(''' ''')''' const                                                                                                                                                                                                                |-| bool|| [[#can_use_threads|can_use_threads]] '''(''' ''')''' const                                                                                                                                                                                                  |-| void|| [[#center_window|center_window]] '''(''' ''')'''                                                                                                                                                                                                            |-| void|| [[#close_midi_inputs|close_midi_inputs]] '''(''' ''')'''                                                                                                                                                                                                    |-| void|| [[#delay_msec|delay_msec]] '''(''' int msec ''')''' const                                                                                                                                                                                 |-| void|| [[#delay_usec|delay_usec]] '''(''' int usec ''')''' const                                                                                                                                                                                 |-| void|| [[#dump_memory_to_file|dump_memory_to_file]] '''(''' [[String GD|String]] file ''')'''                                                                                                                                                               |-| void|| [[#dump_resources_to_file|dump_resources_to_file]] '''(''' [[String GD|String]] file ''')'''                                                                                                                                                         |-| int|| [[#execute|execute]] '''(''' [[String GD|String]] path, [[PackedStringArray GD|PackedStringArray]] arguments, bool blocking=true, [[Array GD|Array]] output=[  ], bool read_stderr=false ''')''' |-| int|| [[#find_keycode_from_string|find_keycode_from_string]] '''(''' [[String GD|String]] string ''')''' const                                                                                                                                             |-| int|| [[#get_audio_driver_count|get_audio_driver_count]] '''(''' ''')''' const                                                                                                                                                                                    |-| [[String GD|String]]|| [[#get_audio_driver_name|get_audio_driver_name]] '''(''' int driver ''')''' const                                                                                                                                                         |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_cmdline_args|get_cmdline_args]] '''(''' ''')'''                                                                                                                                                                                                      |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_connected_midi_inputs|get_connected_midi_inputs]] '''(''' ''')'''                                                                                                                                                                                    |-| [[#VideoDriver|VideoDriver]]|| [[#get_current_video_driver|get_current_video_driver]] '''(''' ''')''' const                                                                                                                                                                                |-| [[Dictionary GD|Dictionary]]|| [[#get_date|get_date]] '''(''' bool utc=false ''')''' const                                                                                                                                                                              |-| [[Dictionary GD|Dictionary]]|| [[#get_datetime|get_datetime]] '''(''' bool utc=false ''')''' const                                                                                                                                                                      |-| [[Dictionary GD|Dictionary]]|| [[#get_datetime_from_unix_time|get_datetime_from_unix_time]] '''(''' int unix_time_val ''')''' const                                                                                                                                      |-| [[String GD|String]]|| [[#get_environment|get_environment]] '''(''' [[String GD|String]] environment ''')''' const                                                                                                                                                          |-| [[String GD|String]]|| [[#get_executable_path|get_executable_path]] '''(''' ''')''' const                                                                                                                                                                                          |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_granted_permissions|get_granted_permissions]] '''(''' ''')''' const                                                                                                                                                                                  |-| [[Vector2 GD|Vector2]]|| [[#get_ime_selection|get_ime_selection]] '''(''' ''')''' const                                                                                                                                                                                              |-| [[String GD|String]]|| [[#get_ime_text|get_ime_text]] '''(''' ''')''' const                                                                                                                                                                                                        |-| [[String GD|String]]|| [[#get_keycode_string|get_keycode_string]] '''(''' int code ''')''' const                                                                                                                                                                 |-| [[String GD|String]]|| [[#get_latin_keyboard_variant|get_latin_keyboard_variant]] '''(''' ''')''' const                                                                                                                                                                            |-| [[String GD|String]]|| [[#get_locale|get_locale]] '''(''' ''')''' const                                                                                                                                                                                                            |-| [[String GD|String]]|| [[#get_model_name|get_model_name]] '''(''' ''')''' const                                                                                                                                                                                                    |-| [[String GD|String]]|| [[#get_name|get_name]] '''(''' ''')''' const                                                                                                                                                                                                                |-| int|| [[#get_process_id|get_process_id]] '''(''' ''')''' const                                                                                                                                                                                                    |-| int|| [[#get_processor_count|get_processor_count]] '''(''' ''')''' const                                                                                                                                                                                          |-| [[Vector2 GD|Vector2]]|| [[#get_real_window_size|get_real_window_size]] '''(''' ''')''' const                                                                                                                                                                                        |-| int|| [[#get_screen_count|get_screen_count]] '''(''' ''')''' const                                                                                                                                                                                                |-| int|| [[#get_screen_dpi|get_screen_dpi]] '''(''' int screen=-1 ''')''' const                                                                                                                                                                    |-| [[Vector2 GD|Vector2]]|| [[#get_screen_position|get_screen_position]] '''(''' int screen=-1 ''')''' const                                                                                                                                                          |-| [[Vector2 GD|Vector2]]|| [[#get_screen_size|get_screen_size]] '''(''' int screen=-1 ''')''' const                                                                                                                                                                  |-| int|| [[#get_splash_tick_msec|get_splash_tick_msec]] '''(''' ''')''' const                                                                                                                                                                                        |-| int|| [[#get_static_memory_peak_usage|get_static_memory_peak_usage]] '''(''' ''')''' const                                                                                                                                                                        |-| int|| [[#get_static_memory_usage|get_static_memory_usage]] '''(''' ''')''' const                                                                                                                                                                                  |-| [[String GD|String]]|| [[#get_system_dir|get_system_dir]] '''(''' [[#SystemDir|SystemDir]] dir ''')''' const                                                                                                                                                            |-| int|| [[#get_system_time_msecs|get_system_time_msecs]] '''(''' ''')''' const                                                                                                                                                                                      |-| int|| [[#get_system_time_secs|get_system_time_secs]] '''(''' ''')''' const                                                                                                                                                                                        |-| int|| [[#get_ticks_msec|get_ticks_msec]] '''(''' ''')''' const                                                                                                                                                                                                    |-| int|| [[#get_ticks_usec|get_ticks_usec]] '''(''' ''')''' const                                                                                                                                                                                                    |-| [[Dictionary GD|Dictionary]]|| [[#get_time|get_time]] '''(''' bool utc=false ''')''' const                                                                                                                                                                              |-| [[Dictionary GD|Dictionary]]|| [[#get_time_zone_info|get_time_zone_info]] '''(''' ''')''' const                                                                                                                                                                                            |-| [[String GD|String]]|| [[#get_unique_id|get_unique_id]] '''(''' ''')''' const                                                                                                                                                                                                      |-| int|| [[#get_unix_time|get_unix_time]] '''(''' ''')''' const                                                                                                                                                                                                      |-| int|| [[#get_unix_time_from_datetime|get_unix_time_from_datetime]] '''(''' [[Dictionary GD|Dictionary]] datetime ''')''' const                                                                                                                             |-| [[String GD|String]]|| [[#get_user_data_dir|get_user_data_dir]] '''(''' ''')''' const                                                                                                                                                                                              |-| int|| [[#get_video_driver_count|get_video_driver_count]] '''(''' ''')''' const                                                                                                                                                                                    |-| [[String GD|String]]|| [[#get_video_driver_name|get_video_driver_name]] '''(''' [[#VideoDriver|VideoDriver]] driver ''')''' const                                                                                                                                       |-| int|| [[#get_virtual_keyboard_height|get_virtual_keyboard_height]] '''(''' ''')'''                                                                                                                                                                                |-| [[Rect2 GD|Rect2]]|| [[#get_window_safe_area|get_window_safe_area]] '''(''' ''')''' const                                                                                                                                                                                        |-| void|| [[#global_menu_add_item|global_menu_add_item]] '''(''' [[String GD|String]] menu, [[String GD|String]] label, [[Variant GD|Variant]] id, [[Variant GD|Variant]] meta ''')'''                                                    |-| void|| [[#global_menu_add_separator|global_menu_add_separator]] '''(''' [[String GD|String]] menu ''')'''                                                                                                                                                   |-| void|| [[#global_menu_clear|global_menu_clear]] '''(''' [[String GD|String]] menu ''')'''                                                                                                                                                                   |-| void|| [[#global_menu_remove_item|global_menu_remove_item]] '''(''' [[String GD|String]] menu, int idx ''')'''                                                                                                                            |-| bool|| [[#has_environment|has_environment]] '''(''' [[String GD|String]] environment ''')''' const                                                                                                                                                          |-| bool|| [[#has_feature|has_feature]] '''(''' [[String GD|String]] tag_name ''')''' const                                                                                                                                                                     |-| bool|| [[#has_touchscreen_ui_hint|has_touchscreen_ui_hint]] '''(''' ''')''' const                                                                                                                                                                                  |-| bool|| [[#has_virtual_keyboard|has_virtual_keyboard]] '''(''' ''')''' const                                                                                                                                                                                        |-| void|| [[#hide_virtual_keyboard|hide_virtual_keyboard]] '''(''' ''')'''                                                                                                                                                                                            |-| bool|| [[#is_debug_build|is_debug_build]] '''(''' ''')''' const                                                                                                                                                                                                    |-| bool|| [[#is_keycode_unicode|is_keycode_unicode]] '''(''' int code ''')''' const                                                                                                                                                                 |-| bool|| [[#is_ok_left_and_cancel_right|is_ok_left_and_cancel_right]] '''(''' ''')''' const                                                                                                                                                                          |-| bool|| [[#is_stdout_verbose|is_stdout_verbose]] '''(''' ''')''' const                                                                                                                                                                                              |-| bool|| [[#is_userfs_persistent|is_userfs_persistent]] '''(''' ''')''' const                                                                                                                                                                                        |-| bool|| [[#is_window_always_on_top|is_window_always_on_top]] '''(''' ''')''' const                                                                                                                                                                                  |-| bool|| [[#is_window_focused|is_window_focused]] '''(''' ''')''' const                                                                                                                                                                                              |-| [[@GlobalScope GD#Error|Error]]|| [[#kill|kill]] '''(''' int pid ''')'''                                                                                                                                                                                                    |-| void|| [[#move_window_to_foreground|move_window_to_foreground]] '''(''' ''')'''                                                                                                                                                                                    |-| bool|| [[#native_video_is_playing|native_video_is_playing]] '''(''' ''')'''                                                                                                                                                                                        |-| void|| [[#native_video_pause|native_video_pause]] '''(''' ''')'''                                                                                                                                                                                                  |-| [[@GlobalScope GD#Error|Error]]|| [[#native_video_play|native_video_play]] '''(''' [[String GD|String]] path, float volume, [[String GD|String]] audio_track, [[String GD|String]] subtitle_track ''')'''                                            |-| void|| [[#native_video_stop|native_video_stop]] '''(''' ''')'''                                                                                                                                                                                                    |-| void|| [[#native_video_unpause|native_video_unpause]] '''(''' ''')'''                                                                                                                                                                                              |-| void|| [[#open_midi_inputs|open_midi_inputs]] '''(''' ''')'''                                                                                                                                                                                                      |-| void|| [[#print_all_resources|print_all_resources]] '''(''' [[String GD|String]] tofile="" ''')'''                                                                                                                                                          |-| void|| [[#print_all_textures_by_size|print_all_textures_by_size]] '''(''' ''')'''                                                                                                                                                                                  |-| void|| [[#print_resources_by_type|print_resources_by_type]] '''(''' [[PackedStringArray GD|PackedStringArray]] types ''')'''                                                                                                                                |-| void|| [[#print_resources_in_use|print_resources_in_use]] '''(''' bool short=false ''')'''                                                                                                                                                      |-| void|| [[#request_attention|request_attention]] '''(''' ''')'''                                                                                                                                                                                                    |-| bool|| [[#request_permission|request_permission]] '''(''' [[String GD|String]] name ''')'''                                                                                                                                                                 |-| bool|| [[#request_permissions|request_permissions]] '''(''' ''')'''                                                                                                                                                                                                |-| void|| [[#set_icon|set_icon]] '''(''' [[Image GD|Image]] icon ''')'''                                                                                                                                                                                       |-| void|| [[#set_ime_active|set_ime_active]] '''(''' bool active ''')'''                                                                                                                                                                           |-| void|| [[#set_ime_position|set_ime_position]] '''(''' [[Vector2 GD|Vector2]] position ''')'''                                                                                                                                                               |-| void|| [[#set_native_icon|set_native_icon]] '''(''' [[String GD|String]] filename ''')'''                                                                                                                                                                   |-| [[@GlobalScope GD#Error|Error]]|| [[#set_thread_name|set_thread_name]] '''(''' [[String GD|String]] name ''')'''                                                                                                                                                                       |-| void|| [[#set_use_file_access_save_and_swap|set_use_file_access_save_and_swap]] '''(''' bool enabled ''')'''                                                                                                                                    |-| void|| [[#set_window_always_on_top|set_window_always_on_top]] '''(''' bool enabled ''')'''                                                                                                                                                      |-| void|| [[#set_window_title|set_window_title]] '''(''' [[String GD|String]] title ''')'''                                                                                                                                                                    |-| [[@GlobalScope GD#Error|Error]]|| [[#shell_open|shell_open]] '''(''' [[String GD|String]] uri ''')'''                                                                                                                                                                                  |-| void|| [[#show_virtual_keyboard|show_virtual_keyboard]] '''(''' [[String GD|String]] existing_text="" ''')'''                                                                                                                                               |}== Enumerations ===== VideoDriver ====== VIDEO_DRIVER_GLES2 ====== VIDEO_DRIVER_VULKAN ===enum '''VideoDriver''':*  '''VIDEO_DRIVER_GLES2''' = '''0'''  The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web.*  '''VIDEO_DRIVER_VULKAN''' = '''1'''  The Vulkan rendering backend.=== Weekday ====== DAY_SUNDAY ====== DAY_MONDAY ====== DAY_TUESDAY ====== DAY_WEDNESDAY ====== DAY_THURSDAY ====== DAY_FRIDAY ====== DAY_SATURDAY ===enum '''Weekday''':*  '''DAY_SUNDAY''' = '''0'''  Sunday.*  '''DAY_MONDAY''' = '''1'''  Monday.*  '''DAY_TUESDAY''' = '''2'''  Tuesday.*  '''DAY_WEDNESDAY''' = '''3'''  Wednesday.*  '''DAY_THURSDAY''' = '''4'''  Thursday.*  '''DAY_FRIDAY''' = '''5'''  Friday.*  '''DAY_SATURDAY''' = '''6'''  Saturday.=== Month ====== MONTH_JANUARY ====== MONTH_FEBRUARY ====== MONTH_MARCH ====== MONTH_APRIL ====== MONTH_MAY ====== MONTH_JUNE ====== MONTH_JULY ====== MONTH_AUGUST ====== MONTH_SEPTEMBER ====== MONTH_OCTOBER ====== MONTH_NOVEMBER ====== MONTH_DECEMBER ===enum '''Month''':*  '''MONTH_JANUARY''' = '''1'''  January.*  '''MONTH_FEBRUARY''' = '''2'''  February.*  '''MONTH_MARCH''' = '''3'''  March.*  '''MONTH_APRIL''' = '''4'''  April.*  '''MONTH_MAY''' = '''5'''  May.*  '''MONTH_JUNE''' = '''6'''  June.*  '''MONTH_JULY''' = '''7'''  July.*  '''MONTH_AUGUST''' = '''8'''  August.*  '''MONTH_SEPTEMBER''' = '''9'''  September.*  '''MONTH_OCTOBER''' = '''10'''  October.*  '''MONTH_NOVEMBER''' = '''11'''  November.*  '''MONTH_DECEMBER''' = '''12'''  December.=== ScreenOrientation ====== SCREEN_ORIENTATION_LANDSCAPE ====== SCREEN_ORIENTATION_PORTRAIT ====== SCREEN_ORIENTATION_REVERSE_LANDSCAPE ====== SCREEN_ORIENTATION_REVERSE_PORTRAIT ====== SCREEN_ORIENTATION_SENSOR_LANDSCAPE ====== SCREEN_ORIENTATION_SENSOR_PORTRAIT ====== SCREEN_ORIENTATION_SENSOR ===enum '''ScreenOrientation''':*  '''SCREEN_ORIENTATION_LANDSCAPE''' = '''0'''  Landscape screen orientation.*  '''SCREEN_ORIENTATION_PORTRAIT''' = '''1'''  Portrait screen orientation.*  '''SCREEN_ORIENTATION_REVERSE_LANDSCAPE''' = '''2'''  Reverse landscape screen orientation.*  '''SCREEN_ORIENTATION_REVERSE_PORTRAIT''' = '''3'''  Reverse portrait screen orientation.*  '''SCREEN_ORIENTATION_SENSOR_LANDSCAPE''' = '''4'''  Uses landscape or reverse landscape based on the hardware sensor.*  '''SCREEN_ORIENTATION_SENSOR_PORTRAIT''' = '''5'''  Uses portrait or reverse portrait based on the hardware sensor.*  '''SCREEN_ORIENTATION_SENSOR''' = '''6'''  Uses most suitable orientation based on the hardware sensor.=== SystemDir ====== SYSTEM_DIR_DESKTOP ====== SYSTEM_DIR_DCIM ====== SYSTEM_DIR_DOCUMENTS ====== SYSTEM_DIR_DOWNLOADS ====== SYSTEM_DIR_MOVIES ====== SYSTEM_DIR_MUSIC ====== SYSTEM_DIR_PICTURES ====== SYSTEM_DIR_RINGTONES ===enum '''SystemDir''':*  '''SYSTEM_DIR_DESKTOP''' = '''0'''  Desktop directory path.*  '''SYSTEM_DIR_DCIM''' = '''1'''  DCIM (Digital Camera Images) directory path.*  '''SYSTEM_DIR_DOCUMENTS''' = '''2'''  Documents directory path.*  '''SYSTEM_DIR_DOWNLOADS''' = '''3'''  Downloads directory path.*  '''SYSTEM_DIR_MOVIES''' = '''4'''  Movies directory path.*  '''SYSTEM_DIR_MUSIC''' = '''5'''  Music directory path.*  '''SYSTEM_DIR_PICTURES''' = '''6'''  Pictures directory path.*  '''SYSTEM_DIR_RINGTONES''' = '''7'''  Ringtones directory path.== Property Descriptions ===== clipboard ===*  [[String GD|String]] '''clipboard'''{| class="wikitable | ''Default''|| {{Span|""}}               |-| ''Setter''|| set_clipboard(value) |-| ''Getter''|| get_clipboard()      |}The clipboard from the host OS. Might be unavailable on some platforms.=== current_screen ===*  int '''current_screen'''{| class="wikitable | ''Default''|| {{Span|0}}                     |-| ''Setter''|| set_current_screen(value) |-| ''Getter''|| get_current_screen()      |}The current screen index (starting from 0).=== exit_code ===*  int '''exit_code'''{| class="wikitable | ''Default''|| {{Span|0}}                |-| ''Setter''|| set_exit_code(value) |-| ''Getter''|| get_exit_code()      |}The exit code passed to the OS when the main loop exits. By convention, an exit code of {{Span|0}} indicates success whereas a non-zero exit code indicates an error. For portability reasons, the exit code should be set between 0 and 125 (inclusive).'''Note:''' This value will be ignored if using [[SceneTree GD#quit|SceneTree.quit()]] with an {{Span|exit_code}} argument passed.=== keep_screen_on ===*  bool '''keep_screen_on'''{| class="wikitable | ''Default''|| {{Span|true}}                  |-| ''Setter''|| set_keep_screen_on(value) |-| ''Getter''|| is_keep_screen_on()       |}If {{Span|true}}, the engine tries to keep the screen on while the game is running. Useful on mobile.=== low_processor_usage_mode ===*  bool '''low_processor_usage_mode'''{| class="wikitable | ''Default''|| {{Span|false}}                           |-| ''Setter''|| set_low_processor_usage_mode(value) |-| ''Getter''|| is_in_low_processor_usage_mode()    |}If {{Span|true}}, the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.=== low_processor_usage_mode_sleep_usec ===*  int '''low_processor_usage_mode_sleep_usec'''{| class="wikitable | ''Default''|| {{Span|6900}}                                       |-| ''Setter''|| set_low_processor_usage_mode_sleep_usec(value) |-| ''Getter''|| get_low_processor_usage_mode_sleep_usec()      |}The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.=== max_window_size ===*  [[Vector2 GD|Vector2]] '''max_window_size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}        |-| ''Setter''|| set_max_window_size(value) |-| ''Getter''|| get_max_window_size()      |}The maximum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to {{Span|(0, 0)}} to reset to the system default value.=== min_window_size ===*  [[Vector2 GD|Vector2]] '''min_window_size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}        |-| ''Setter''|| set_min_window_size(value) |-| ''Getter''|| get_min_window_size()      |}The minimum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to {{Span|(0, 0)}} to reset to the system default value.=== screen_orientation ===*  [[#ScreenOrientation|ScreenOrientation]] '''screen_orientation'''{| class="wikitable | ''Default''|| {{Span|0}}                         |-| ''Setter''|| set_screen_orientation(value) |-| ''Getter''|| get_screen_orientation()      |}The current screen orientation.=== vsync_enabled ===*  bool '''vsync_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}             |-| ''Setter''|| set_use_vsync(value) |-| ''Getter''|| is_vsync_enabled()   |}If {{Span|true}}, vertical synchronization (Vsync) is enabled.=== vsync_via_compositor ===*  bool '''vsync_via_compositor'''{| class="wikitable | ''Default''|| {{Span|false}}                         |-| ''Setter''|| set_vsync_via_compositor(value)   |-| ''Getter''|| is_vsync_via_compositor_enabled() |}If {{Span|true}} and {{Span|vsync_enabled}} is true, the operating system's window compositor will be used for vsync when the compositor is enabled and the game is in windowed mode.'''Note:''' This option is experimental and meant to alleviate stutter experienced by some users. However, some users have experienced a Vsync framerate halving (e.g. from 60 FPS to 30 FPS) when using it.'''Note:''' This property is only implemented on Windows.=== window_borderless ===*  bool '''window_borderless'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| set_borderless_window(value) |-| ''Getter''|| get_borderless_window()      |}If {{Span|true}}, removes the window frame.'''Note:''' Setting {{Span|window_borderless}} to {{Span|false}} disables per-pixel transparency.=== window_fullscreen ===*  bool '''window_fullscreen'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| set_window_fullscreen(value) |-| ''Getter''|| is_window_fullscreen()       |}If {{Span|true}}, the window is fullscreen.=== window_maximized ===*  bool '''window_maximized'''{| class="wikitable | ''Default''|| {{Span|false}}                   |-| ''Setter''|| set_window_maximized(value) |-| ''Getter''|| is_window_maximized()       |}If {{Span|true}}, the window is maximized.=== window_minimized ===*  bool '''window_minimized'''{| class="wikitable | ''Default''|| {{Span|false}}                   |-| ''Setter''|| set_window_minimized(value) |-| ''Getter''|| is_window_minimized()       |}If {{Span|true}}, the window is minimized.=== window_per_pixel_transparency_enabled ===*  bool '''window_per_pixel_transparency_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                                        |-| ''Setter''|| set_window_per_pixel_transparency_enabled(value) |-| ''Getter''|| get_window_per_pixel_transparency_enabled()      |}If {{Span|true}}, the window background is transparent and window frame is removed.Use {{Span|get_tree().get_root().set_transparent_background(true)}} to disable main viewport background rendering.'''Note:''' This property has no effect if '''Project > Project Settings > Display > Window > Per-pixel transparency > Allowed''' setting is disabled.'''Note:''' This property is implemented on HTML5, Linux, macOS and Windows.=== window_position ===*  [[Vector2 GD|Vector2]] '''window_position'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}        |-| ''Setter''|| set_window_position(value) |-| ''Getter''|| get_window_position()      |}The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.=== window_resizable ===*  bool '''window_resizable'''{| class="wikitable | ''Default''|| {{Span|true}}                    |-| ''Setter''|| set_window_resizable(value) |-| ''Getter''|| is_window_resizable()       |}If {{Span|true}}, the window is resizable by the user.=== window_size ===*  [[Vector2 GD|Vector2]] '''window_size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}    |-| ''Setter''|| set_window_size(value) |-| ''Getter''|| get_window_size()      |}The size of the window (without counting window manager decorations).== Method Descriptions ===== alert ===*  void '''alert''' '''(''' [[String GD|String]] text, [[String GD|String]] title="Alert!" ''')'''Displays a modal dialog box using the host OS' facilities. Execution is blocked until the dialog is closed.=== can_draw ===*  bool '''can_draw ( )''' constReturns {{Span|true}} if the host OS allows drawing.=== can_use_threads ===*  bool '''can_use_threads ( )''' constReturns {{Span|true}} if the current host platform is using multiple threads.=== center_window ===*  void '''center_window ( )'''Centers the window on the screen if in windowed mode.=== close_midi_inputs ===*  void '''close_midi_inputs ( )'''Shuts down system MIDI driver.'''Note:''' This method is implemented on Linux, macOS and Windows.=== delay_msec ===*  void '''delay_msec''' '''(''' int msec ''')''' constDelay execution of the current thread by {{Span|msec}} milliseconds.=== delay_usec ===*  void '''delay_usec''' '''(''' int usec ''')''' constDelay execution of the current thread by {{Span|usec}} microseconds.=== dump_memory_to_file ===*  void '''dump_memory_to_file''' '''(''' [[String GD|String]] file ''')'''Dumps the memory allocation ringlist to a file (only works in debug).Entry format per line: "Address - Size - Description".=== dump_resources_to_file ===*  void '''dump_resources_to_file''' '''(''' [[String GD|String]] file ''')'''Dumps all used resources to file (only works in debug).Entry format per line: "Resource Type : Resource Location".At the end of the file is a statistic of all used Resource Types.=== execute ===*  int '''execute''' '''(''' [[String GD|String]] path, [[PackedStringArray GD|PackedStringArray]] arguments, bool blocking=true, [[Array GD|Array]] output=[  ], bool read_stderr=false ''')'''Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.The arguments are used in the given order and separated by a space, so {{Span|OS.execute("ping", ["-w", "3", "godotengine.org"], false)}} will resolve to {{Span|ping -w 3 godotengine.org}} in the system's shell.This method has slightly different behavior based on whether the {{Span|blocking}} mode is enabled.If {{Span|blocking}} is {{Span|true}}, the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the {{Span|output}} array as a single string. When the process terminates, the Godot thread will resume execution.If {{Span|blocking}} is {{Span|false}}, the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so {{Span|output}} will be empty.The return value also depends on the blocking mode. When blocking, the method will return an exit code of the process. When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with [[#kill|kill]]). If the process forking (non-blocking) or opening (blocking) fails, the method will return {{Span|-1}} or another exit code.Example of blocking mode and retrieving the shell output:::    var output = []    var exit_code = OS.execute("ls", ["-l", "/tmp"], true, output)Example of non-blocking mode, running another instance of the project and storing its process ID:::    var pid = OS.execute(OS.get_executable_path(), [], false)If you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:::    OS.execute("CMD.exe", ["/C", "cd %TEMP% && dir"], true, output)'''Note:''' This method is implemented on Android, iOS, Linux, macOS and Windows.=== find_keycode_from_string ===*  int '''find_keycode_from_string''' '''(''' [[String GD|String]] string ''')''' constReturns the keycode of the given string (e.g. "Escape").=== get_audio_driver_count ===*  int '''get_audio_driver_count ( )''' constReturns the total number of available audio drivers.=== get_audio_driver_name ===*  [[String GD|String]] '''get_audio_driver_name''' '''(''' int driver ''')''' constReturns the audio driver name for the given index.=== get_cmdline_args ===*  [[PackedStringArray GD|PackedStringArray]] '''get_cmdline_args ( )'''Returns the command line arguments passed to the engine.=== get_connected_midi_inputs ===*  [[PackedStringArray GD|PackedStringArray]] '''get_connected_midi_inputs ( )'''Returns an array of MIDI device names.The returned array will be empty if the system MIDI driver has not previously been initialised with [[#open_midi_inputs|open_midi_inputs]].'''Note:''' This method is implemented on Linux, macOS and Windows.=== get_current_video_driver ===*  [[#VideoDriver|VideoDriver]] '''get_current_video_driver ( )''' constReturns the currently used video driver, using one of the values from [[#VideoDriver|VideoDriver]].=== get_date ===*  [[Dictionary GD|Dictionary]] '''get_date''' '''(''' bool utc=false ''')''' constReturns current date as a dictionary of keys: {{Span|year}}, {{Span|month}}, {{Span|day}}, {{Span|weekday}}, {{Span|dst}} (Daylight Savings Time).=== get_datetime ===*  [[Dictionary GD|Dictionary]] '''get_datetime''' '''(''' bool utc=false ''')''' constReturns current datetime as a dictionary of keys: {{Span|year}}, {{Span|month}}, {{Span|day}}, {{Span|weekday}}, {{Span|dst}} (Daylight Savings Time), {{Span|hour}}, {{Span|minute}}, {{Span|second}}.=== get_datetime_from_unix_time ===*  [[Dictionary GD|Dictionary]] '''get_datetime_from_unix_time''' '''(''' int unix_time_val ''')''' constGets a dictionary of time values corresponding to the given UNIX epoch time (in seconds).The returned Dictionary's values will be the same as [[#get_datetime|get_datetime]], with the exception of Daylight Savings Time as it cannot be determined from the epoch.=== get_environment ===*  [[String GD|String]] '''get_environment''' '''(''' [[String GD|String]] environment ''')''' constReturns an environment variable.=== get_executable_path ===*  [[String GD|String]] '''get_executable_path ( )''' constReturns the path to the current engine executable.=== get_granted_permissions ===*  [[PackedStringArray GD|PackedStringArray]] '''get_granted_permissions ( )''' constWith this function you can get the list of dangerous permissions that have been granted to the Android application.'''Note:''' This method is implemented on Android.=== get_ime_selection ===*  [[Vector2 GD|Vector2]] '''get_ime_selection ( )''' constReturns the IME cursor position (the currently-edited portion of the string) relative to the characters in the composition string.[[MainLoop GD#NOTIFICATION_OS_IME_UPDATE|MainLoop.NOTIFICATION_OS_IME_UPDATE()]] is sent to the application to notify it of changes to the IME cursor position.'''Note:''' This method is implemented on macOS.=== get_ime_text ===*  [[String GD|String]] '''get_ime_text ( )''' constReturns the IME intermediate composition string.[[MainLoop GD#NOTIFICATION_OS_IME_UPDATE|MainLoop.NOTIFICATION_OS_IME_UPDATE()]] is sent to the application to notify it of changes to the IME composition string.'''Note:''' This method is implemented on macOS.=== get_keycode_string ===*  [[String GD|String]] '''get_keycode_string''' '''(''' int code ''')''' constReturns the given keycode as a string (e.g. Return values: {{Span|"Escape"}}, {{Span|"Shift+Escape"}}).See also [[InputEventKey GD#keycode|InputEventKey.keycode()]] and [[InputEventKey GD#get_keycode_with_modifiers|InputEventKey.get_keycode_with_modifiers()]].=== get_latin_keyboard_variant ===*  [[String GD|String]] '''get_latin_keyboard_variant ( )''' constReturns the current latin keyboard variant as a String.Possible return values are: {{Span|"QWERTY"}}, {{Span|"AZERTY"}}, {{Span|"QZERTY"}}, {{Span|"DVORAK"}}, {{Span|"NEO"}}, {{Span|"COLEMAK"}} or {{Span|"ERROR"}}.'''Note:''' This method is implemented on Linux, macOS and Windows. Returns {{Span|"QWERTY"}} on unsupported platforms.=== get_locale ===*  [[String GD|String]] '''get_locale ( )''' constReturns the host OS locale.=== get_model_name ===*  [[String GD|String]] '''get_model_name ( )''' constReturns the model name of the current device.'''Note:''' This method is implemented on Android and iOS. Returns {{Span|"GenericDevice"}} on unsupported platforms.=== get_name ===*  [[String GD|String]] '''get_name ( )''' constReturns the name of the host OS. Possible values are: {{Span|"Android"}}, {{Span|"Haiku"}}, {{Span|"iOS"}}, {{Span|"HTML5"}}, {{Span|"OSX"}}, {{Span|"Server"}}, {{Span|"Windows"}}, {{Span|"UWP"}}, {{Span|"X11"}}.=== get_process_id ===*  int '''get_process_id ( )''' constReturns the project's process ID.'''Note:''' This method is implemented on Android, iOS, Linux, macOS and Windows.=== get_processor_count ===*  int '''get_processor_count ( )''' constReturns the number of threads available on the host machine.=== get_real_window_size ===*  [[Vector2 GD|Vector2]] '''get_real_window_size ( )''' constReturns the window size including decorations like window borders.=== get_screen_count ===*  int '''get_screen_count ( )''' constReturns the number of displays attached to the host machine.=== get_screen_dpi ===*  int '''get_screen_dpi''' '''(''' int screen=-1 ''')''' constReturns the dots per inch density of the specified screen. If {{Span|screen}} is {{Span|-1}} (the default value), the current screen will be used.On Android devices, the actual screen densities are grouped into six generalized densities:::       ldpi - 120 dpi       mdpi - 160 dpi       hdpi - 240 dpi      xhdpi - 320 dpi     xxhdpi - 480 dpi    xxxhdpi - 640 dpi'''Note:''' This method is implemented on Android, Linux, macOS and Windows. Returns {{Span|72}} on unsupported platforms.=== get_screen_position ===*  [[Vector2 GD|Vector2]] '''get_screen_position''' '''(''' int screen=-1 ''')''' constReturns the position of the specified screen by index. If {{Span|screen}} is {{Span|-1}} (the default value), the current screen will be used.=== get_screen_size ===*  [[Vector2 GD|Vector2]] '''get_screen_size''' '''(''' int screen=-1 ''')''' constReturns the dimensions in pixels of the specified screen. If {{Span|screen}} is {{Span|-1}} (the default value), the current screen will be used.=== get_splash_tick_msec ===*  int '''get_splash_tick_msec ( )''' constReturns the amount of time in milliseconds it took for the boot logo to appear.=== get_static_memory_peak_usage ===*  int '''get_static_memory_peak_usage ( )''' constReturns the maximum amount of static memory used (only works in debug).=== get_static_memory_usage ===*  int '''get_static_memory_usage ( )''' constReturns the amount of static memory being used by the program in bytes.=== get_system_dir ===*  [[String GD|String]] '''get_system_dir''' '''(''' [[#SystemDir|SystemDir]] dir ''')''' constReturns the actual path to commonly used folders across different platforms. Available locations are specified in [[#SystemDir|SystemDir]].'''Note:''' This method is implemented on Android, Linux, macOS and Windows.=== get_system_time_msecs ===*  int '''get_system_time_msecs ( )''' constReturns the epoch time of the operating system in milliseconds.=== get_system_time_secs ===*  int '''get_system_time_secs ( )''' constReturns the epoch time of the operating system in seconds.=== get_ticks_msec ===*  int '''get_ticks_msec ( )''' constReturns the amount of time passed in milliseconds since the engine started.=== get_ticks_usec ===*  int '''get_ticks_usec ( )''' constReturns the amount of time passed in microseconds since the engine started.=== get_time ===*  [[Dictionary GD|Dictionary]] '''get_time''' '''(''' bool utc=false ''')''' constReturns current time as a dictionary of keys: hour, minute, second.=== get_time_zone_info ===*  [[Dictionary GD|Dictionary]] '''get_time_zone_info ( )''' constReturns the current time zone as a dictionary with the keys: bias and name.=== get_unique_id ===*  [[String GD|String]] '''get_unique_id ( )''' constReturns a string that is unique to the device.'''Note:''' Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet.=== get_unix_time ===*  int '''get_unix_time ( )''' constReturns the current UNIX epoch timestamp.=== get_unix_time_from_datetime ===*  int '''get_unix_time_from_datetime''' '''(''' [[Dictionary GD|Dictionary]] datetime ''')''' constGets an epoch time value from a dictionary of time values.{{Span|datetime}} must be populated with the following keys: {{Span|year}}, {{Span|month}}, {{Span|day}}, {{Span|hour}}, {{Span|minute}}, {{Span|second}}.You can pass the output from [[#get_datetime_from_unix_time|get_datetime_from_unix_time]] directly into this function. Daylight Savings Time ({{Span|dst}}), if present, is ignored.=== get_user_data_dir ===*  [[String GD|String]] '''get_user_data_dir ( )''' constReturns the absolute directory path where user data is written ({{Span|user://}}).On Linux, this is {{Span|~/.local/share/godot/app_userdata/[project_name]}}, or {{Span|~/.local/share/[custom_name]}} if {{Span|use_custom_user_dir}} is set.On macOS, this is {{Span|~/Library/Application Support/Godot/app_userdata/[project_name]}}, or {{Span|~/Library/Application Support/[custom_name]}} if {{Span|use_custom_user_dir}} is set.On Windows, this is {{Span|%APPDATA%\Godot\app_userdata\[project_name]}}, or {{Span|%APPDATA%\[custom_name]}} if {{Span|use_custom_user_dir}} is set. {{Span|%APPDATA%}} expands to {{Span|%USERPROFILE%\AppData\Roaming}}.If the project name is empty, {{Span|user://}} falls back to {{Span|res://}}.=== get_video_driver_count ===*  int '''get_video_driver_count ( )''' constReturns the number of video drivers supported on the current platform.=== get_video_driver_name ===*  [[String GD|String]] '''get_video_driver_name''' '''(''' [[#VideoDriver|VideoDriver]] driver ''')''' constReturns the name of the video driver matching the given {{Span|driver}} index. This index is a value from [[#VideoDriver|VideoDriver]], and you can use [[#get_current_video_driver|get_current_video_driver]] to get the current backend's index.=== get_virtual_keyboard_height ===*  int '''get_virtual_keyboard_height ( )'''Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or if it is currently hidden.=== get_window_safe_area ===*  [[Rect2 GD|Rect2]] '''get_window_safe_area ( )''' constReturns unobscured area of the window where interactive controls should be rendered.=== global_menu_add_item ===*  void '''global_menu_add_item''' '''(''' [[String GD|String]] menu, [[String GD|String]] label, [[Variant GD|Variant]] id, [[Variant GD|Variant]] meta ''')'''Add a new item with text "label" to global menu. Use "_dock" menu to add item to the macOS dock icon menu.'''Note:''' This method is implemented on macOS.=== global_menu_add_separator ===*  void '''global_menu_add_separator''' '''(''' [[String GD|String]] menu ''')'''Add a separator between items. Separators also occupy an index.'''Note:''' This method is implemented on macOS.=== global_menu_clear ===*  void '''global_menu_clear''' '''(''' [[String GD|String]] menu ''')'''Clear the global menu, in effect removing all items.'''Note:''' This method is implemented on macOS.=== global_menu_remove_item ===*  void '''global_menu_remove_item''' '''(''' [[String GD|String]] menu, int idx ''')'''Removes the item at index "idx" from the global menu. Note that the indexes of items after the removed item are going to be shifted by one.'''Note:''' This method is implemented on macOS.=== has_environment ===*  bool '''has_environment''' '''(''' [[String GD|String]] environment ''')''' constReturns {{Span|true}} if an environment variable exists.=== has_feature ===*  bool '''has_feature''' '''(''' [[String GD|String]] tag_name ''')''' constReturns {{Span|true}} if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the [https://docs.godotengine.org/en/latest/getting_started/workflow/export/feature_tags.html Feature Tags] documentation for more details.'''Note:''' Tag names are case-sensitive.=== has_touchscreen_ui_hint ===*  bool '''has_touchscreen_ui_hint ( )''' constReturns {{Span|true}} if the device has a touchscreen or emulates one.=== has_virtual_keyboard ===*  bool '''has_virtual_keyboard ( )''' constReturns {{Span|true}} if the platform has a virtual keyboard, {{Span|false}} otherwise.=== hide_virtual_keyboard ===*  void '''hide_virtual_keyboard ( )'''Hides the virtual keyboard if it is shown, does nothing otherwise.=== is_debug_build ===*  bool '''is_debug_build ( )''' constReturns {{Span|true}} if the Godot binary used to run the project is a ''debug'' export template, or when running in the editor.Returns {{Span|false}} if the Godot binary used to run the project is a ''release'' export template.To check whether the Godot binary used to run the project is an export template (debug or release), use {{Span|OS.has_feature("standalone")}} instead.=== is_keycode_unicode ===*  bool '''is_keycode_unicode''' '''(''' int code ''')''' constReturns {{Span|true}} if the input keycode corresponds to a Unicode character.=== is_ok_left_and_cancel_right ===*  bool '''is_ok_left_and_cancel_right ( )''' constReturns {{Span|true}} if the '''OK''' button should appear on the left and '''Cancel''' on the right.=== is_stdout_verbose ===*  bool '''is_stdout_verbose ( )''' constReturns {{Span|true}} if the engine was executed with {{Span|-v}} (verbose stdout).=== is_userfs_persistent ===*  bool '''is_userfs_persistent ( )''' constIf {{Span|true}}, the {{Span|user://}} file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.=== is_window_always_on_top ===*  bool '''is_window_always_on_top ( )''' constReturns {{Span|true}} if the window should always be on top of other windows.=== is_window_focused ===*  bool '''is_window_focused ( )''' constReturns {{Span|true}} if the window is currently focused.'''Note:''' Only implemented on desktop platforms. On other platforms, it will always return {{Span|true}}.=== kill ===*  [[@GlobalScope GD#Error|Error]] '''kill''' '''(''' int pid ''')'''Kill (terminate) the process identified by the given process ID ({{Span|pid}}), e.g. the one returned by [[#execute|execute]] in non-blocking mode.'''Note:''' This method can also be used to kill processes that were not spawned by the game.'''Note:''' This method is implemented on Android, iOS, Linux, macOS and Windows.=== move_window_to_foreground ===*  void '''move_window_to_foreground ( )'''Moves the window to the front.'''Note:''' This method is implemented on Linux, macOS and Windows.=== native_video_is_playing ===*  bool '''native_video_is_playing ( )'''Returns {{Span|true}} if native video is playing.'''Note:''' This method is implemented on Android and iOS.=== native_video_pause ===*  void '''native_video_pause ( )'''Pauses native video playback.'''Note:''' This method is implemented on Android and iOS.=== native_video_play ===*  [[@GlobalScope GD#Error|Error]] '''native_video_play''' '''(''' [[String GD|String]] path, float volume, [[String GD|String]] audio_track, [[String GD|String]] subtitle_track ''')'''Plays native video from the specified path, at the given volume and with audio and subtitle tracks.'''Note:''' This method is implemented on Android and iOS, and the current Android implementation does not support the {{Span|volume}}, {{Span|audio_track}} and {{Span|subtitle_track}} options.=== native_video_stop ===*  void '''native_video_stop ( )'''Stops native video playback.'''Note:''' This method is implemented on Android and iOS.=== native_video_unpause ===*  void '''native_video_unpause ( )'''Resumes native video playback.'''Note:''' This method is implemented on Android and iOS.=== open_midi_inputs ===*  void '''open_midi_inputs ( )'''Initialises the singleton for the system MIDI driver.'''Note:''' This method is implemented on Linux, macOS and Windows.=== print_all_resources ===*  void '''print_all_resources''' '''(''' [[String GD|String]] tofile="" ''')'''Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in {{Span|tofile}}.=== print_all_textures_by_size ===*  void '''print_all_textures_by_size ( )'''Shows the list of loaded textures sorted by size in memory.=== print_resources_by_type ===*  void '''print_resources_by_type''' '''(''' [[PackedStringArray GD|PackedStringArray]] types ''')'''Shows the number of resources loaded by the game of the given types.=== print_resources_in_use ===*  void '''print_resources_in_use''' '''(''' bool short=false ''')'''Shows all resources currently used by the game.=== request_attention ===*  void '''request_attention ( )'''Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.'''Note:''' This method is implemented on Linux, macOS and Windows.=== request_permission ===*  bool '''request_permission''' '''(''' [[String GD|String]] name ''')'''At the moment this function is only used by {{Span|AudioDriverOpenSL}} to request permission for {{Span|RECORD_AUDIO}} on Android.=== request_permissions ===*  bool '''request_permissions ( )'''With this function you can request dangerous permissions since normal permissions are automatically granted at install time in Android application.'''Note:''' This method is implemented on Android.=== set_icon ===*  void '''set_icon''' '''(''' [[Image GD|Image]] icon ''')'''Sets the game's icon using an [[Image GD|Image]] resource.The same image is used for window caption, taskbar/dock and window selection dialog. Image is scaled as needed.'''Note:''' This method is implemented on HTML5, Linux, macOS and Windows.=== set_ime_active ===*  void '''set_ime_active''' '''(''' bool active ''')'''Sets whether IME input mode should be enabled.If active IME handles key events before the application and creates an composition string and suggestion list.Application can retrieve the composition status by using [[#get_ime_selection|get_ime_selection]] and [[#get_ime_text|get_ime_text]] functions.Completed composition string is committed when input is finished.'''Note:''' This method is implemented on Linux, macOS and Windows.=== set_ime_position ===*  void '''set_ime_position''' '''(''' [[Vector2 GD|Vector2]] position ''')'''Sets position of IME suggestion list popup (in window coordinates).'''Note:''' This method is implemented on Linux, macOS and Windows.=== set_native_icon ===*  void '''set_native_icon''' '''(''' [[String GD|String]] filename ''')'''Sets the game's icon using a multi-size platform-specific icon file ({{Span|*.ico}} on Windows and {{Span|*.icns}} on macOS).Appropriate size sub-icons are used for window caption, taskbar/dock and window selection dialog.'''Note:''' This method is implemented on macOS and Windows.=== set_thread_name ===*  [[@GlobalScope GD#Error|Error]] '''set_thread_name''' '''(''' [[String GD|String]] name ''')'''Sets the name of the current thread.=== set_use_file_access_save_and_swap ===*  void '''set_use_file_access_save_and_swap''' '''(''' bool enabled ''')'''Enables backup saves if {{Span|enabled}} is {{Span|true}}.=== set_window_always_on_top ===*  void '''set_window_always_on_top''' '''(''' bool enabled ''')'''Sets whether the window should always be on top.'''Note:''' This method is implemented on Linux, macOS and Windows.=== set_window_title ===*  void '''set_window_title''' '''(''' [[String GD|String]] title ''')'''Sets the window title to the specified string.'''Note:''' This should be used sporadically. Don't set this every frame, as that will negatively affect performance on some window managers.'''Note:''' This method is implemented on HTML5, Linux, macOS and Windows.=== shell_open ===*  [[@GlobalScope GD#Error|Error]] '''shell_open''' '''(''' [[String GD|String]] uri ''')'''Requests the OS to open a resource with the most appropriate program. For example:*  {{Span|OS.shell_open("C:\\Users\name\Downloads")}} on Windows opens the file explorer at the user's Downloads folder.*  {{Span|OS.shell_open("https://godotengine.org")}} opens the default web browser on the official Godot website.*  {{Span|OS.shell_open("mailto:example@example.com")}} opens the default email client with the "To" field set to {{Span|example@example.com}}. See `Customizing {{Span|mailto:}} Links <https://blog.escapecreative.com/customizing-mailto-links/>`_ for a list of fields that can be added.'''Note:''' This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows.=== show_virtual_keyboard ===*  void '''show_virtual_keyboard''' '''(''' [[String GD|String]] existing_text="" ''')'''Shows the virtual keyboard if the platform has one. The {{Span|existing_text}} parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).'''Note:''' This method is implemented on Android, iOS and UWP.