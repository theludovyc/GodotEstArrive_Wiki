__NOTOC__'''Inherits:''' [[Object GD|Object]]'''Inherited By:''' [[BulletPhysicsDirectBodyState GD|BulletPhysicsDirectBodyState]]Direct access object to a physics body in the [[PhysicsServer GD|PhysicsServer]].== Description ==Provides direct access to a physics body in the [[PhysicsServer GD|PhysicsServer]], allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See [[RigidBody GD#_integrate_forces|_integrate_forces]].== Properties =={| class="wikitable | [[Vector3 GD|Vector3]]|| [[#angular_velocity|angular_velocity]]             |-| [[Vector3 GD|Vector3]]|| [[#center_of_mass|center_of_mass]]                 |-| [[Vector3 GD|Vector3]]|| [[#inverse_inertia|inverse_inertia]]               |-| float|| [[#inverse_mass|inverse_mass]]                     |-| [[Vector3 GD|Vector3]]|| [[#linear_velocity|linear_velocity]]               |-| [[Basis GD|Basis]]|| [[#principal_inertia_axes|principal_inertia_axes]] |-| bool|| [[#sleeping|sleeping]]                             |-| float|| [[#step|step]]                                     |-| float|| [[#total_angular_damp|total_angular_damp]]         |-| [[Vector3 GD|Vector3]]|| [[#total_gravity|total_gravity]]                   |-| float|| [[#total_linear_damp|total_linear_damp]]           |-| [[Transform GD|Transform]]|| [[#transform|transform]]                           |}== Methods =={| class="wikitable | void|| [[#add_central_force|add_central_force]] '''(''' [[Vector3 GD|Vector3]] force ''')'''                                                     |-| void|| [[#add_force|add_force]] '''(''' [[Vector3 GD|Vector3]] force, [[Vector3 GD|Vector3]] position ''')'''                             |-| void|| [[#add_torque|add_torque]] '''(''' [[Vector3 GD|Vector3]] torque ''')'''                                                                  |-| void|| [[#apply_central_impulse|apply_central_impulse]] '''(''' [[Vector3 GD|Vector3]] j ''')'''                                                 |-| void|| [[#apply_impulse|apply_impulse]] '''(''' [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] j ''')'''                         |-| void|| [[#apply_torque_impulse|apply_torque_impulse]] '''(''' [[Vector3 GD|Vector3]] j ''')'''                                                   |-| [[RID GD|RID]]|| [[#get_contact_collider|get_contact_collider]] '''(''' int contact_idx ''')''' const                                           |-| int|| [[#get_contact_collider_id|get_contact_collider_id]] '''(''' int contact_idx ''')''' const                                     |-| [[Object GD|Object]]|| [[#get_contact_collider_object|get_contact_collider_object]] '''(''' int contact_idx ''')''' const                             |-| [[Vector3 GD|Vector3]]|| [[#get_contact_collider_position|get_contact_collider_position]] '''(''' int contact_idx ''')''' const                         |-| int|| [[#get_contact_collider_shape|get_contact_collider_shape]] '''(''' int contact_idx ''')''' const                               |-| [[Vector3 GD|Vector3]]|| [[#get_contact_collider_velocity_at_position|get_contact_collider_velocity_at_position]] '''(''' int contact_idx ''')''' const |-| int|| [[#get_contact_count|get_contact_count]] '''(''' ''')''' const                                                                                   |-| float|| [[#get_contact_impulse|get_contact_impulse]] '''(''' int contact_idx ''')''' const                                             |-| [[Vector3 GD|Vector3]]|| [[#get_contact_local_normal|get_contact_local_normal]] '''(''' int contact_idx ''')''' const                                   |-| [[Vector3 GD|Vector3]]|| [[#get_contact_local_position|get_contact_local_position]] '''(''' int contact_idx ''')''' const                               |-| int|| [[#get_contact_local_shape|get_contact_local_shape]] '''(''' int contact_idx ''')''' const                                     |-| [[PhysicsDirectSpaceState GD|PhysicsDirectSpaceState]]|| [[#get_space_state|get_space_state]] '''(''' ''')'''                                                                                             |-| void|| [[#integrate_forces|integrate_forces]] '''(''' ''')'''                                                                                           |}== Property Descriptions ===== angular_velocity ===*  [[Vector3 GD|Vector3]] '''angular_velocity'''{| class="wikitable | ''Setter''|| set_angular_velocity(value) |-| ''Getter''|| get_angular_velocity()      |}The body's rotational velocity.=== center_of_mass ===*  [[Vector3 GD|Vector3]] '''center_of_mass'''{| class="wikitable | ''Getter''|| get_center_of_mass() |}=== inverse_inertia ===*  [[Vector3 GD|Vector3]] '''inverse_inertia'''{| class="wikitable | ''Getter''|| get_inverse_inertia() |}The inverse of the inertia of the body.=== inverse_mass ===*  float '''inverse_mass'''{| class="wikitable | ''Getter''|| get_inverse_mass() |}The inverse of the mass of the body.=== linear_velocity ===*  [[Vector3 GD|Vector3]] '''linear_velocity'''{| class="wikitable | ''Setter''|| set_linear_velocity(value) |-| ''Getter''|| get_linear_velocity()      |}The body's linear velocity.=== principal_inertia_axes ===*  [[Basis GD|Basis]] '''principal_inertia_axes'''{| class="wikitable | ''Getter''|| get_principal_inertia_axes() |}=== sleeping ===*  bool '''sleeping'''{| class="wikitable | ''Setter''|| set_sleep_state(value) |-| ''Getter''|| is_sleeping()          |}If {{Span|true}}, this body is currently sleeping (not active).=== step ===*  float '''step'''{| class="wikitable | ''Getter''|| get_step() |}The timestep (delta) used for the simulation.=== total_angular_damp ===*  float '''total_angular_damp'''{| class="wikitable | ''Getter''|| get_total_angular_damp() |}The rate at which the body stops rotating, if there are not any other forces moving it.=== total_gravity ===*  [[Vector3 GD|Vector3]] '''total_gravity'''{| class="wikitable | ''Getter''|| get_total_gravity() |}The total gravity vector being currently applied to this body.=== total_linear_damp ===*  float '''total_linear_damp'''{| class="wikitable | ''Getter''|| get_total_linear_damp() |}The rate at which the body stops moving, if there are not any other forces moving it.=== transform ===*  [[Transform GD|Transform]] '''transform'''{| class="wikitable | ''Setter''|| set_transform(value) |-| ''Getter''|| get_transform()      |}The body's transformation matrix.== Method Descriptions ===== add_central_force ===*  void '''add_central_force''' '''(''' [[Vector3 GD|Vector3]] force ''')'''Adds a constant directional force without affecting rotation.This is equivalent to {{Span|add_force(force, Vector3(0,0,0))}}.=== add_force ===*  void '''add_force''' '''(''' [[Vector3 GD|Vector3]] force, [[Vector3 GD|Vector3]] position ''')'''Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.=== add_torque ===*  void '''add_torque''' '''(''' [[Vector3 GD|Vector3]] torque ''')'''Adds a constant rotational force without affecting position.=== apply_central_impulse ===*  void '''apply_central_impulse''' '''(''' [[Vector3 GD|Vector3]] j ''')'''Applies a single directional impulse without affecting rotation.This is equivalent to {{Span|apply_impulse(Vector3(0, 0, 0), impulse)}}.=== apply_impulse ===*  void '''apply_impulse''' '''(''' [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] j ''')'''Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.=== apply_torque_impulse ===*  void '''apply_torque_impulse''' '''(''' [[Vector3 GD|Vector3]] j ''')'''Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the vector {{Span|j}} passed as parameter.=== get_contact_collider ===*  [[RID GD|RID]] '''get_contact_collider''' '''(''' int contact_idx ''')''' constReturns the collider's [[RID GD|RID]].=== get_contact_collider_id ===*  int '''get_contact_collider_id''' '''(''' int contact_idx ''')''' constReturns the collider's object id.=== get_contact_collider_object ===*  [[Object GD|Object]] '''get_contact_collider_object''' '''(''' int contact_idx ''')''' constReturns the collider object.=== get_contact_collider_position ===*  [[Vector3 GD|Vector3]] '''get_contact_collider_position''' '''(''' int contact_idx ''')''' constReturns the contact position in the collider.=== get_contact_collider_shape ===*  int '''get_contact_collider_shape''' '''(''' int contact_idx ''')''' constReturns the collider's shape index.=== get_contact_collider_velocity_at_position ===*  [[Vector3 GD|Vector3]] '''get_contact_collider_velocity_at_position''' '''(''' int contact_idx ''')''' constReturns the linear velocity vector at the collider's contact point.=== get_contact_count ===*  int '''get_contact_count ( )''' constReturns the number of contacts this body has with other bodies.'''Note:''' By default, this returns 0 unless bodies are configured to monitor contacts. See [[RigidBody GD#contact_monitor|RigidBody.contact_monitor()]].=== get_contact_impulse ===*  float '''get_contact_impulse''' '''(''' int contact_idx ''')''' constImpulse created by the contact. Only implemented for Bullet physics.=== get_contact_local_normal ===*  [[Vector3 GD|Vector3]] '''get_contact_local_normal''' '''(''' int contact_idx ''')''' constReturns the local normal at the contact point.=== get_contact_local_position ===*  [[Vector3 GD|Vector3]] '''get_contact_local_position''' '''(''' int contact_idx ''')''' constReturns the local position of the contact point.=== get_contact_local_shape ===*  int '''get_contact_local_shape''' '''(''' int contact_idx ''')''' constReturns the local shape index of the collision.=== get_space_state ===*  [[PhysicsDirectSpaceState GD|PhysicsDirectSpaceState]] '''get_space_state ( )'''Returns the current state of the space, useful for queries.=== integrate_forces ===*  void '''integrate_forces ( )'''Calls the built-in force integration code.