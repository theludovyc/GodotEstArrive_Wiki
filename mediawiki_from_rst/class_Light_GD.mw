__NOTOC__'''Inherits:''' [[VisualInstance GD|VisualInstance]] '''<''' [[Spatial GD|Spatial]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[DirectionalLight GD|DirectionalLight]], [[OmniLight GD|OmniLight]], [[SpotLight GD|SpotLight]]Provides a base class for different kinds of light nodes.== Description ==Light is the abstract base class for light nodes, so it shouldn't be used directly (it can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.== Tutorials ==*  :doc:`../tutorials/3d/lights_and_shadows`== Properties =={| class="wikitable | bool|| [[#editor_only|editor_only]]|| {{Span|false}}               |-| [[#BakeMode|BakeMode]]|| [[#light_bake_mode|light_bake_mode]]|| {{Span|1}}                   |-| [[Color GD|Color]]|| [[#light_color|light_color]]|| {{Span|Color( 1, 1, 1, 1 )}} |-| int|| [[#light_cull_mask|light_cull_mask]]|| {{Span|4294967295}}          |-| float|| [[#light_energy|light_energy]]|| {{Span|1.0}}                 |-| float|| [[#light_indirect_energy|light_indirect_energy]]|| {{Span|1.0}}                 |-| bool|| [[#light_negative|light_negative]]|| {{Span|false}}               |-| float|| [[#light_specular|light_specular]]|| {{Span|0.5}}                 |-| float|| [[#shadow_bias|shadow_bias]]|| {{Span|0.15}}                |-| [[Color GD|Color]]|| [[#shadow_color|shadow_color]]|| {{Span|Color( 0, 0, 0, 1 )}} |-| float|| [[#shadow_contact|shadow_contact]]|| {{Span|0.0}}                 |-| bool|| [[#shadow_enabled|shadow_enabled]]|| {{Span|false}}               |-| bool|| [[#shadow_reverse_cull_face|shadow_reverse_cull_face]]|| {{Span|false}}               |}== Methods =={| class="wikitable | float|| [[#get_param|get_param]] '''(''' [[#Param|Param]] param ''')''' const                            |-| void|| [[#set_param|set_param]] '''(''' [[#Param|Param]] param, float value ''')''' |}== Enumerations ===== Param ====== PARAM_ENERGY ====== PARAM_INDIRECT_ENERGY ====== PARAM_SPECULAR ====== PARAM_RANGE ====== PARAM_ATTENUATION ====== PARAM_SPOT_ANGLE ====== PARAM_SPOT_ATTENUATION ====== PARAM_CONTACT_SHADOW_SIZE ====== PARAM_SHADOW_MAX_DISTANCE ====== PARAM_SHADOW_SPLIT_1_OFFSET ====== PARAM_SHADOW_SPLIT_2_OFFSET ====== PARAM_SHADOW_SPLIT_3_OFFSET ====== PARAM_SHADOW_FADE_START ====== PARAM_SHADOW_NORMAL_BIAS ====== PARAM_SHADOW_BIAS ====== PARAM_SHADOW_BIAS_SPLIT_SCALE ====== PARAM_MAX ===enum '''Param''':*  '''PARAM_ENERGY''' = '''0'''  Constant for accessing [[#light_energy|light_energy]].*  '''PARAM_INDIRECT_ENERGY''' = '''1'''  Constant for accessing [[#light_indirect_energy|light_indirect_energy]].*  '''PARAM_SPECULAR''' = '''2'''  Constant for accessing [[#light_specular|light_specular]].*  '''PARAM_RANGE''' = '''3'''  Constant for accessing [[OmniLight GD#omni_range|OmniLight.omni_range()]] or [[SpotLight GD#spot_range|SpotLight.spot_range()]].*  '''PARAM_ATTENUATION''' = '''4'''  Constant for accessing [[OmniLight GD#omni_attenuation|OmniLight.omni_attenuation()]] or [[SpotLight GD#spot_attenuation|SpotLight.spot_attenuation()]].*  '''PARAM_SPOT_ANGLE''' = '''5'''  Constant for accessing [[SpotLight GD#spot_angle|SpotLight.spot_angle()]].*  '''PARAM_SPOT_ATTENUATION''' = '''6'''  Constant for accessing [[SpotLight GD#spot_angle_attenuation|SpotLight.spot_angle_attenuation()]].*  '''PARAM_CONTACT_SHADOW_SIZE''' = '''7'''  Constant for accessing [[#shadow_contact|shadow_contact]].*  '''PARAM_SHADOW_MAX_DISTANCE''' = '''8'''  Constant for accessing [[DirectionalLight GD#directional_shadow_max_distance|DirectionalLight.directional_shadow_max_distance()]].*  '''PARAM_SHADOW_SPLIT_1_OFFSET''' = '''9'''  Constant for accessing [[DirectionalLight GD#directional_shadow_split_1|DirectionalLight.directional_shadow_split_1()]].*  '''PARAM_SHADOW_SPLIT_2_OFFSET''' = '''10'''  Constant for accessing [[DirectionalLight GD#directional_shadow_split_2|DirectionalLight.directional_shadow_split_2()]].*  '''PARAM_SHADOW_SPLIT_3_OFFSET''' = '''11'''  Constant for accessing [[DirectionalLight GD#directional_shadow_split_3|DirectionalLight.directional_shadow_split_3()]].*  '''PARAM_SHADOW_FADE_START''' = '''12'''*  '''PARAM_SHADOW_NORMAL_BIAS''' = '''13'''  Constant for accessing [[DirectionalLight GD#directional_shadow_normal_bias|DirectionalLight.directional_shadow_normal_bias()]].*  '''PARAM_SHADOW_BIAS''' = '''14'''  Constant for accessing [[#shadow_bias|shadow_bias]].*  '''PARAM_SHADOW_BIAS_SPLIT_SCALE''' = '''15'''  Constant for accessing [[DirectionalLight GD#directional_shadow_bias_split_scale|DirectionalLight.directional_shadow_bias_split_scale()]].*  '''PARAM_MAX''' = '''16'''  Represents the size of the [[#Param|Param]] enum.=== BakeMode ====== BAKE_DISABLED ====== BAKE_INDIRECT ====== BAKE_ALL ===enum '''BakeMode''':*  '''BAKE_DISABLED''' = '''0'''  Light is ignored when baking.'''Note:''' Hiding a light does ''not'' affect baking.*  '''BAKE_INDIRECT''' = '''1'''  Only indirect lighting will be baked (default).*  '''BAKE_ALL''' = '''2'''  Both direct and indirect light will be baked.'''Note:''' You should hide the light if you don't want it to appear twice (dynamic and baked).== Property Descriptions ===== editor_only ===*  bool '''editor_only'''{| class="wikitable | ''Default''|| {{Span|false}}              |-| ''Setter''|| set_editor_only(value) |-| ''Getter''|| is_editor_only()       |}If {{Span|true}}, the light only appears in the editor and will not be visible at runtime.=== light_bake_mode ===*  [[#BakeMode|BakeMode]] '''light_bake_mode'''{| class="wikitable | ''Default''|| {{Span|1}}                |-| ''Setter''|| set_bake_mode(value) |-| ''Getter''|| get_bake_mode()      |}The light's bake mode. See [[#BakeMode|BakeMode]].=== light_color ===*  [[Color GD|Color]] '''light_color'''{| class="wikitable | ''Default''|| {{Span|Color( 1, 1, 1, 1 )}} |-| ''Setter''|| set_color(value)        |-| ''Getter''|| get_color()             |}The light's color.=== light_cull_mask ===*  int '''light_cull_mask'''{| class="wikitable | ''Default''|| {{Span|4294967295}}       |-| ''Setter''|| set_cull_mask(value) |-| ''Getter''|| get_cull_mask()      |}The light will affect objects in the selected layers.=== light_energy ===*  float '''light_energy'''{| class="wikitable | ''Default''|| {{Span|1.0}}          |-| ''Setter''|| set_param(value) |-| ''Getter''|| get_param()      |}The light's strength multiplier.=== light_indirect_energy ===*  float '''light_indirect_energy'''{| class="wikitable | ''Default''|| {{Span|1.0}}          |-| ''Setter''|| set_param(value) |-| ''Getter''|| get_param()      |}Secondary multiplier used with indirect light (light bounces). Used with [[GIProbe GD|GIProbe]].=== light_negative ===*  bool '''light_negative'''{| class="wikitable | ''Default''|| {{Span|false}}           |-| ''Setter''|| set_negative(value) |-| ''Getter''|| is_negative()       |}If {{Span|true}}, the light's effect is reversed, darkening areas and casting bright shadows.=== light_specular ===*  float '''light_specular'''{| class="wikitable | ''Default''|| {{Span|0.5}}          |-| ''Setter''|| set_param(value) |-| ''Getter''|| get_param()      |}The intensity of the specular blob in objects affected by the light. At {{Span|0}} the light becomes a pure diffuse light.=== shadow_bias ===*  float '''shadow_bias'''{| class="wikitable | ''Default''|| {{Span|0.15}}         |-| ''Setter''|| set_param(value) |-| ''Getter''|| get_param()      |}Used to adjust shadow appearance. Too small a value results in self-shadowing, while too large a value causes shadows to separate from casters. Adjust as needed.=== shadow_color ===*  [[Color GD|Color]] '''shadow_color'''{| class="wikitable | ''Default''|| {{Span|Color( 0, 0, 0, 1 )}} |-| ''Setter''|| set_shadow_color(value) |-| ''Getter''|| get_shadow_color()      |}The color of shadows cast by this light.=== shadow_contact ===*  float '''shadow_contact'''{| class="wikitable | ''Default''|| {{Span|0.0}}          |-| ''Setter''|| set_param(value) |-| ''Getter''|| get_param()      |}Attempts to reduce [[#shadow_bias|shadow_bias]] gap.=== shadow_enabled ===*  bool '''shadow_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}         |-| ''Setter''|| set_shadow(value) |-| ''Getter''|| has_shadow()      |}If {{Span|true}}, the light will cast shadows.=== shadow_reverse_cull_face ===*  bool '''shadow_reverse_cull_face'''{| class="wikitable | ''Default''|| {{Span|false}}                           |-| ''Setter''|| set_shadow_reverse_cull_face(value) |-| ''Getter''|| get_shadow_reverse_cull_face()      |}If {{Span|true}}, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with [[GeometryInstance GD#SHADOW_CASTING_SETTING_DOUBLE_SIDED|GeometryInstance.SHADOW_CASTING_SETTING_DOUBLE_SIDED()]].== Method Descriptions ===== get_param ===*  float '''get_param''' '''(''' [[#Param|Param]] param ''')''' constReturns the value of the specified [[#Param|Param]] parameter.=== set_param ===*  void '''set_param''' '''(''' [[#Param|Param]] param, float value ''')'''Sets the value of the specified [[#Param|Param]] parameter.