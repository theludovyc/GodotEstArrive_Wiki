__NOTOC__'''Inherits:''' [[Object GD|Object]]Helper node to calculate generic geometry operations.== Description ==Geometry provides users with a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations.== Methods =={| class="wikitable | [[Array GD|Array]]|| [[#build_box_planes|build_box_planes]] '''(''' [[Vector3 GD|Vector3]] extents ''')'''                                                                                                                                                                                    |-| [[Array GD|Array]]|| [[#build_capsule_planes|build_capsule_planes]] '''(''' float radius, float height, int sides, int lats, Vector3.Axis axis=2 ''')'''                                                                 |-| [[Array GD|Array]]|| [[#build_cylinder_planes|build_cylinder_planes]] '''(''' float radius, float height, int sides, Vector3.Axis axis=2 ''')'''                                                                                           |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#clip_polygon|clip_polygon]] '''(''' [[PackedVector3Array GD|PackedVector3Array]] points, [[Plane GD|Plane]] plane ''')'''                                                                                                                                      |-| [[Array GD|Array]]|| [[#clip_polygons_2d|clip_polygons_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''                                                                                             |-| [[Array GD|Array]]|| [[#clip_polyline_with_polygon_2d|clip_polyline_with_polygon_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polyline, [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''                                                                      |-| [[PackedVector2Array GD|PackedVector2Array]]|| [[#convex_hull_2d|convex_hull_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] points ''')'''                                                                                                                                                                   |-| [[Array GD|Array]]|| [[#exclude_polygons_2d|exclude_polygons_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''                                                                                       |-| [[Vector3 GD|Vector3]]|| [[#get_closest_point_to_segment|get_closest_point_to_segment]] '''(''' [[Vector3 GD|Vector3]] point, [[Vector3 GD|Vector3]] s1, [[Vector3 GD|Vector3]] s2 ''')'''                                                                                          |-| [[Vector2 GD|Vector2]]|| [[#get_closest_point_to_segment_2d|get_closest_point_to_segment_2d]] '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] s1, [[Vector2 GD|Vector2]] s2 ''')'''                                                                                    |-| [[Vector3 GD|Vector3]]|| [[#get_closest_point_to_segment_uncapped|get_closest_point_to_segment_uncapped]] '''(''' [[Vector3 GD|Vector3]] point, [[Vector3 GD|Vector3]] s1, [[Vector3 GD|Vector3]] s2 ''')'''                                                                        |-| [[Vector2 GD|Vector2]]|| [[#get_closest_point_to_segment_uncapped_2d|get_closest_point_to_segment_uncapped_2d]] '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] s1, [[Vector2 GD|Vector2]] s2 ''')'''                                                                  |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#get_closest_points_between_segments|get_closest_points_between_segments]] '''(''' [[Vector3 GD|Vector3]] p1, [[Vector3 GD|Vector3]] p2, [[Vector3 GD|Vector3]] q1, [[Vector3 GD|Vector3]] q2 ''')'''                                             |-| [[PackedVector2Array GD|PackedVector2Array]]|| [[#get_closest_points_between_segments_2d|get_closest_points_between_segments_2d]] '''(''' [[Vector2 GD|Vector2]] p1, [[Vector2 GD|Vector2]] q1, [[Vector2 GD|Vector2]] p2, [[Vector2 GD|Vector2]] q2 ''')'''                                       |-| int|| [[#get_uv84_normal_bit|get_uv84_normal_bit]] '''(''' [[Vector3 GD|Vector3]] normal ''')'''                                                                                                                                                                               |-| [[Array GD|Array]]|| [[#intersect_polygons_2d|intersect_polygons_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''                                                                                   |-| [[Array GD|Array]]|| [[#intersect_polyline_with_polygon_2d|intersect_polyline_with_polygon_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polyline, [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''                                                            |-| bool|| [[#is_point_in_circle|is_point_in_circle]] '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] circle_position, float circle_radius ''')'''                                                                                          |-| bool|| [[#is_point_in_polygon|is_point_in_polygon]] '''(''' [[Vector2 GD|Vector2]] point, [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''                                                                                                                   |-| bool|| [[#is_polygon_clockwise|is_polygon_clockwise]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''                                                                                                                                                      |-| [[Variant GD|Variant]]|| [[#line_intersects_line_2d|line_intersects_line_2d]] '''(''' [[Vector2 GD|Vector2]] from_a, [[Vector2 GD|Vector2]] dir_a, [[Vector2 GD|Vector2]] from_b, [[Vector2 GD|Vector2]] dir_b ''')'''                                                       |-| [[Dictionary GD|Dictionary]]|| [[#make_atlas|make_atlas]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] sizes ''')'''                                                                                                                                                                            |-| [[Array GD|Array]]|| [[#merge_polygons_2d|merge_polygons_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''                                                                                           |-| [[Array GD|Array]]|| [[#offset_polygon_2d|offset_polygon_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon, float delta, [[#PolyJoinType|PolyJoinType]] join_type=0 ''')'''                                                              |-| [[Array GD|Array]]|| [[#offset_polyline_2d|offset_polyline_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polyline, float delta, [[#PolyJoinType|PolyJoinType]] join_type=0, [[#PolyEndType|PolyEndType]] end_type=3 ''')''' |-| bool|| [[#point_is_inside_triangle|point_is_inside_triangle]] '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] a, [[Vector2 GD|Vector2]] b, [[Vector2 GD|Vector2]] c ''')''' const                                                             |-| [[Variant GD|Variant]]|| [[#ray_intersects_triangle|ray_intersects_triangle]] '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] dir, [[Vector3 GD|Vector3]] a, [[Vector3 GD|Vector3]] b, [[Vector3 GD|Vector3]] c ''')'''                                   |-| float|| [[#segment_intersects_circle|segment_intersects_circle]] '''(''' [[Vector2 GD|Vector2]] segment_from, [[Vector2 GD|Vector2]] segment_to, [[Vector2 GD|Vector2]] circle_position, float circle_radius ''')'''                           |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#segment_intersects_convex|segment_intersects_convex]] '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, [[Array GD|Array]] planes ''')'''                                                                                                 |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#segment_intersects_cylinder|segment_intersects_cylinder]] '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, float height, float radius ''')'''                                                           |-| [[Variant GD|Variant]]|| [[#segment_intersects_segment_2d|segment_intersects_segment_2d]] '''(''' [[Vector2 GD|Vector2]] from_a, [[Vector2 GD|Vector2]] to_a, [[Vector2 GD|Vector2]] from_b, [[Vector2 GD|Vector2]] to_b ''')'''                                             |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#segment_intersects_sphere|segment_intersects_sphere]] '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, [[Vector3 GD|Vector3]] sphere_position, float sphere_radius ''')'''                                           |-| [[Variant GD|Variant]]|| [[#segment_intersects_triangle|segment_intersects_triangle]] '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, [[Vector3 GD|Vector3]] a, [[Vector3 GD|Vector3]] b, [[Vector3 GD|Vector3]] c ''')'''                            |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#triangulate_delaunay_2d|triangulate_delaunay_2d]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] points ''')'''                                                                                                                                                 |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#triangulate_polygon|triangulate_polygon]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''                                                                                                                                                        |}== Enumerations ===== PolyBooleanOperation ====== OPERATION_UNION ====== OPERATION_DIFFERENCE ====== OPERATION_INTERSECTION ====== OPERATION_XOR ===enum '''PolyBooleanOperation''':*  '''OPERATION_UNION''' = '''0'''  Create regions where either subject or clip polygons (or both) are filled.*  '''OPERATION_DIFFERENCE''' = '''1'''  Create regions where subject polygons are filled except where clip polygons are filled.*  '''OPERATION_INTERSECTION''' = '''2'''  Create regions where both subject and clip polygons are filled.*  '''OPERATION_XOR''' = '''3'''  Create regions where either subject or clip polygons are filled but not where both are filled.=== PolyJoinType ====== JOIN_SQUARE ====== JOIN_ROUND ====== JOIN_MITER ===enum '''PolyJoinType''':*  '''JOIN_SQUARE''' = '''0'''  Squaring is applied uniformally at all convex edge joins at {{Span|1 * delta}}.*  '''JOIN_ROUND''' = '''1'''  While flattened paths can never perfectly trace an arc, they are approximated by a series of arc chords.*  '''JOIN_MITER''' = '''2'''  There's a necessary limit to mitered joins since offsetting edges that join at very acute angles will produce excessively long and narrow "spikes". For any given edge join, when miter offsetting would exceed that maximum distance, "square" joining is applied.=== PolyEndType ====== END_POLYGON ====== END_JOINED ====== END_BUTT ====== END_SQUARE ====== END_ROUND ===enum '''PolyEndType''':*  '''END_POLYGON''' = '''0'''  Endpoints are joined using the [[#PolyJoinType|PolyJoinType]] value and the path filled as a polygon.*  '''END_JOINED''' = '''1'''  Endpoints are joined using the [[#PolyJoinType|PolyJoinType]] value and the path filled as a polyline.*  '''END_BUTT''' = '''2'''  Endpoints are squared off with no extension.*  '''END_SQUARE''' = '''3'''  Endpoints are squared off and extended by {{Span|delta}} units.*  '''END_ROUND''' = '''4'''  Endpoints are rounded off and extended by {{Span|delta}} units.== Method Descriptions ===== build_box_planes ===*  [[Array GD|Array]] '''build_box_planes''' '''(''' [[Vector3 GD|Vector3]] extents ''')'''Returns an array with 6 [[Plane GD|Plane]]\ s that describe the sides of a box centered at the origin. The box size is defined by {{Span|extents}}, which represents one (positive) corner of the box (i.e. half its actual size).=== build_capsule_planes ===*  [[Array GD|Array]] '''build_capsule_planes''' '''(''' float radius, float height, int sides, int lats, Vector3.Axis axis=2 ''')'''Returns an array of [[Plane GD|Plane]]\ s closely bounding a faceted capsule centered at the origin with radius {{Span|radius}} and height {{Span|height}}. The parameter {{Span|sides}} defines how many planes will be generated for the side part of the capsule, whereas {{Span|lats}} gives the number of latitudinal steps at the bottom and top of the capsule. The parameter {{Span|axis}} describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).=== build_cylinder_planes ===*  [[Array GD|Array]] '''build_cylinder_planes''' '''(''' float radius, float height, int sides, Vector3.Axis axis=2 ''')'''Returns an array of [[Plane GD|Plane]]\ s closely bounding a faceted cylinder centered at the origin with radius {{Span|radius}} and height {{Span|height}}. The parameter {{Span|sides}} defines how many planes will be generated for the round part of the cylinder. The parameter {{Span|axis}} describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).=== clip_polygon ===*  [[PackedVector3Array GD|PackedVector3Array]] '''clip_polygon''' '''(''' [[PackedVector3Array GD|PackedVector3Array]] points, [[Plane GD|Plane]] plane ''')'''Clips the polygon defined by the points in {{Span|points}} against the {{Span|plane}} and returns the points of the clipped polygon.=== clip_polygons_2d ===*  [[Array GD|Array]] '''clip_polygons_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''Clips {{Span|polygon_a}} against {{Span|polygon_b}} and returns an array of clipped polygons. This performs [[Geometry GD#OPERATION_DIFFERENCE|OPERATION_DIFFERENCE]] between polygons. Returns an empty array if {{Span|polygon_b}} completely overlaps {{Span|polygon_a}}.If {{Span|polygon_b}} is enclosed by {{Span|polygon_a}}, returns an outer polygon (boundary) and inner polygon (hole) which could be distinguished by calling [[#is_polygon_clockwise|is_polygon_clockwise]].=== clip_polyline_with_polygon_2d ===*  [[Array GD|Array]] '''clip_polyline_with_polygon_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polyline, [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''Clips {{Span|polyline}} against {{Span|polygon}} and returns an array of clipped polylines. This performs [[Geometry GD#OPERATION_DIFFERENCE|OPERATION_DIFFERENCE]] between the polyline and the polygon. This operation can be thought of as cutting a line with a closed shape.=== convex_hull_2d ===*  [[PackedVector2Array GD|PackedVector2Array]] '''convex_hull_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] points ''')'''Given an array of [[Vector2 GD|Vector2]]\ s, returns the convex hull as a list of points in counterclockwise order. The last point is the same as the first one.=== exclude_polygons_2d ===*  [[Array GD|Array]] '''exclude_polygons_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''Mutually excludes common area defined by intersection of {{Span|polygon_a}} and {{Span|polygon_b}} (see [[#intersect_polygons_2d|intersect_polygons_2d]]) and returns an array of excluded polygons. This performs [[Geometry GD#OPERATION_XOR|OPERATION_XOR]] between polygons. In other words, returns all but common area between polygons.The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [[#is_polygon_clockwise|is_polygon_clockwise]].=== get_closest_point_to_segment ===*  [[Vector3 GD|Vector3]] '''get_closest_point_to_segment''' '''(''' [[Vector3 GD|Vector3]] point, [[Vector3 GD|Vector3]] s1, [[Vector3 GD|Vector3]] s2 ''')'''Returns the 3D point on the 3D segment ({{Span|s1}}, {{Span|s2}}) that is closest to {{Span|point}}. The returned point will always be inside the specified segment.=== get_closest_point_to_segment_2d ===*  [[Vector2 GD|Vector2]] '''get_closest_point_to_segment_2d''' '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] s1, [[Vector2 GD|Vector2]] s2 ''')'''Returns the 2D point on the 2D segment ({{Span|s1}}, {{Span|s2}}) that is closest to {{Span|point}}. The returned point will always be inside the specified segment.=== get_closest_point_to_segment_uncapped ===*  [[Vector3 GD|Vector3]] '''get_closest_point_to_segment_uncapped''' '''(''' [[Vector3 GD|Vector3]] point, [[Vector3 GD|Vector3]] s1, [[Vector3 GD|Vector3]] s2 ''')'''Returns the 3D point on the 3D line defined by ({{Span|s1}}, {{Span|s2}}) that is closest to {{Span|point}}. The returned point can be inside the segment ({{Span|s1}}, {{Span|s2}}) or outside of it, i.e. somewhere on the line extending from the segment.=== get_closest_point_to_segment_uncapped_2d ===*  [[Vector2 GD|Vector2]] '''get_closest_point_to_segment_uncapped_2d''' '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] s1, [[Vector2 GD|Vector2]] s2 ''')'''Returns the 2D point on the 2D line defined by ({{Span|s1}}, {{Span|s2}}) that is closest to {{Span|point}}. The returned point can be inside the segment ({{Span|s1}}, {{Span|s2}}) or outside of it, i.e. somewhere on the line extending from the segment.=== get_closest_points_between_segments ===*  [[PackedVector3Array GD|PackedVector3Array]] '''get_closest_points_between_segments''' '''(''' [[Vector3 GD|Vector3]] p1, [[Vector3 GD|Vector3]] p2, [[Vector3 GD|Vector3]] q1, [[Vector3 GD|Vector3]] q2 ''')'''Given the two 3D segments ({{Span|p1}}, {{Span|p2}}) and ({{Span|q1}}, {{Span|q2}}), finds those two points on the two segments that are closest to each other. Returns a [[PackedVector3Array GD|PackedVector3Array]] that contains this point on ({{Span|p1}}, {{Span|p2}}) as well the accompanying point on ({{Span|q1}}, {{Span|q2}}).=== get_closest_points_between_segments_2d ===*  [[PackedVector2Array GD|PackedVector2Array]] '''get_closest_points_between_segments_2d''' '''(''' [[Vector2 GD|Vector2]] p1, [[Vector2 GD|Vector2]] q1, [[Vector2 GD|Vector2]] p2, [[Vector2 GD|Vector2]] q2 ''')'''Given the two 2D segments ({{Span|p1}}, {{Span|p2}}) and ({{Span|q1}}, {{Span|q2}}), finds those two points on the two segments that are closest to each other. Returns a [[PackedVector2Array GD|PackedVector2Array]] that contains this point on ({{Span|p1}}, {{Span|p2}}) as well the accompanying point on ({{Span|q1}}, {{Span|q2}}).=== get_uv84_normal_bit ===*  int '''get_uv84_normal_bit''' '''(''' [[Vector3 GD|Vector3]] normal ''')'''Used internally by the engine.=== intersect_polygons_2d ===*  [[Array GD|Array]] '''intersect_polygons_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''Intersects {{Span|polygon_a}} with {{Span|polygon_b}} and returns an array of intersected polygons. This performs [[Geometry GD#OPERATION_INTERSECTION|OPERATION_INTERSECTION]] between polygons. In other words, returns common area shared by polygons. Returns an empty array if no intersection occurs.The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [[#is_polygon_clockwise|is_polygon_clockwise]].=== intersect_polyline_with_polygon_2d ===*  [[Array GD|Array]] '''intersect_polyline_with_polygon_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polyline, [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''Intersects {{Span|polyline}} with {{Span|polygon}} and returns an array of intersected polylines. This performs [[Geometry GD#OPERATION_INTERSECTION|OPERATION_INTERSECTION]] between the polyline and the polygon. This operation can be thought of as chopping a line with a closed shape.=== is_point_in_circle ===*  bool '''is_point_in_circle''' '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] circle_position, float circle_radius ''')'''Returns {{Span|true}} if {{Span|point}} is inside the circle or if it's located exactly ''on'' the circle's boundary, otherwise returns {{Span|false}}.=== is_point_in_polygon ===*  bool '''is_point_in_polygon''' '''(''' [[Vector2 GD|Vector2]] point, [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''Returns {{Span|true}} if {{Span|point}} is inside {{Span|polygon}} or if it's located exactly ''on'' polygon's boundary, otherwise returns {{Span|false}}.=== is_polygon_clockwise ===*  bool '''is_polygon_clockwise''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''Returns {{Span|true}} if {{Span|polygon}}'s vertices are ordered in clockwise order, otherwise returns {{Span|false}}.=== line_intersects_line_2d ===*  [[Variant GD|Variant]] '''line_intersects_line_2d''' '''(''' [[Vector2 GD|Vector2]] from_a, [[Vector2 GD|Vector2]] dir_a, [[Vector2 GD|Vector2]] from_b, [[Vector2 GD|Vector2]] dir_b ''')'''Checks if the two lines ({{Span|from_a}}, {{Span|dir_a}}) and ({{Span|from_b}}, {{Span|dir_b}}) intersect. If yes, return the point of intersection as [[Vector2 GD|Vector2]]. If no intersection takes place, returns an empty [[Variant GD|Variant]].'''Note:''' The lines are specified using direction vectors, not end points.=== make_atlas ===*  [[Dictionary GD|Dictionary]] '''make_atlas''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] sizes ''')'''Given an array of [[Vector2 GD|Vector2]]\ s representing tiles, builds an atlas. The returned dictionary has two keys: {{Span|points}} is a vector of [[Vector2 GD|Vector2]] that specifies the positions of each tile, {{Span|size}} contains the overall size of the whole atlas as [[Vector2 GD|Vector2]].=== merge_polygons_2d ===*  [[Array GD|Array]] '''merge_polygons_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon_a, [[PackedVector2Array GD|PackedVector2Array]] polygon_b ''')'''Merges (combines) {{Span|polygon_a}} and {{Span|polygon_b}} and returns an array of merged polygons. This performs [[Geometry GD#OPERATION_UNION|OPERATION_UNION]] between polygons.The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [[#is_polygon_clockwise|is_polygon_clockwise]].=== offset_polygon_2d ===*  [[Array GD|Array]] '''offset_polygon_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon, float delta, [[#PolyJoinType|PolyJoinType]] join_type=0 ''')'''Inflates or deflates {{Span|polygon}} by {{Span|delta}} units (pixels). If {{Span|delta}} is positive, makes the polygon grow outward. If {{Span|delta}} is negative, shrinks the polygon inward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. Returns an empty array if {{Span|delta}} is negative and the absolute value of it approximately exceeds the minimum bounding rectangle dimensions of the polygon.Each polygon's vertices will be rounded as determined by {{Span|join_type}}, see [[#PolyJoinType|PolyJoinType]].The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [[#is_polygon_clockwise|is_polygon_clockwise]].=== offset_polyline_2d ===*  [[Array GD|Array]] '''offset_polyline_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polyline, float delta, [[#PolyJoinType|PolyJoinType]] join_type=0, [[#PolyEndType|PolyEndType]] end_type=3 ''')'''Inflates or deflates {{Span|polyline}} by {{Span|delta}} units (pixels), producing polygons. If {{Span|delta}} is positive, makes the polyline grow outward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. If {{Span|delta}} is negative, returns an empty array.Each polygon's vertices will be rounded as determined by {{Span|join_type}}, see [[#PolyJoinType|PolyJoinType]].Each polygon's endpoints will be rounded as determined by {{Span|end_type}}, see [[#PolyEndType|PolyEndType]].The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [[#is_polygon_clockwise|is_polygon_clockwise]].=== point_is_inside_triangle ===*  bool '''point_is_inside_triangle''' '''(''' [[Vector2 GD|Vector2]] point, [[Vector2 GD|Vector2]] a, [[Vector2 GD|Vector2]] b, [[Vector2 GD|Vector2]] c ''')''' constReturns if {{Span|point}} is inside the triangle specified by {{Span|a}}, {{Span|b}} and {{Span|c}}.=== ray_intersects_triangle ===*  [[Variant GD|Variant]] '''ray_intersects_triangle''' '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] dir, [[Vector3 GD|Vector3]] a, [[Vector3 GD|Vector3]] b, [[Vector3 GD|Vector3]] c ''')'''Tests if the 3D ray starting at {{Span|from}} with the direction of {{Span|dir}} intersects the triangle specified by {{Span|a}}, {{Span|b}} and {{Span|c}}. If yes, returns the point of intersection as [[Vector3 GD|Vector3]]. If no intersection takes place, an empty [[Variant GD|Variant]] is returned.=== segment_intersects_circle ===*  float '''segment_intersects_circle''' '''(''' [[Vector2 GD|Vector2]] segment_from, [[Vector2 GD|Vector2]] segment_to, [[Vector2 GD|Vector2]] circle_position, float circle_radius ''')'''Given the 2D segment ({{Span|segment_from}}, {{Span|segment_to}}), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position {{Span|circle_position}} and has radius {{Span|circle_radius}}. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not).=== segment_intersects_convex ===*  [[PackedVector3Array GD|PackedVector3Array]] '''segment_intersects_convex''' '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, [[Array GD|Array]] planes ''')'''Given a convex hull defined though the [[Plane GD|Plane]]\ s in the array {{Span|planes}}, tests if the segment ({{Span|from}}, {{Span|to}}) intersects with that hull. If an intersection is found, returns a [[PackedVector3Array GD|PackedVector3Array]] containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.=== segment_intersects_cylinder ===*  [[PackedVector3Array GD|PackedVector3Array]] '''segment_intersects_cylinder''' '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, float height, float radius ''')'''Checks if the segment ({{Span|from}}, {{Span|to}}) intersects the cylinder with height {{Span|height}} that is centered at the origin and has radius {{Span|radius}}. If no, returns an empty [[PackedVector3Array GD|PackedVector3Array]]. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.=== segment_intersects_segment_2d ===*  [[Variant GD|Variant]] '''segment_intersects_segment_2d''' '''(''' [[Vector2 GD|Vector2]] from_a, [[Vector2 GD|Vector2]] to_a, [[Vector2 GD|Vector2]] from_b, [[Vector2 GD|Vector2]] to_b ''')'''Checks if the two segments ({{Span|from_a}}, {{Span|to_a}}) and ({{Span|from_b}}, {{Span|to_b}}) intersect. If yes, return the point of intersection as [[Vector2 GD|Vector2]]. If no intersection takes place, returns an empty [[Variant GD|Variant]].=== segment_intersects_sphere ===*  [[PackedVector3Array GD|PackedVector3Array]] '''segment_intersects_sphere''' '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, [[Vector3 GD|Vector3]] sphere_position, float sphere_radius ''')'''Checks if the segment ({{Span|from}}, {{Span|to}}) intersects the sphere that is located at {{Span|sphere_position}} and has radius {{Span|sphere_radius}}. If no, returns an empty [[PackedVector3Array GD|PackedVector3Array]]. If yes, returns a [[PackedVector3Array GD|PackedVector3Array]] containing the point of intersection and the sphere's normal at the point of intersection.=== segment_intersects_triangle ===*  [[Variant GD|Variant]] '''segment_intersects_triangle''' '''(''' [[Vector3 GD|Vector3]] from, [[Vector3 GD|Vector3]] to, [[Vector3 GD|Vector3]] a, [[Vector3 GD|Vector3]] b, [[Vector3 GD|Vector3]] c ''')'''Tests if the segment ({{Span|from}}, {{Span|to}}) intersects the triangle {{Span|a}}, {{Span|b}}, {{Span|c}}. If yes, returns the point of intersection as [[Vector3 GD|Vector3]]. If no intersection takes place, an empty [[Variant GD|Variant]] is returned.=== triangulate_delaunay_2d ===*  [[PackedInt32Array GD|PackedInt32Array]] '''triangulate_delaunay_2d''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] points ''')'''Triangulates the area specified by discrete set of {{Span|points}} such that no point is inside the circumcircle of any resulting triangle. Returns a [[PackedInt32Array GD|PackedInt32Array]] where each triangle consists of three consecutive point indices into {{Span|points}} (i.e. the returned array will have {{Span|n * 3}} elements, with {{Span|n}} being the number of found triangles). If the triangulation did not succeed, an empty [[PackedInt32Array GD|PackedInt32Array]] is returned.=== triangulate_polygon ===*  [[PackedInt32Array GD|PackedInt32Array]] '''triangulate_polygon''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] polygon ''')'''Triangulates the polygon specified by the points in {{Span|polygon}}. Returns a [[PackedInt32Array GD|PackedInt32Array]] where each triangle consists of three consecutive point indices into {{Span|polygon}} (i.e. the returned array will have {{Span|n * 3}} elements, with {{Span|n}} being the number of found triangles). If the triangulation did not succeed, an empty [[PackedInt32Array GD|PackedInt32Array]] is returned.