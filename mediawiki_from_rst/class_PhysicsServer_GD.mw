__NOTOC__'''Inherits:''' [[Object GD|Object]]'''Inherited By:''' [[BulletPhysicsServer GD|BulletPhysicsServer]]Server interface for low-level physics access.== Description ==PhysicsServer is the server responsible for all 3D physics. It can create many kinds of physics objects, but does not insert them on the node tree.== Methods =={| class="wikitable | void|| [[#area_add_shape|area_add_shape]] '''(''' [[RID GD|RID]] area, [[RID GD|RID]] shape, [[Transform GD|Transform]] transform=Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), bool disabled=false ''')'''        |-| void|| [[#area_attach_object_instance_id|area_attach_object_instance_id]] '''(''' [[RID GD|RID]] area, int id ''')'''                                                                                                                |-| void|| [[#area_clear_shapes|area_clear_shapes]] '''(''' [[RID GD|RID]] area ''')'''                                                                                                                                                                    |-| [[RID GD|RID]]|| [[#area_create|area_create]] '''(''' ''')'''                                                                                                                                                                                                           |-| int|| [[#area_get_object_instance_id|area_get_object_instance_id]] '''(''' [[RID GD|RID]] area ''')''' const                                                                                                                                          |-| [[Variant GD|Variant]]|| [[#area_get_param|area_get_param]] '''(''' [[RID GD|RID]] area, [[#AreaParameter|AreaParameter]] param ''')''' const                                                                                                      |-| [[RID GD|RID]]|| [[#area_get_shape|area_get_shape]] '''(''' [[RID GD|RID]] area, int shape_idx ''')''' const                                                                                                                                   |-| int|| [[#area_get_shape_count|area_get_shape_count]] '''(''' [[RID GD|RID]] area ''')''' const                                                                                                                                                        |-| [[Transform GD|Transform]]|| [[#area_get_shape_transform|area_get_shape_transform]] '''(''' [[RID GD|RID]] area, int shape_idx ''')''' const                                                                                                               |-| [[RID GD|RID]]|| [[#area_get_space|area_get_space]] '''(''' [[RID GD|RID]] area ''')''' const                                                                                                                                                                    |-| [[#AreaSpaceOverrideMode|AreaSpaceOverrideMode]]|| [[#area_get_space_override_mode|area_get_space_override_mode]] '''(''' [[RID GD|RID]] area ''')''' const                                                                                                                                        |-| [[Transform GD|Transform]]|| [[#area_get_transform|area_get_transform]] '''(''' [[RID GD|RID]] area ''')''' const                                                                                                                                                            |-| bool|| [[#area_is_ray_pickable|area_is_ray_pickable]] '''(''' [[RID GD|RID]] area ''')''' const                                                                                                                                                        |-| void|| [[#area_remove_shape|area_remove_shape]] '''(''' [[RID GD|RID]] area, int shape_idx ''')'''                                                                                                                                   |-| void|| [[#area_set_area_monitor_callback|area_set_area_monitor_callback]] '''(''' [[RID GD|RID]] area, [[Object GD|Object]] receiver, [[StringName GD|StringName]] method ''')'''                                                        |-| void|| [[#area_set_collision_layer|area_set_collision_layer]] '''(''' [[RID GD|RID]] area, int layer ''')'''                                                                                                                         |-| void|| [[#area_set_collision_mask|area_set_collision_mask]] '''(''' [[RID GD|RID]] area, int mask ''')'''                                                                                                                            |-| void|| [[#area_set_monitor_callback|area_set_monitor_callback]] '''(''' [[RID GD|RID]] area, [[Object GD|Object]] receiver, [[StringName GD|StringName]] method ''')'''                                                                  |-| void|| [[#area_set_monitorable|area_set_monitorable]] '''(''' [[RID GD|RID]] area, bool monitorable ''')'''                                                                                                                         |-| void|| [[#area_set_param|area_set_param]] '''(''' [[RID GD|RID]] area, [[#AreaParameter|AreaParameter]] param, [[Variant GD|Variant]] value ''')'''                                                                       |-| void|| [[#area_set_ray_pickable|area_set_ray_pickable]] '''(''' [[RID GD|RID]] area, bool enable ''')'''                                                                                                                            |-| void|| [[#area_set_shape|area_set_shape]] '''(''' [[RID GD|RID]] area, int shape_idx, [[RID GD|RID]] shape ''')'''                                                                                                            |-| void|| [[#area_set_shape_disabled|area_set_shape_disabled]] '''(''' [[RID GD|RID]] area, int shape_idx, bool disabled ''')'''                                                                                     |-| void|| [[#area_set_shape_transform|area_set_shape_transform]] '''(''' [[RID GD|RID]] area, int shape_idx, [[Transform GD|Transform]] transform ''')'''                                                                        |-| void|| [[#area_set_space|area_set_space]] '''(''' [[RID GD|RID]] area, [[RID GD|RID]] space ''')'''                                                                                                                                             |-| void|| [[#area_set_space_override_mode|area_set_space_override_mode]] '''(''' [[RID GD|RID]] area, [[#AreaSpaceOverrideMode|AreaSpaceOverrideMode]] mode ''')'''                                                                 |-| void|| [[#area_set_transform|area_set_transform]] '''(''' [[RID GD|RID]] area, [[Transform GD|Transform]] transform ''')'''                                                                                                                     |-| void|| [[#body_add_central_force|body_add_central_force]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] force ''')'''                                                                                                                     |-| void|| [[#body_add_collision_exception|body_add_collision_exception]] '''(''' [[RID GD|RID]] body, [[RID GD|RID]] excepted_body ''')'''                                                                                                         |-| void|| [[#body_add_force|body_add_force]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] force, [[Vector3 GD|Vector3]] position ''')'''                                                                                             |-| void|| [[#body_add_shape|body_add_shape]] '''(''' [[RID GD|RID]] body, [[RID GD|RID]] shape, [[Transform GD|Transform]] transform=Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), bool disabled=false ''')'''        |-| void|| [[#body_add_torque|body_add_torque]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] torque ''')'''                                                                                                                                  |-| void|| [[#body_apply_central_impulse|body_apply_central_impulse]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] impulse ''')'''                                                                                                           |-| void|| [[#body_apply_impulse|body_apply_impulse]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] impulse ''')'''                                                                                   |-| void|| [[#body_apply_torque_impulse|body_apply_torque_impulse]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] impulse ''')'''                                                                                                             |-| void|| [[#body_attach_object_instance_id|body_attach_object_instance_id]] '''(''' [[RID GD|RID]] body, int id ''')'''                                                                                                                |-| void|| [[#body_clear_shapes|body_clear_shapes]] '''(''' [[RID GD|RID]] body ''')'''                                                                                                                                                                    |-| [[RID GD|RID]]|| [[#body_create|body_create]] '''(''' [[#BodyMode|BodyMode]] mode=2, bool init_sleeping=false ''')'''                                                                                                          |-| int|| [[#body_get_collision_layer|body_get_collision_layer]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                                |-| int|| [[#body_get_collision_mask|body_get_collision_mask]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                                  |-| [[PhysicsDirectBodyState GD|PhysicsDirectBodyState]]|| [[#body_get_direct_state|body_get_direct_state]] '''(''' [[RID GD|RID]] body ''')'''                                                                                                                                                            |-| float|| [[#body_get_kinematic_safe_margin|body_get_kinematic_safe_margin]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                    |-| int|| [[#body_get_max_contacts_reported|body_get_max_contacts_reported]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                    |-| [[#BodyMode|BodyMode]]|| [[#body_get_mode|body_get_mode]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                                                      |-| int|| [[#body_get_object_instance_id|body_get_object_instance_id]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                          |-| float|| [[#body_get_param|body_get_param]] '''(''' [[RID GD|RID]] body, [[#BodyParameter|BodyParameter]] param ''')''' const                                                                                                      |-| [[RID GD|RID]]|| [[#body_get_shape|body_get_shape]] '''(''' [[RID GD|RID]] body, int shape_idx ''')''' const                                                                                                                                   |-| int|| [[#body_get_shape_count|body_get_shape_count]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                                        |-| [[Transform GD|Transform]]|| [[#body_get_shape_transform|body_get_shape_transform]] '''(''' [[RID GD|RID]] body, int shape_idx ''')''' const                                                                                                               |-| [[RID GD|RID]]|| [[#body_get_space|body_get_space]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                                                    |-| [[Variant GD|Variant]]|| [[#body_get_state|body_get_state]] '''(''' [[RID GD|RID]] body, [[#BodyState|BodyState]] state ''')''' const                                                                                                              |-| bool|| [[#body_is_axis_locked|body_is_axis_locked]] '''(''' [[RID GD|RID]] body, [[#BodyAxis|BodyAxis]] axis ''')''' const                                                                                                       |-| bool|| [[#body_is_continuous_collision_detection_enabled|body_is_continuous_collision_detection_enabled]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                    |-| bool|| [[#body_is_omitting_force_integration|body_is_omitting_force_integration]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                            |-| bool|| [[#body_is_ray_pickable|body_is_ray_pickable]] '''(''' [[RID GD|RID]] body ''')''' const                                                                                                                                                        |-| void|| [[#body_remove_collision_exception|body_remove_collision_exception]] '''(''' [[RID GD|RID]] body, [[RID GD|RID]] excepted_body ''')'''                                                                                                   |-| void|| [[#body_remove_shape|body_remove_shape]] '''(''' [[RID GD|RID]] body, int shape_idx ''')'''                                                                                                                                   |-| void|| [[#body_set_axis_lock|body_set_axis_lock]] '''(''' [[RID GD|RID]] body, [[#BodyAxis|BodyAxis]] axis, bool lock ''')'''                                                                                 |-| void|| [[#body_set_axis_velocity|body_set_axis_velocity]] '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] axis_velocity ''')'''                                                                                                             |-| void|| [[#body_set_collision_layer|body_set_collision_layer]] '''(''' [[RID GD|RID]] body, int layer ''')'''                                                                                                                         |-| void|| [[#body_set_collision_mask|body_set_collision_mask]] '''(''' [[RID GD|RID]] body, int mask ''')'''                                                                                                                            |-| void|| [[#body_set_enable_continuous_collision_detection|body_set_enable_continuous_collision_detection]] '''(''' [[RID GD|RID]] body, bool enable ''')'''                                                                          |-| void|| [[#body_set_force_integration_callback|body_set_force_integration_callback]] '''(''' [[RID GD|RID]] body, [[Object GD|Object]] receiver, [[StringName GD|StringName]] method, [[Variant GD|Variant]] userdata=null ''')''' |-| void|| [[#body_set_kinematic_safe_margin|body_set_kinematic_safe_margin]] '''(''' [[RID GD|RID]] body, float margin ''')'''                                                                                                        |-| void|| [[#body_set_max_contacts_reported|body_set_max_contacts_reported]] '''(''' [[RID GD|RID]] body, int amount ''')'''                                                                                                            |-| void|| [[#body_set_mode|body_set_mode]] '''(''' [[RID GD|RID]] body, [[#BodyMode|BodyMode]] mode ''')'''                                                                                                                         |-| void|| [[#body_set_omit_force_integration|body_set_omit_force_integration]] '''(''' [[RID GD|RID]] body, bool enable ''')'''                                                                                                        |-| void|| [[#body_set_param|body_set_param]] '''(''' [[RID GD|RID]] body, [[#BodyParameter|BodyParameter]] param, float value ''')'''                                                                           |-| void|| [[#body_set_ray_pickable|body_set_ray_pickable]] '''(''' [[RID GD|RID]] body, bool enable ''')'''                                                                                                                            |-| void|| [[#body_set_shape|body_set_shape]] '''(''' [[RID GD|RID]] body, int shape_idx, [[RID GD|RID]] shape ''')'''                                                                                                            |-| void|| [[#body_set_shape_disabled|body_set_shape_disabled]] '''(''' [[RID GD|RID]] body, int shape_idx, bool disabled ''')'''                                                                                     |-| void|| [[#body_set_shape_transform|body_set_shape_transform]] '''(''' [[RID GD|RID]] body, int shape_idx, [[Transform GD|Transform]] transform ''')'''                                                                        |-| void|| [[#body_set_space|body_set_space]] '''(''' [[RID GD|RID]] body, [[RID GD|RID]] space ''')'''                                                                                                                                             |-| void|| [[#body_set_state|body_set_state]] '''(''' [[RID GD|RID]] body, [[#BodyState|BodyState]] state, [[Variant GD|Variant]] value ''')'''                                                                               |-| float|| [[#cone_twist_joint_get_param|cone_twist_joint_get_param]] '''(''' [[RID GD|RID]] joint, [[#ConeTwistJointParam|ConeTwistJointParam]] param ''')''' const                                                                 |-| void|| [[#cone_twist_joint_set_param|cone_twist_joint_set_param]] '''(''' [[RID GD|RID]] joint, [[#ConeTwistJointParam|ConeTwistJointParam]] param, float value ''')'''                                      |-| void|| [[#free_rid|free_rid]] '''(''' [[RID GD|RID]] rid ''')'''                                                                                                                                                                                       |-| bool|| [[#generic_6dof_joint_get_flag|generic_6dof_joint_get_flag]] '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisFlag|G6DOFJointAxisFlag]] flag ''')'''                                                     |-| float|| [[#generic_6dof_joint_get_param|generic_6dof_joint_get_param]] '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisParam|G6DOFJointAxisParam]] param ''')'''                                                |-| void|| [[#generic_6dof_joint_set_flag|generic_6dof_joint_set_flag]] '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisFlag|G6DOFJointAxisFlag]] flag, bool enable ''')'''                     |-| void|| [[#generic_6dof_joint_set_param|generic_6dof_joint_set_param]] '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisParam|G6DOFJointAxisParam]] param, float value ''')'''               |-| int|| [[#get_process_info|get_process_info]] '''(''' [[#ProcessInfo|ProcessInfo]] process_info ''')'''                                                                                                                                 |-| bool|| [[#hinge_joint_get_flag|hinge_joint_get_flag]] '''(''' [[RID GD|RID]] joint, [[#HingeJointFlag|HingeJointFlag]] flag ''')''' const                                                                                        |-| float|| [[#hinge_joint_get_param|hinge_joint_get_param]] '''(''' [[RID GD|RID]] joint, [[#HingeJointParam|HingeJointParam]] param ''')''' const                                                                                   |-| void|| [[#hinge_joint_set_flag|hinge_joint_set_flag]] '''(''' [[RID GD|RID]] joint, [[#HingeJointFlag|HingeJointFlag]] flag, bool enabled ''')'''                                                             |-| void|| [[#hinge_joint_set_param|hinge_joint_set_param]] '''(''' [[RID GD|RID]] joint, [[#HingeJointParam|HingeJointParam]] param, float value ''')'''                                                        |-| [[RID GD|RID]]|| [[#joint_create_cone_twist|joint_create_cone_twist]] '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] local_ref_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] local_ref_B ''')'''                          |-| [[RID GD|RID]]|| [[#joint_create_generic_6dof|joint_create_generic_6dof]] '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] local_ref_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] local_ref_B ''')'''                      |-| [[RID GD|RID]]|| [[#joint_create_hinge|joint_create_hinge]] '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] hinge_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] hinge_B ''')'''                                            |-| [[RID GD|RID]]|| [[#joint_create_pin|joint_create_pin]] '''(''' [[RID GD|RID]] body_A, [[Vector3 GD|Vector3]] local_A, [[RID GD|RID]] body_B, [[Vector3 GD|Vector3]] local_B ''')'''                                                        |-| [[RID GD|RID]]|| [[#joint_create_slider|joint_create_slider]] '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] local_ref_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] local_ref_B ''')'''                                  |-| int|| [[#joint_get_solver_priority|joint_get_solver_priority]] '''(''' [[RID GD|RID]] joint ''')''' const                                                                                                                                             |-| [[#JointType|JointType]]|| [[#joint_get_type|joint_get_type]] '''(''' [[RID GD|RID]] joint ''')''' const                                                                                                                                                                   |-| void|| [[#joint_set_solver_priority|joint_set_solver_priority]] '''(''' [[RID GD|RID]] joint, int priority ''')'''                                                                                                                   |-| [[Vector3 GD|Vector3]]|| [[#pin_joint_get_local_a|pin_joint_get_local_a]] '''(''' [[RID GD|RID]] joint ''')''' const                                                                                                                                                     |-| [[Vector3 GD|Vector3]]|| [[#pin_joint_get_local_b|pin_joint_get_local_b]] '''(''' [[RID GD|RID]] joint ''')''' const                                                                                                                                                     |-| float|| [[#pin_joint_get_param|pin_joint_get_param]] '''(''' [[RID GD|RID]] joint, [[#PinJointParam|PinJointParam]] param ''')''' const                                                                                           |-| void|| [[#pin_joint_set_local_a|pin_joint_set_local_a]] '''(''' [[RID GD|RID]] joint, [[Vector3 GD|Vector3]] local_A ''')'''                                                                                                                    |-| void|| [[#pin_joint_set_local_b|pin_joint_set_local_b]] '''(''' [[RID GD|RID]] joint, [[Vector3 GD|Vector3]] local_B ''')'''                                                                                                                    |-| void|| [[#pin_joint_set_param|pin_joint_set_param]] '''(''' [[RID GD|RID]] joint, [[#PinJointParam|PinJointParam]] param, float value ''')'''                                                                |-| void|| [[#set_active|set_active]] '''(''' bool active ''')'''                                                                                                                                                                              |-| [[RID GD|RID]]|| [[#shape_create|shape_create]] '''(''' [[#ShapeType|ShapeType]] type ''')'''                                                                                                                                                     |-| [[Variant GD|Variant]]|| [[#shape_get_data|shape_get_data]] '''(''' [[RID GD|RID]] shape ''')''' const                                                                                                                                                                   |-| [[#ShapeType|ShapeType]]|| [[#shape_get_type|shape_get_type]] '''(''' [[RID GD|RID]] shape ''')''' const                                                                                                                                                                   |-| void|| [[#shape_set_data|shape_set_data]] '''(''' [[RID GD|RID]] shape, [[Variant GD|Variant]] data ''')'''                                                                                                                                     |-| float|| [[#slider_joint_get_param|slider_joint_get_param]] '''(''' [[RID GD|RID]] joint, [[#SliderJointParam|SliderJointParam]] param ''')''' const                                                                               |-| void|| [[#slider_joint_set_param|slider_joint_set_param]] '''(''' [[RID GD|RID]] joint, [[#SliderJointParam|SliderJointParam]] param, float value ''')'''                                                    |-| [[RID GD|RID]]|| [[#space_create|space_create]] '''(''' ''')'''                                                                                                                                                                                                         |-| [[PhysicsDirectSpaceState GD|PhysicsDirectSpaceState]]|| [[#space_get_direct_state|space_get_direct_state]] '''(''' [[RID GD|RID]] space ''')'''                                                                                                                                                         |-| float|| [[#space_get_param|space_get_param]] '''(''' [[RID GD|RID]] space, [[#SpaceParameter|SpaceParameter]] param ''')''' const                                                                                                 |-| bool|| [[#space_is_active|space_is_active]] '''(''' [[RID GD|RID]] space ''')''' const                                                                                                                                                                 |-| void|| [[#space_set_active|space_set_active]] '''(''' [[RID GD|RID]] space, bool active ''')'''                                                                                                                                     |-| void|| [[#space_set_param|space_set_param]] '''(''' [[RID GD|RID]] space, [[#SpaceParameter|SpaceParameter]] param, float value ''')'''                                                                      |}== Enumerations ===== JointType ====== JOINT_PIN ====== JOINT_HINGE ====== JOINT_SLIDER ====== JOINT_CONE_TWIST ====== JOINT_6DOF ===enum '''JointType''':*  '''JOINT_PIN''' = '''0'''  The [[Joint GD|Joint]] is a [[PinJoint GD|PinJoint]].*  '''JOINT_HINGE''' = '''1'''  The [[Joint GD|Joint]] is a [[HingeJoint GD|HingeJoint]].*  '''JOINT_SLIDER''' = '''2'''  The [[Joint GD|Joint]] is a [[SliderJoint GD|SliderJoint]].*  '''JOINT_CONE_TWIST''' = '''3'''  The [[Joint GD|Joint]] is a [[ConeTwistJoint GD|ConeTwistJoint]].*  '''JOINT_6DOF''' = '''4'''  The [[Joint GD|Joint]] is a [[Generic6DOFJoint GD|Generic6DOFJoint]].=== PinJointParam ====== PIN_JOINT_BIAS ====== PIN_JOINT_DAMPING ====== PIN_JOINT_IMPULSE_CLAMP ===enum '''PinJointParam''':*  '''PIN_JOINT_BIAS''' = '''0'''  The strength with which the pinned objects try to stay in positional relation to each other.The higher, the stronger.*  '''PIN_JOINT_DAMPING''' = '''1'''  The strength with which the pinned objects try to stay in velocity relation to each other.The higher, the stronger.*  '''PIN_JOINT_IMPULSE_CLAMP''' = '''2'''  If above 0, this value is the maximum value for an impulse that this Joint puts on its ends.=== HingeJointParam ====== HINGE_JOINT_BIAS ====== HINGE_JOINT_LIMIT_UPPER ====== HINGE_JOINT_LIMIT_LOWER ====== HINGE_JOINT_LIMIT_BIAS ====== HINGE_JOINT_LIMIT_SOFTNESS ====== HINGE_JOINT_LIMIT_RELAXATION ====== HINGE_JOINT_MOTOR_TARGET_VELOCITY ====== HINGE_JOINT_MOTOR_MAX_IMPULSE ===enum '''HingeJointParam''':*  '''HINGE_JOINT_BIAS''' = '''0'''  The speed with which the two bodies get pulled together when they move in different directions.*  '''HINGE_JOINT_LIMIT_UPPER''' = '''1'''  The maximum rotation across the Hinge.*  '''HINGE_JOINT_LIMIT_LOWER''' = '''2'''  The minimum rotation across the Hinge.*  '''HINGE_JOINT_LIMIT_BIAS''' = '''3'''  The speed with which the rotation across the axis perpendicular to the hinge gets corrected.*  '''HINGE_JOINT_LIMIT_SOFTNESS''' = '''4'''*  '''HINGE_JOINT_LIMIT_RELAXATION''' = '''5'''  The lower this value, the more the rotation gets slowed down.*  '''HINGE_JOINT_MOTOR_TARGET_VELOCITY''' = '''6'''  Target speed for the motor.*  '''HINGE_JOINT_MOTOR_MAX_IMPULSE''' = '''7'''  Maximum acceleration for the motor.=== HingeJointFlag ====== HINGE_JOINT_FLAG_USE_LIMIT ====== HINGE_JOINT_FLAG_ENABLE_MOTOR ===enum '''HingeJointFlag''':*  '''HINGE_JOINT_FLAG_USE_LIMIT''' = '''0'''  If {{Span|true}}, the Hinge has a maximum and a minimum rotation.*  '''HINGE_JOINT_FLAG_ENABLE_MOTOR''' = '''1'''  If {{Span|true}}, a motor turns the Hinge.=== SliderJointParam ====== SLIDER_JOINT_LINEAR_LIMIT_UPPER ====== SLIDER_JOINT_LINEAR_LIMIT_LOWER ====== SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS ====== SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION ====== SLIDER_JOINT_LINEAR_LIMIT_DAMPING ====== SLIDER_JOINT_LINEAR_MOTION_SOFTNESS ====== SLIDER_JOINT_LINEAR_MOTION_RESTITUTION ====== SLIDER_JOINT_LINEAR_MOTION_DAMPING ====== SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS ====== SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION ====== SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING ====== SLIDER_JOINT_ANGULAR_LIMIT_UPPER ====== SLIDER_JOINT_ANGULAR_LIMIT_LOWER ====== SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS ====== SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION ====== SLIDER_JOINT_ANGULAR_LIMIT_DAMPING ====== SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS ====== SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION ====== SLIDER_JOINT_ANGULAR_MOTION_DAMPING ====== SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS ====== SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION ====== SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING ====== SLIDER_JOINT_MAX ===enum '''SliderJointParam''':*  '''SLIDER_JOINT_LINEAR_LIMIT_UPPER''' = '''0'''  The maximum difference between the pivot points on their X axis before damping happens.*  '''SLIDER_JOINT_LINEAR_LIMIT_LOWER''' = '''1'''  The minimum difference between the pivot points on their X axis before damping happens.*  '''SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS''' = '''2'''  A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.*  '''SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION''' = '''3'''  The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost.*  '''SLIDER_JOINT_LINEAR_LIMIT_DAMPING''' = '''4'''  The amount of damping once the slider limits are surpassed.*  '''SLIDER_JOINT_LINEAR_MOTION_SOFTNESS''' = '''5'''  A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.*  '''SLIDER_JOINT_LINEAR_MOTION_RESTITUTION''' = '''6'''  The amount of restitution inside the slider limits.*  '''SLIDER_JOINT_LINEAR_MOTION_DAMPING''' = '''7'''  The amount of damping inside the slider limits.*  '''SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS''' = '''8'''  A factor applied to the movement across axes orthogonal to the slider.*  '''SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION''' = '''9'''  The amount of restitution when movement is across axes orthogonal to the slider.*  '''SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING''' = '''10'''  The amount of damping when movement is across axes orthogonal to the slider.*  '''SLIDER_JOINT_ANGULAR_LIMIT_UPPER''' = '''11'''  The upper limit of rotation in the slider.*  '''SLIDER_JOINT_ANGULAR_LIMIT_LOWER''' = '''12'''  The lower limit of rotation in the slider.*  '''SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS''' = '''13'''  A factor applied to the all rotation once the limit is surpassed.*  '''SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION''' = '''14'''  The amount of restitution of the rotation when the limit is surpassed.*  '''SLIDER_JOINT_ANGULAR_LIMIT_DAMPING''' = '''15'''  The amount of damping of the rotation when the limit is surpassed.*  '''SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS''' = '''16'''  A factor that gets applied to the all rotation in the limits.*  '''SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION''' = '''17'''  The amount of restitution of the rotation in the limits.*  '''SLIDER_JOINT_ANGULAR_MOTION_DAMPING''' = '''18'''  The amount of damping of the rotation in the limits.*  '''SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS''' = '''19'''  A factor that gets applied to the all rotation across axes orthogonal to the slider.*  '''SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION''' = '''20'''  The amount of restitution of the rotation across axes orthogonal to the slider.*  '''SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING''' = '''21'''  The amount of damping of the rotation across axes orthogonal to the slider.*  '''SLIDER_JOINT_MAX''' = '''22'''  Represents the size of the [[#SliderJointParam|SliderJointParam]] enum.=== ConeTwistJointParam ====== CONE_TWIST_JOINT_SWING_SPAN ====== CONE_TWIST_JOINT_TWIST_SPAN ====== CONE_TWIST_JOINT_BIAS ====== CONE_TWIST_JOINT_SOFTNESS ====== CONE_TWIST_JOINT_RELAXATION ===enum '''ConeTwistJointParam''':*  '''CONE_TWIST_JOINT_SWING_SPAN''' = '''0'''  Swing is rotation from side to side, around the axis perpendicular to the twist axis.The swing span defines, how much rotation will not get corrected along the swing axis.Could be defined as looseness in the [[ConeTwistJoint GD|ConeTwistJoint]].If below 0.05, this behavior is locked.*  '''CONE_TWIST_JOINT_TWIST_SPAN''' = '''1'''  Twist is the rotation around the twist axis, this value defined how far the joint can twist.Twist is locked if below 0.05.*  '''CONE_TWIST_JOINT_BIAS''' = '''2'''  The speed with which the swing or twist will take place.The higher, the faster.*  '''CONE_TWIST_JOINT_SOFTNESS''' = '''3'''  The ease with which the Joint twists, if it's too low, it takes more force to twist the joint.*  '''CONE_TWIST_JOINT_RELAXATION''' = '''4'''  Defines, how fast the swing- and twist-speed-difference on both sides gets synced.=== G6DOFJointAxisParam ====== G6DOF_JOINT_LINEAR_LOWER_LIMIT ====== G6DOF_JOINT_LINEAR_UPPER_LIMIT ====== G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS ====== G6DOF_JOINT_LINEAR_RESTITUTION ====== G6DOF_JOINT_LINEAR_DAMPING ====== G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY ====== G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT ====== G6DOF_JOINT_ANGULAR_LOWER_LIMIT ====== G6DOF_JOINT_ANGULAR_UPPER_LIMIT ====== G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS ====== G6DOF_JOINT_ANGULAR_DAMPING ====== G6DOF_JOINT_ANGULAR_RESTITUTION ====== G6DOF_JOINT_ANGULAR_FORCE_LIMIT ====== G6DOF_JOINT_ANGULAR_ERP ====== G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY ====== G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT ===enum '''G6DOFJointAxisParam''':*  '''G6DOF_JOINT_LINEAR_LOWER_LIMIT''' = '''0'''  The minimum difference between the pivot points' axes.*  '''G6DOF_JOINT_LINEAR_UPPER_LIMIT''' = '''1'''  The maximum difference between the pivot points' axes.*  '''G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS''' = '''2'''  A factor that gets applied to the movement across the axes. The lower, the slower the movement.*  '''G6DOF_JOINT_LINEAR_RESTITUTION''' = '''3'''  The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost.*  '''G6DOF_JOINT_LINEAR_DAMPING''' = '''4'''  The amount of damping that happens at the linear motion across the axes.*  '''G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY''' = '''5'''  The velocity that the joint's linear motor will attempt to reach.*  '''G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT''' = '''6'''  The maximum force that the linear motor can apply while trying to reach the target velocity.*  '''G6DOF_JOINT_ANGULAR_LOWER_LIMIT''' = '''10'''  The minimum rotation in negative direction to break loose and rotate around the axes.*  '''G6DOF_JOINT_ANGULAR_UPPER_LIMIT''' = '''11'''  The minimum rotation in positive direction to break loose and rotate around the axes.*  '''G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS''' = '''12'''  A factor that gets multiplied onto all rotations across the axes.*  '''G6DOF_JOINT_ANGULAR_DAMPING''' = '''13'''  The amount of rotational damping across the axes. The lower, the more dampening occurs.*  '''G6DOF_JOINT_ANGULAR_RESTITUTION''' = '''14'''  The amount of rotational restitution across the axes. The lower, the more restitution occurs.*  '''G6DOF_JOINT_ANGULAR_FORCE_LIMIT''' = '''15'''  The maximum amount of force that can occur, when rotating around the axes.*  '''G6DOF_JOINT_ANGULAR_ERP''' = '''16'''  When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.*  '''G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY''' = '''17'''  Target speed for the motor at the axes.*  '''G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT''' = '''18'''  Maximum acceleration for the motor at the axes.=== G6DOFJointAxisFlag ====== G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT ====== G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT ====== G6DOF_JOINT_FLAG_ENABLE_MOTOR ====== G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR ===enum '''G6DOFJointAxisFlag''':*  '''G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT''' = '''0'''  If {{Span|set}} there is linear motion possible within the given limits.*  '''G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT''' = '''1'''  If {{Span|set}} there is rotational motion possible.*  '''G6DOF_JOINT_FLAG_ENABLE_MOTOR''' = '''4'''  If {{Span|set}} there is a rotational motor across these axes.*  '''G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR''' = '''5'''  If {{Span|set}} there is a linear motor on this axis that targets a specific velocity.=== ShapeType ====== SHAPE_PLANE ====== SHAPE_RAY ====== SHAPE_SPHERE ====== SHAPE_BOX ====== SHAPE_CAPSULE ====== SHAPE_CYLINDER ====== SHAPE_CONVEX_POLYGON ====== SHAPE_CONCAVE_POLYGON ====== SHAPE_HEIGHTMAP ====== SHAPE_CUSTOM ===enum '''ShapeType''':*  '''SHAPE_PLANE''' = '''0'''  The [[Shape GD|Shape]] is a [[WorldMarginShape GD|WorldMarginShape]].*  '''SHAPE_RAY''' = '''1'''  The [[Shape GD|Shape]] is a [[RayShape GD|RayShape]].*  '''SHAPE_SPHERE''' = '''2'''  The [[Shape GD|Shape]] is a [[SphereShape GD|SphereShape]].*  '''SHAPE_BOX''' = '''3'''  The [[Shape GD|Shape]] is a [[BoxShape GD|BoxShape]].*  '''SHAPE_CAPSULE''' = '''4'''  The [[Shape GD|Shape]] is a [[CapsuleShape GD|CapsuleShape]].*  '''SHAPE_CYLINDER''' = '''5'''  The [[Shape GD|Shape]] is a [[CylinderShape GD|CylinderShape]].*  '''SHAPE_CONVEX_POLYGON''' = '''6'''  The [[Shape GD|Shape]] is a [[ConvexPolygonShape GD|ConvexPolygonShape]].*  '''SHAPE_CONCAVE_POLYGON''' = '''7'''  The [[Shape GD|Shape]] is a [[ConcavePolygonShape GD|ConcavePolygonShape]].*  '''SHAPE_HEIGHTMAP''' = '''8'''  The [[Shape GD|Shape]] is a [[HeightMapShape GD|HeightMapShape]].*  '''SHAPE_CUSTOM''' = '''9'''  This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.=== AreaParameter ====== AREA_PARAM_GRAVITY ====== AREA_PARAM_GRAVITY_VECTOR ====== AREA_PARAM_GRAVITY_IS_POINT ====== AREA_PARAM_GRAVITY_DISTANCE_SCALE ====== AREA_PARAM_GRAVITY_POINT_ATTENUATION ====== AREA_PARAM_LINEAR_DAMP ====== AREA_PARAM_ANGULAR_DAMP ====== AREA_PARAM_PRIORITY ===enum '''AreaParameter''':*  '''AREA_PARAM_GRAVITY''' = '''0'''  Constant to set/get gravity strength in an area.*  '''AREA_PARAM_GRAVITY_VECTOR''' = '''1'''  Constant to set/get gravity vector/center in an area.*  '''AREA_PARAM_GRAVITY_IS_POINT''' = '''2'''  Constant to set/get whether the gravity vector of an area is a direction, or a center point.*  '''AREA_PARAM_GRAVITY_DISTANCE_SCALE''' = '''3'''  Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance.*  '''AREA_PARAM_GRAVITY_POINT_ATTENUATION''' = '''4'''  This constant was used to set/get the falloff factor for point gravity. It has been superseded by [[PhysicsServer GD#AREA_PARAM_GRAVITY_DISTANCE_SCALE|AREA_PARAM_GRAVITY_DISTANCE_SCALE]].*  '''AREA_PARAM_LINEAR_DAMP''' = '''5'''  Constant to set/get the linear dampening factor of an area.*  '''AREA_PARAM_ANGULAR_DAMP''' = '''6'''  Constant to set/get the angular dampening factor of an area.*  '''AREA_PARAM_PRIORITY''' = '''7'''  Constant to set/get the priority (order of processing) of an area.=== AreaSpaceOverrideMode ====== AREA_SPACE_OVERRIDE_DISABLED ====== AREA_SPACE_OVERRIDE_COMBINE ====== AREA_SPACE_OVERRIDE_COMBINE_REPLACE ====== AREA_SPACE_OVERRIDE_REPLACE ====== AREA_SPACE_OVERRIDE_REPLACE_COMBINE ===enum '''AreaSpaceOverrideMode''':*  '''AREA_SPACE_OVERRIDE_DISABLED''' = '''0'''  This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.*  '''AREA_SPACE_OVERRIDE_COMBINE''' = '''1'''  This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.*  '''AREA_SPACE_OVERRIDE_COMBINE_REPLACE''' = '''2'''  This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.*  '''AREA_SPACE_OVERRIDE_REPLACE''' = '''3'''  This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.*  '''AREA_SPACE_OVERRIDE_REPLACE_COMBINE''' = '''4'''  This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.=== BodyMode ====== BODY_MODE_STATIC ====== BODY_MODE_KINEMATIC ====== BODY_MODE_RIGID ====== BODY_MODE_CHARACTER ===enum '''BodyMode''':*  '''BODY_MODE_STATIC''' = '''0'''  Constant for static bodies.*  '''BODY_MODE_KINEMATIC''' = '''1'''  Constant for kinematic bodies.*  '''BODY_MODE_RIGID''' = '''2'''  Constant for rigid bodies.*  '''BODY_MODE_CHARACTER''' = '''3'''  Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics.=== BodyParameter ====== BODY_PARAM_BOUNCE ====== BODY_PARAM_FRICTION ====== BODY_PARAM_MASS ====== BODY_PARAM_GRAVITY_SCALE ====== BODY_PARAM_LINEAR_DAMP ====== BODY_PARAM_ANGULAR_DAMP ====== BODY_PARAM_MAX ===enum '''BodyParameter''':*  '''BODY_PARAM_BOUNCE''' = '''0'''  Constant to set/get a body's bounce factor.*  '''BODY_PARAM_FRICTION''' = '''1'''  Constant to set/get a body's friction.*  '''BODY_PARAM_MASS''' = '''2'''  Constant to set/get a body's mass.*  '''BODY_PARAM_GRAVITY_SCALE''' = '''3'''  Constant to set/get a body's gravity multiplier.*  '''BODY_PARAM_LINEAR_DAMP''' = '''4'''  Constant to set/get a body's linear dampening factor.*  '''BODY_PARAM_ANGULAR_DAMP''' = '''5'''  Constant to set/get a body's angular dampening factor.*  '''BODY_PARAM_MAX''' = '''6'''  Represents the size of the [[#BodyParameter|BodyParameter]] enum.=== BodyState ====== BODY_STATE_TRANSFORM ====== BODY_STATE_LINEAR_VELOCITY ====== BODY_STATE_ANGULAR_VELOCITY ====== BODY_STATE_SLEEPING ====== BODY_STATE_CAN_SLEEP ===enum '''BodyState''':*  '''BODY_STATE_TRANSFORM''' = '''0'''  Constant to set/get the current transform matrix of the body.*  '''BODY_STATE_LINEAR_VELOCITY''' = '''1'''  Constant to set/get the current linear velocity of the body.*  '''BODY_STATE_ANGULAR_VELOCITY''' = '''2'''  Constant to set/get the current angular velocity of the body.*  '''BODY_STATE_SLEEPING''' = '''3'''  Constant to sleep/wake up a body, or to get whether it is sleeping.*  '''BODY_STATE_CAN_SLEEP''' = '''4'''  Constant to set/get whether the body can sleep.=== AreaBodyStatus ====== AREA_BODY_ADDED ====== AREA_BODY_REMOVED ===enum '''AreaBodyStatus''':*  '''AREA_BODY_ADDED''' = '''0'''  The value of the first parameter and area callback function receives, when an object enters one of its shapes.*  '''AREA_BODY_REMOVED''' = '''1'''  The value of the first parameter and area callback function receives, when an object exits one of its shapes.=== ProcessInfo ====== INFO_ACTIVE_OBJECTS ====== INFO_COLLISION_PAIRS ====== INFO_ISLAND_COUNT ===enum '''ProcessInfo''':*  '''INFO_ACTIVE_OBJECTS''' = '''0'''  Constant to get the number of objects that are not sleeping.*  '''INFO_COLLISION_PAIRS''' = '''1'''  Constant to get the number of possible collisions.*  '''INFO_ISLAND_COUNT''' = '''2'''  Constant to get the number of space regions where a collision could occur.=== SpaceParameter ====== SPACE_PARAM_CONTACT_RECYCLE_RADIUS ====== SPACE_PARAM_CONTACT_MAX_SEPARATION ====== SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION ====== SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD ====== SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD ====== SPACE_PARAM_BODY_TIME_TO_SLEEP ====== SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO ====== SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS ====== SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH ===enum '''SpaceParameter''':*  '''SPACE_PARAM_CONTACT_RECYCLE_RADIUS''' = '''0'''  Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.*  '''SPACE_PARAM_CONTACT_MAX_SEPARATION''' = '''1'''  Constant to set/get the maximum distance a shape can be from another before they are considered separated.*  '''SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION''' = '''2'''  Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.*  '''SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD''' = '''3'''  Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.*  '''SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD''' = '''4'''  Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.*  '''SPACE_PARAM_BODY_TIME_TO_SLEEP''' = '''5'''  Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.*  '''SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO''' = '''6'''*  '''SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS''' = '''7'''  Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision.*  '''SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH''' = '''8'''=== BodyAxis ====== BODY_AXIS_LINEAR_X ====== BODY_AXIS_LINEAR_Y ====== BODY_AXIS_LINEAR_Z ====== BODY_AXIS_ANGULAR_X ====== BODY_AXIS_ANGULAR_Y ====== BODY_AXIS_ANGULAR_Z ===enum '''BodyAxis''':*  '''BODY_AXIS_LINEAR_X''' = '''1'''*  '''BODY_AXIS_LINEAR_Y''' = '''2'''*  '''BODY_AXIS_LINEAR_Z''' = '''4'''*  '''BODY_AXIS_ANGULAR_X''' = '''8'''*  '''BODY_AXIS_ANGULAR_Y''' = '''16'''*  '''BODY_AXIS_ANGULAR_Z''' = '''32'''== Method Descriptions ===== area_add_shape ===*  void '''area_add_shape''' '''(''' [[RID GD|RID]] area, [[RID GD|RID]] shape, [[Transform GD|Transform]] transform=Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), bool disabled=false ''')'''Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.=== area_attach_object_instance_id ===*  void '''area_attach_object_instance_id''' '''(''' [[RID GD|RID]] area, int id ''')'''Assigns the area to a descendant of [[Object GD|Object]], so it can exist in the node tree.=== area_clear_shapes ===*  void '''area_clear_shapes''' '''(''' [[RID GD|RID]] area ''')'''Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.=== area_create ===*  [[RID GD|RID]] '''area_create ( )'''Creates an [[Area GD|Area]].=== area_get_object_instance_id ===*  int '''area_get_object_instance_id''' '''(''' [[RID GD|RID]] area ''')''' constGets the instance ID of the object the area is assigned to.=== area_get_param ===*  [[Variant GD|Variant]] '''area_get_param''' '''(''' [[RID GD|RID]] area, [[#AreaParameter|AreaParameter]] param ''')''' constReturns an area parameter value. A list of available parameters is on the [[#AreaParameter|AreaParameter]] constants.=== area_get_shape ===*  [[RID GD|RID]] '''area_get_shape''' '''(''' [[RID GD|RID]] area, int shape_idx ''')''' constReturns the [[RID GD|RID]] of the nth shape of an area.=== area_get_shape_count ===*  int '''area_get_shape_count''' '''(''' [[RID GD|RID]] area ''')''' constReturns the number of shapes assigned to an area.=== area_get_shape_transform ===*  [[Transform GD|Transform]] '''area_get_shape_transform''' '''(''' [[RID GD|RID]] area, int shape_idx ''')''' constReturns the transform matrix of a shape within an area.=== area_get_space ===*  [[RID GD|RID]] '''area_get_space''' '''(''' [[RID GD|RID]] area ''')''' constReturns the space assigned to the area.=== area_get_space_override_mode ===*  [[#AreaSpaceOverrideMode|AreaSpaceOverrideMode]] '''area_get_space_override_mode''' '''(''' [[RID GD|RID]] area ''')''' constReturns the space override mode for the area.=== area_get_transform ===*  [[Transform GD|Transform]] '''area_get_transform''' '''(''' [[RID GD|RID]] area ''')''' constReturns the transform matrix for an area.=== area_is_ray_pickable ===*  bool '''area_is_ray_pickable''' '''(''' [[RID GD|RID]] area ''')''' constIf {{Span|true}}, area collides with rays.=== area_remove_shape ===*  void '''area_remove_shape''' '''(''' [[RID GD|RID]] area, int shape_idx ''')'''Removes a shape from an area. It does not delete the shape, so it can be reassigned later.=== area_set_area_monitor_callback ===*  void '''area_set_area_monitor_callback''' '''(''' [[RID GD|RID]] area, [[Object GD|Object]] receiver, [[StringName GD|StringName]] method ''')'''=== area_set_collision_layer ===*  void '''area_set_collision_layer''' '''(''' [[RID GD|RID]] area, int layer ''')'''Assigns the area to one or many physics layers.=== area_set_collision_mask ===*  void '''area_set_collision_mask''' '''(''' [[RID GD|RID]] area, int mask ''')'''Sets which physics layers the area will monitor.=== area_set_monitor_callback ===*  void '''area_set_monitor_callback''' '''(''' [[RID GD|RID]] area, [[Object GD|Object]] receiver, [[StringName GD|StringName]] method ''')'''Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:1: [[PhysicsServer GD#AREA_BODY_ADDED|AREA_BODY_ADDED]] or [[PhysicsServer GD#AREA_BODY_REMOVED|AREA_BODY_REMOVED]], depending on whether the object entered or exited the area.2: [[RID GD|RID]] of the object that entered/exited the area.3: Instance ID of the object that entered/exited the area.4: The shape index of the object that entered/exited the area.5: The shape index of the area where the object entered/exited.=== area_set_monitorable ===*  void '''area_set_monitorable''' '''(''' [[RID GD|RID]] area, bool monitorable ''')'''=== area_set_param ===*  void '''area_set_param''' '''(''' [[RID GD|RID]] area, [[#AreaParameter|AreaParameter]] param, [[Variant GD|Variant]] value ''')'''Sets the value for an area parameter. A list of available parameters is on the [[#AreaParameter|AreaParameter]] constants.=== area_set_ray_pickable ===*  void '''area_set_ray_pickable''' '''(''' [[RID GD|RID]] area, bool enable ''')'''Sets object pickable with rays.=== area_set_shape ===*  void '''area_set_shape''' '''(''' [[RID GD|RID]] area, int shape_idx, [[RID GD|RID]] shape ''')'''Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [[RID GD|RID]].=== area_set_shape_disabled ===*  void '''area_set_shape_disabled''' '''(''' [[RID GD|RID]] area, int shape_idx, bool disabled ''')'''=== area_set_shape_transform ===*  void '''area_set_shape_transform''' '''(''' [[RID GD|RID]] area, int shape_idx, [[Transform GD|Transform]] transform ''')'''Sets the transform matrix for an area shape.=== area_set_space ===*  void '''area_set_space''' '''(''' [[RID GD|RID]] area, [[RID GD|RID]] space ''')'''Assigns a space to the area.=== area_set_space_override_mode ===*  void '''area_set_space_override_mode''' '''(''' [[RID GD|RID]] area, [[#AreaSpaceOverrideMode|AreaSpaceOverrideMode]] mode ''')'''Sets the space override mode for the area. The modes are described in the [[#AreaSpaceOverrideMode|AreaSpaceOverrideMode]] constants.=== area_set_transform ===*  void '''area_set_transform''' '''(''' [[RID GD|RID]] area, [[Transform GD|Transform]] transform ''')'''Sets the transform matrix for an area.=== body_add_central_force ===*  void '''body_add_central_force''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] force ''')'''=== body_add_collision_exception ===*  void '''body_add_collision_exception''' '''(''' [[RID GD|RID]] body, [[RID GD|RID]] excepted_body ''')'''Adds a body to the list of bodies exempt from collisions.=== body_add_force ===*  void '''body_add_force''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] force, [[Vector3 GD|Vector3]] position ''')'''=== body_add_shape ===*  void '''body_add_shape''' '''(''' [[RID GD|RID]] body, [[RID GD|RID]] shape, [[Transform GD|Transform]] transform=Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), bool disabled=false ''')'''Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.=== body_add_torque ===*  void '''body_add_torque''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] torque ''')'''=== body_apply_central_impulse ===*  void '''body_apply_central_impulse''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] impulse ''')'''=== body_apply_impulse ===*  void '''body_apply_impulse''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] impulse ''')'''Gives the body a push at a {{Span|position}} in the direction of the {{Span|impulse}}.=== body_apply_torque_impulse ===*  void '''body_apply_torque_impulse''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] impulse ''')'''Gives the body a push to rotate it.=== body_attach_object_instance_id ===*  void '''body_attach_object_instance_id''' '''(''' [[RID GD|RID]] body, int id ''')'''Assigns the area to a descendant of [[Object GD|Object]], so it can exist in the node tree.=== body_clear_shapes ===*  void '''body_clear_shapes''' '''(''' [[RID GD|RID]] body ''')'''Removes all shapes from a body.=== body_create ===*  [[RID GD|RID]] '''body_create''' '''(''' [[#BodyMode|BodyMode]] mode=2, bool init_sleeping=false ''')'''Creates a physics body. The first parameter can be any value from [[#BodyMode|BodyMode]] constants, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.=== body_get_collision_layer ===*  int '''body_get_collision_layer''' '''(''' [[RID GD|RID]] body ''')''' constReturns the physics layer or layers a body belongs to.=== body_get_collision_mask ===*  int '''body_get_collision_mask''' '''(''' [[RID GD|RID]] body ''')''' constReturns the physics layer or layers a body can collide with.-=== body_get_direct_state ===*  [[PhysicsDirectBodyState GD|PhysicsDirectBodyState]] '''body_get_direct_state''' '''(''' [[RID GD|RID]] body ''')'''Returns the [[PhysicsDirectBodyState GD|PhysicsDirectBodyState]] of the body.=== body_get_kinematic_safe_margin ===*  float '''body_get_kinematic_safe_margin''' '''(''' [[RID GD|RID]] body ''')''' const=== body_get_max_contacts_reported ===*  int '''body_get_max_contacts_reported''' '''(''' [[RID GD|RID]] body ''')''' constReturns the maximum contacts that can be reported. See [[#body_set_max_contacts_reported|body_set_max_contacts_reported]].=== body_get_mode ===*  [[#BodyMode|BodyMode]] '''body_get_mode''' '''(''' [[RID GD|RID]] body ''')''' constReturns the body mode.=== body_get_object_instance_id ===*  int '''body_get_object_instance_id''' '''(''' [[RID GD|RID]] body ''')''' constGets the instance ID of the object the area is assigned to.=== body_get_param ===*  float '''body_get_param''' '''(''' [[RID GD|RID]] body, [[#BodyParameter|BodyParameter]] param ''')''' constReturns the value of a body parameter. A list of available parameters is on the [[#BodyParameter|BodyParameter]] constants.=== body_get_shape ===*  [[RID GD|RID]] '''body_get_shape''' '''(''' [[RID GD|RID]] body, int shape_idx ''')''' constReturns the [[RID GD|RID]] of the nth shape of a body.=== body_get_shape_count ===*  int '''body_get_shape_count''' '''(''' [[RID GD|RID]] body ''')''' constReturns the number of shapes assigned to a body.=== body_get_shape_transform ===*  [[Transform GD|Transform]] '''body_get_shape_transform''' '''(''' [[RID GD|RID]] body, int shape_idx ''')''' constReturns the transform matrix of a body shape.=== body_get_space ===*  [[RID GD|RID]] '''body_get_space''' '''(''' [[RID GD|RID]] body ''')''' constReturns the [[RID GD|RID]] of the space assigned to a body.=== body_get_state ===*  [[Variant GD|Variant]] '''body_get_state''' '''(''' [[RID GD|RID]] body, [[#BodyState|BodyState]] state ''')''' constReturns a body state.=== body_is_axis_locked ===*  bool '''body_is_axis_locked''' '''(''' [[RID GD|RID]] body, [[#BodyAxis|BodyAxis]] axis ''')''' const=== body_is_continuous_collision_detection_enabled ===*  bool '''body_is_continuous_collision_detection_enabled''' '''(''' [[RID GD|RID]] body ''')''' constIf {{Span|true}}, the continuous collision detection mode is enabled.=== body_is_omitting_force_integration ===*  bool '''body_is_omitting_force_integration''' '''(''' [[RID GD|RID]] body ''')''' constReturns whether a body uses a callback function to calculate its own physics (see [[#body_set_force_integration_callback|body_set_force_integration_callback]]).=== body_is_ray_pickable ===*  bool '''body_is_ray_pickable''' '''(''' [[RID GD|RID]] body ''')''' constIf {{Span|true}}, the body can be detected by rays.=== body_remove_collision_exception ===*  void '''body_remove_collision_exception''' '''(''' [[RID GD|RID]] body, [[RID GD|RID]] excepted_body ''')'''Removes a body from the list of bodies exempt from collisions.Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.=== body_remove_shape ===*  void '''body_remove_shape''' '''(''' [[RID GD|RID]] body, int shape_idx ''')'''Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.=== body_set_axis_lock ===*  void '''body_set_axis_lock''' '''(''' [[RID GD|RID]] body, [[#BodyAxis|BodyAxis]] axis, bool lock ''')'''=== body_set_axis_velocity ===*  void '''body_set_axis_velocity''' '''(''' [[RID GD|RID]] body, [[Vector3 GD|Vector3]] axis_velocity ''')'''Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.=== body_set_collision_layer ===*  void '''body_set_collision_layer''' '''(''' [[RID GD|RID]] body, int layer ''')'''Sets the physics layer or layers a body belongs to.=== body_set_collision_mask ===*  void '''body_set_collision_mask''' '''(''' [[RID GD|RID]] body, int mask ''')'''Sets the physics layer or layers a body can collide with.=== body_set_enable_continuous_collision_detection ===*  void '''body_set_enable_continuous_collision_detection''' '''(''' [[RID GD|RID]] body, bool enable ''')'''If {{Span|true}}, the continuous collision detection mode is enabled.Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.=== body_set_force_integration_callback ===*  void '''body_set_force_integration_callback''' '''(''' [[RID GD|RID]] body, [[Object GD|Object]] receiver, [[StringName GD|StringName]] method, [[Variant GD|Variant]] userdata=null ''')'''Sets the function used to calculate physics for an object, if that object allows it (see [[#body_set_omit_force_integration|body_set_omit_force_integration]]).=== body_set_kinematic_safe_margin ===*  void '''body_set_kinematic_safe_margin''' '''(''' [[RID GD|RID]] body, float margin ''')'''=== body_set_max_contacts_reported ===*  void '''body_set_max_contacts_reported''' '''(''' [[RID GD|RID]] body, int amount ''')'''Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.=== body_set_mode ===*  void '''body_set_mode''' '''(''' [[RID GD|RID]] body, [[#BodyMode|BodyMode]] mode ''')'''Sets the body mode, from one of the [[#BodyMode|BodyMode]] constants.=== body_set_omit_force_integration ===*  void '''body_set_omit_force_integration''' '''(''' [[RID GD|RID]] body, bool enable ''')'''Sets whether a body uses a callback function to calculate its own physics (see [[#body_set_force_integration_callback|body_set_force_integration_callback]]).=== body_set_param ===*  void '''body_set_param''' '''(''' [[RID GD|RID]] body, [[#BodyParameter|BodyParameter]] param, float value ''')'''Sets a body parameter. A list of available parameters is on the [[#BodyParameter|BodyParameter]] constants.=== body_set_ray_pickable ===*  void '''body_set_ray_pickable''' '''(''' [[RID GD|RID]] body, bool enable ''')'''Sets the body pickable with rays if {{Span|enabled}} is set.=== body_set_shape ===*  void '''body_set_shape''' '''(''' [[RID GD|RID]] body, int shape_idx, [[RID GD|RID]] shape ''')'''Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [[RID GD|RID]].=== body_set_shape_disabled ===*  void '''body_set_shape_disabled''' '''(''' [[RID GD|RID]] body, int shape_idx, bool disabled ''')'''=== body_set_shape_transform ===*  void '''body_set_shape_transform''' '''(''' [[RID GD|RID]] body, int shape_idx, [[Transform GD|Transform]] transform ''')'''Sets the transform matrix for a body shape.=== body_set_space ===*  void '''body_set_space''' '''(''' [[RID GD|RID]] body, [[RID GD|RID]] space ''')'''Assigns a space to the body (see [[#space_create|space_create]]).=== body_set_state ===*  void '''body_set_state''' '''(''' [[RID GD|RID]] body, [[#BodyState|BodyState]] state, [[Variant GD|Variant]] value ''')'''Sets a body state (see [[#BodyState|BodyState]] constants).=== cone_twist_joint_get_param ===*  float '''cone_twist_joint_get_param''' '''(''' [[RID GD|RID]] joint, [[#ConeTwistJointParam|ConeTwistJointParam]] param ''')''' constGets a cone_twist_joint parameter (see [[#ConeTwistJointParam|ConeTwistJointParam]] constants).=== cone_twist_joint_set_param ===*  void '''cone_twist_joint_set_param''' '''(''' [[RID GD|RID]] joint, [[#ConeTwistJointParam|ConeTwistJointParam]] param, float value ''')'''Sets a cone_twist_joint parameter (see [[#ConeTwistJointParam|ConeTwistJointParam]] constants).=== free_rid ===*  void '''free_rid''' '''(''' [[RID GD|RID]] rid ''')'''Destroys any of the objects created by PhysicsServer. If the [[RID GD|RID]] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.=== generic_6dof_joint_get_flag ===*  bool '''generic_6dof_joint_get_flag''' '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisFlag|G6DOFJointAxisFlag]] flag ''')'''Gets a generic_6_DOF_joint flag (see [[#G6DOFJointAxisFlag|G6DOFJointAxisFlag]] constants).=== generic_6dof_joint_get_param ===*  float '''generic_6dof_joint_get_param''' '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisParam|G6DOFJointAxisParam]] param ''')'''Gets a generic_6_DOF_joint parameter (see [[#G6DOFJointAxisParam|G6DOFJointAxisParam]] constants).=== generic_6dof_joint_set_flag ===*  void '''generic_6dof_joint_set_flag''' '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisFlag|G6DOFJointAxisFlag]] flag, bool enable ''')'''Sets a generic_6_DOF_joint flag (see [[#G6DOFJointAxisFlag|G6DOFJointAxisFlag]] constants).=== generic_6dof_joint_set_param ===*  void '''generic_6dof_joint_set_param''' '''(''' [[RID GD|RID]] joint, Vector3.Axis axis, [[#G6DOFJointAxisParam|G6DOFJointAxisParam]] param, float value ''')'''Sets a generic_6_DOF_joint parameter (see [[#G6DOFJointAxisParam|G6DOFJointAxisParam]] constants).=== get_process_info ===*  int '''get_process_info''' '''(''' [[#ProcessInfo|ProcessInfo]] process_info ''')'''Returns an Info defined by the [[#ProcessInfo|ProcessInfo]] input given.=== hinge_joint_get_flag ===*  bool '''hinge_joint_get_flag''' '''(''' [[RID GD|RID]] joint, [[#HingeJointFlag|HingeJointFlag]] flag ''')''' constGets a hinge_joint flag (see [[#HingeJointFlag|HingeJointFlag]] constants).=== hinge_joint_get_param ===*  float '''hinge_joint_get_param''' '''(''' [[RID GD|RID]] joint, [[#HingeJointParam|HingeJointParam]] param ''')''' constGets a hinge_joint parameter (see [[#HingeJointParam|HingeJointParam]]).=== hinge_joint_set_flag ===*  void '''hinge_joint_set_flag''' '''(''' [[RID GD|RID]] joint, [[#HingeJointFlag|HingeJointFlag]] flag, bool enabled ''')'''Sets a hinge_joint flag (see [[#HingeJointFlag|HingeJointFlag]] constants).=== hinge_joint_set_param ===*  void '''hinge_joint_set_param''' '''(''' [[RID GD|RID]] joint, [[#HingeJointParam|HingeJointParam]] param, float value ''')'''Sets a hinge_joint parameter (see [[#HingeJointParam|HingeJointParam]] constants).=== joint_create_cone_twist ===*  [[RID GD|RID]] '''joint_create_cone_twist''' '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] local_ref_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] local_ref_B ''')'''Creates a [[ConeTwistJoint GD|ConeTwistJoint]].=== joint_create_generic_6dof ===*  [[RID GD|RID]] '''joint_create_generic_6dof''' '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] local_ref_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] local_ref_B ''')'''Creates a [[Generic6DOFJoint GD|Generic6DOFJoint]].=== joint_create_hinge ===*  [[RID GD|RID]] '''joint_create_hinge''' '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] hinge_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] hinge_B ''')'''Creates a [[HingeJoint GD|HingeJoint]].=== joint_create_pin ===*  [[RID GD|RID]] '''joint_create_pin''' '''(''' [[RID GD|RID]] body_A, [[Vector3 GD|Vector3]] local_A, [[RID GD|RID]] body_B, [[Vector3 GD|Vector3]] local_B ''')'''Creates a [[PinJoint GD|PinJoint]].=== joint_create_slider ===*  [[RID GD|RID]] '''joint_create_slider''' '''(''' [[RID GD|RID]] body_A, [[Transform GD|Transform]] local_ref_A, [[RID GD|RID]] body_B, [[Transform GD|Transform]] local_ref_B ''')'''Creates a [[SliderJoint GD|SliderJoint]].=== joint_get_solver_priority ===*  int '''joint_get_solver_priority''' '''(''' [[RID GD|RID]] joint ''')''' constGets the priority value of the Joint.=== joint_get_type ===*  [[#JointType|JointType]] '''joint_get_type''' '''(''' [[RID GD|RID]] joint ''')''' constReturns the type of the Joint.=== joint_set_solver_priority ===*  void '''joint_set_solver_priority''' '''(''' [[RID GD|RID]] joint, int priority ''')'''Sets the priority value of the Joint.=== pin_joint_get_local_a ===*  [[Vector3 GD|Vector3]] '''pin_joint_get_local_a''' '''(''' [[RID GD|RID]] joint ''')''' constReturns position of the joint in the local space of body a of the joint.=== pin_joint_get_local_b ===*  [[Vector3 GD|Vector3]] '''pin_joint_get_local_b''' '''(''' [[RID GD|RID]] joint ''')''' constReturns position of the joint in the local space of body b of the joint.=== pin_joint_get_param ===*  float '''pin_joint_get_param''' '''(''' [[RID GD|RID]] joint, [[#PinJointParam|PinJointParam]] param ''')''' constGets a pin_joint parameter (see [[#PinJointParam|PinJointParam]] constants).=== pin_joint_set_local_a ===*  void '''pin_joint_set_local_a''' '''(''' [[RID GD|RID]] joint, [[Vector3 GD|Vector3]] local_A ''')'''Sets position of the joint in the local space of body a of the joint.=== pin_joint_set_local_b ===*  void '''pin_joint_set_local_b''' '''(''' [[RID GD|RID]] joint, [[Vector3 GD|Vector3]] local_B ''')'''Sets position of the joint in the local space of body b of the joint.=== pin_joint_set_param ===*  void '''pin_joint_set_param''' '''(''' [[RID GD|RID]] joint, [[#PinJointParam|PinJointParam]] param, float value ''')'''Sets a pin_joint parameter (see [[#PinJointParam|PinJointParam]] constants).=== set_active ===*  void '''set_active''' '''(''' bool active ''')'''Activates or deactivates the 3D physics engine.=== shape_create ===*  [[RID GD|RID]] '''shape_create''' '''(''' [[#ShapeType|ShapeType]] type ''')'''Creates a shape of a type from [[#ShapeType|ShapeType]]. Does not assign it to a body or an area. To do so, you must use [[#area_set_shape|area_set_shape]] or [[#body_set_shape|body_set_shape]].=== shape_get_data ===*  [[Variant GD|Variant]] '''shape_get_data''' '''(''' [[RID GD|RID]] shape ''')''' constReturns the shape data.=== shape_get_type ===*  [[#ShapeType|ShapeType]] '''shape_get_type''' '''(''' [[RID GD|RID]] shape ''')''' constReturns the type of shape (see [[#ShapeType|ShapeType]] constants).=== shape_set_data ===*  void '''shape_set_data''' '''(''' [[RID GD|RID]] shape, [[Variant GD|Variant]] data ''')'''Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [[#shape_get_type|shape_get_type]].=== slider_joint_get_param ===*  float '''slider_joint_get_param''' '''(''' [[RID GD|RID]] joint, [[#SliderJointParam|SliderJointParam]] param ''')''' constGets a slider_joint parameter (see [[#SliderJointParam|SliderJointParam]] constants).=== slider_joint_set_param ===*  void '''slider_joint_set_param''' '''(''' [[RID GD|RID]] joint, [[#SliderJointParam|SliderJointParam]] param, float value ''')'''Gets a slider_joint parameter (see [[#SliderJointParam|SliderJointParam]] constants).=== space_create ===*  [[RID GD|RID]] '''space_create ( )'''Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [[#area_set_space|area_set_space]], or to a body with [[#body_set_space|body_set_space]].=== space_get_direct_state ===*  [[PhysicsDirectSpaceState GD|PhysicsDirectSpaceState]] '''space_get_direct_state''' '''(''' [[RID GD|RID]] space ''')'''Returns the state of a space, a [[PhysicsDirectSpaceState GD|PhysicsDirectSpaceState]]. This object can be used to make collision/intersection queries.=== space_get_param ===*  float '''space_get_param''' '''(''' [[RID GD|RID]] space, [[#SpaceParameter|SpaceParameter]] param ''')''' constReturns the value of a space parameter.=== space_is_active ===*  bool '''space_is_active''' '''(''' [[RID GD|RID]] space ''')''' constReturns whether the space is active.=== space_set_active ===*  void '''space_set_active''' '''(''' [[RID GD|RID]] space, bool active ''')'''Marks a space as active. It will not have an effect, unless it is assigned to an area or body.=== space_set_param ===*  void '''space_set_param''' '''(''' [[RID GD|RID]] space, [[#SpaceParameter|SpaceParameter]] param, float value ''')'''Sets the value for a space parameter. A list of available parameters is on the [[#SpaceParameter|SpaceParameter]] constants.