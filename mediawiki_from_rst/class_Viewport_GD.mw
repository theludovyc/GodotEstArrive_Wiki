__NOTOC__'''Inherits:''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Creates a sub-view into the screen.== Description ==A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.If a viewport is a child of a [[ViewportContainer GD|ViewportContainer]], it will automatically take up its size, otherwise it must be set manually.Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.Also, viewports can be assigned to different screens in case the devices have multiple screens.Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.== Tutorials ==*  :doc:`../tutorials/2d/2d_transforms`*  :doc:`../tutorials/viewports/index`== Properties =={| class="wikitable | bool|| [[#arvr|arvr]]|| {{Span|false}}           |-| bool|| [[#audio_listener_enable_2d|audio_listener_enable_2d]]|| {{Span|false}}           |-| bool|| [[#audio_listener_enable_3d|audio_listener_enable_3d]]|| {{Span|false}}           |-| [[#DefaultCanvasItemTextureFilter|DefaultCanvasItemTextureFilter]]|| [[#canvas_item_default_texture_filter|canvas_item_default_texture_filter]]|| {{Span|1}}               |-| [[#DefaultCanvasItemTextureRepeat|DefaultCanvasItemTextureRepeat]]|| [[#canvas_item_default_texture_repeat|canvas_item_default_texture_repeat]]|| {{Span|0}}               |-| [[Transform2D GD|Transform2D]]|| [[#canvas_transform|canvas_transform]]||                     |-| [[#DebugDraw|DebugDraw]]|| [[#debug_draw|debug_draw]]|| {{Span|0}}               |-| [[Transform2D GD|Transform2D]]|| [[#global_canvas_transform|global_canvas_transform]]||                     |-| bool|| [[#gui_disable_input|gui_disable_input]]|| {{Span|false}}           |-| bool|| [[#gui_snap_controls_to_pixels|gui_snap_controls_to_pixels]]|| {{Span|true}}            |-| bool|| [[#handle_input_locally|handle_input_locally]]|| {{Span|true}}            |-| [[#MSAA|MSAA]]|| [[#msaa|msaa]]|| {{Span|0}}               |-| bool|| [[#own_world|own_world]]|| {{Span|false}}           |-| bool|| [[#physics_object_picking|physics_object_picking]]|| {{Span|false}}           |-| bool|| [[#render_direct_to_screen|render_direct_to_screen]]|| {{Span|false}}           |-| [[#ClearMode|ClearMode]]|| [[#render_target_clear_mode|render_target_clear_mode]]|| {{Span|0}}               |-| [[#UpdateMode|UpdateMode]]|| [[#render_target_update_mode|render_target_update_mode]]|| {{Span|2}}               |-| [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]]|| [[#shadow_atlas_quad_0|shadow_atlas_quad_0]]|| {{Span|2}}               |-| [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]]|| [[#shadow_atlas_quad_1|shadow_atlas_quad_1]]|| {{Span|2}}               |-| [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]]|| [[#shadow_atlas_quad_2|shadow_atlas_quad_2]]|| {{Span|3}}               |-| [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]]|| [[#shadow_atlas_quad_3|shadow_atlas_quad_3]]|| {{Span|4}}               |-| int|| [[#shadow_atlas_size|shadow_atlas_size]]|| {{Span|0}}               |-| [[Vector2 GD|Vector2]]|| [[#size|size]]|| {{Span|Vector2( 0, 0 )}} |-| bool|| [[#size_override_stretch|size_override_stretch]]|| {{Span|false}}           |-| bool|| [[#transparent_bg|transparent_bg]]|| {{Span|false}}           |-| [[World GD|World]]|| [[#world|world]]||                     |-| [[World2D GD|World2D]]|| [[#world_2d|world_2d]]||                     |}== Methods =={| class="wikitable | [[World GD|World]]|| [[#find_world|find_world]] '''(''' ''')''' const                                                                                                                                                        |-| [[World2D GD|World2D]]|| [[#find_world_2d|find_world_2d]] '''(''' ''')''' const                                                                                                                                                  |-| [[Camera GD|Camera]]|| [[#get_camera|get_camera]] '''(''' ''')''' const                                                                                                                                                        |-| [[Transform2D GD|Transform2D]]|| [[#get_final_transform|get_final_transform]] '''(''' ''')''' const                                                                                                                                      |-| [[Control GD|Control]]|| [[#get_modal_stack_top|get_modal_stack_top]] '''(''' ''')''' const                                                                                                                                      |-| [[Vector2 GD|Vector2]]|| [[#get_mouse_position|get_mouse_position]] '''(''' ''')''' const                                                                                                                                        |-| int|| [[#get_render_info|get_render_info]] '''(''' [[#RenderInfo|RenderInfo]] info ''')'''                                                                                                   |-| [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]]|| [[#get_shadow_atlas_quadrant_subdiv|get_shadow_atlas_quadrant_subdiv]] '''(''' int quadrant ''')''' const                                                                             |-| [[Vector2 GD|Vector2]]|| [[#get_size_override|get_size_override]] '''(''' ''')''' const                                                                                                                                          |-| [[ViewportTexture GD|ViewportTexture]]|| [[#get_texture|get_texture]] '''(''' ''')''' const                                                                                                                                                      |-| [[RID GD|RID]]|| [[#get_viewport_rid|get_viewport_rid]] '''(''' ''')''' const                                                                                                                                            |-| [[Rect2 GD|Rect2]]|| [[#get_visible_rect|get_visible_rect]] '''(''' ''')''' const                                                                                                                                            |-| [[Variant GD|Variant]]|| [[#gui_get_drag_data|gui_get_drag_data]] '''(''' ''')''' const                                                                                                                                          |-| bool|| [[#gui_has_modal_stack|gui_has_modal_stack]] '''(''' ''')''' const                                                                                                                                      |-| bool|| [[#gui_is_dragging|gui_is_dragging]] '''(''' ''')''' const                                                                                                                                              |-| void|| [[#input|input]] '''(''' [[InputEvent GD|InputEvent]] local_event ''')'''                                                                                                                        |-| bool|| [[#is_input_handled|is_input_handled]] '''(''' ''')''' const                                                                                                                                            |-| bool|| [[#is_size_override_enabled|is_size_override_enabled]] '''(''' ''')''' const                                                                                                                            |-| void|| [[#set_attach_to_screen_rect|set_attach_to_screen_rect]] '''(''' [[Rect2 GD|Rect2]] rect ''')'''                                                                                                 |-| void|| [[#set_input_as_handled|set_input_as_handled]] '''(''' ''')'''                                                                                                                                          |-| void|| [[#set_shadow_atlas_quadrant_subdiv|set_shadow_atlas_quadrant_subdiv]] '''(''' int quadrant, [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] subdiv ''')''' |-| void|| [[#set_size_override|set_size_override]] '''(''' bool enable, [[Vector2 GD|Vector2]] size=Vector2( -1, -1 ), [[Vector2 GD|Vector2]] margin=Vector2( 0, 0 ) ''')'''     |-| void|| [[#unhandled_input|unhandled_input]] '''(''' [[InputEvent GD|InputEvent]] local_event ''')'''                                                                                                    |-| void|| [[#update_worlds|update_worlds]] '''(''' ''')'''                                                                                                                                                        |-| void|| [[#warp_mouse|warp_mouse]] '''(''' [[Vector2 GD|Vector2]] to_position ''')'''                                                                                                                    |}== Signals ===== gui_focus_changed ===*  '''gui_focus_changed''' '''(''' [[Control GD|Control]] node ''')'''Emitted when a Control node grabs keyboard focus.=== size_changed ===*  '''size_changed ( )'''Emitted when the size of the viewport is changed, whether by [[#set_size_override|set_size_override]], resize of window, or some other means.== Enumerations ===== UpdateMode ====== UPDATE_DISABLED ====== UPDATE_ONCE ====== UPDATE_WHEN_VISIBLE ====== UPDATE_ALWAYS ===enum '''UpdateMode''':*  '''UPDATE_DISABLED''' = '''0'''  Do not update the render target.*  '''UPDATE_ONCE''' = '''1'''  Update the render target once, then switch to [[Viewport GD#UPDATE_DISABLED|UPDATE_DISABLED]].*  '''UPDATE_WHEN_VISIBLE''' = '''2'''  Update the render target only when it is visible. This is the default value.*  '''UPDATE_ALWAYS''' = '''3'''  Always update the render target.=== ShadowAtlasQuadrantSubdiv ====== SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED ====== SHADOW_ATLAS_QUADRANT_SUBDIV_1 ====== SHADOW_ATLAS_QUADRANT_SUBDIV_4 ====== SHADOW_ATLAS_QUADRANT_SUBDIV_16 ====== SHADOW_ATLAS_QUADRANT_SUBDIV_64 ====== SHADOW_ATLAS_QUADRANT_SUBDIV_256 ====== SHADOW_ATLAS_QUADRANT_SUBDIV_1024 ====== SHADOW_ATLAS_QUADRANT_SUBDIV_MAX ===enum '''ShadowAtlasQuadrantSubdiv''':*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED''' = '''0'''  This quadrant will not be used.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_1''' = '''1'''  This quadrant will only be used by one shadow map.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_4''' = '''2'''  This quadrant will be split in 4 and used by up to 4 shadow maps.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_16''' = '''3'''  This quadrant will be split 16 ways and used by up to 16 shadow maps.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_64''' = '''4'''  This quadrant will be split 64 ways and used by up to 64 shadow maps.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_256''' = '''5'''  This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the [[#shadow_atlas_size|shadow_atlas_size]] is very high, the shadows in this quadrant will be very low resolution.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_1024''' = '''6'''  This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the [[#shadow_atlas_size|shadow_atlas_size]] is very high, the shadows in this quadrant will be very low resolution.*  '''SHADOW_ATLAS_QUADRANT_SUBDIV_MAX''' = '''7'''  Represents the size of the [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] enum.=== RenderInfo ====== RENDER_INFO_OBJECTS_IN_FRAME ====== RENDER_INFO_VERTICES_IN_FRAME ====== RENDER_INFO_MATERIAL_CHANGES_IN_FRAME ====== RENDER_INFO_SHADER_CHANGES_IN_FRAME ====== RENDER_INFO_SURFACE_CHANGES_IN_FRAME ====== RENDER_INFO_DRAW_CALLS_IN_FRAME ====== RENDER_INFO_MAX ===enum '''RenderInfo''':*  '''RENDER_INFO_OBJECTS_IN_FRAME''' = '''0'''  Amount of objects in frame.*  '''RENDER_INFO_VERTICES_IN_FRAME''' = '''1'''  Amount of vertices in frame.*  '''RENDER_INFO_MATERIAL_CHANGES_IN_FRAME''' = '''2'''  Amount of material changes in frame.*  '''RENDER_INFO_SHADER_CHANGES_IN_FRAME''' = '''3'''  Amount of shader changes in frame.*  '''RENDER_INFO_SURFACE_CHANGES_IN_FRAME''' = '''4'''  Amount of surface changes in frame.*  '''RENDER_INFO_DRAW_CALLS_IN_FRAME''' = '''5'''  Amount of draw calls in frame.*  '''RENDER_INFO_MAX''' = '''6'''  Represents the size of the [[#RenderInfo|RenderInfo]] enum.=== DebugDraw ====== DEBUG_DRAW_DISABLED ====== DEBUG_DRAW_UNSHADED ====== DEBUG_DRAW_OVERDRAW ====== DEBUG_DRAW_WIREFRAME ====== DEBUG_DRAW_GI_PROBE_ALBEDO ====== DEBUG_DRAW_GI_PROBE_LIGHTING ====== DEBUG_DRAW_GI_PROBE_EMISSION ====== DEBUG_DRAW_SHADOW_ATLAS ====== DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS ====== DEBUG_DRAW_SCENE_LUMINANCE ====== DEBUG_DRAW_SSAO ===enum '''DebugDraw''':*  '''DEBUG_DRAW_DISABLED''' = '''0'''  Objects are displayed normally.*  '''DEBUG_DRAW_UNSHADED''' = '''1'''  Objects are displayed without light information.*  '''DEBUG_DRAW_OVERDRAW''' = '''3'''  Objected are displayed semi-transparent with additive blending so you can see where they intersect.*  '''DEBUG_DRAW_WIREFRAME''' = '''4'''  Objects are displayed in wireframe style.*  '''DEBUG_DRAW_GI_PROBE_ALBEDO''' = '''6'''*  '''DEBUG_DRAW_GI_PROBE_LIGHTING''' = '''7'''*  '''DEBUG_DRAW_GI_PROBE_EMISSION''' = '''8'''*  '''DEBUG_DRAW_SHADOW_ATLAS''' = '''9'''*  '''DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS''' = '''10'''*  '''DEBUG_DRAW_SCENE_LUMINANCE''' = '''11'''*  '''DEBUG_DRAW_SSAO''' = '''12'''=== MSAA ====== MSAA_DISABLED ====== MSAA_2X ====== MSAA_4X ====== MSAA_8X ====== MSAA_16X ===enum '''MSAA''':*  '''MSAA_DISABLED''' = '''0'''  Multisample anti-aliasing mode disabled. This is the default value.*  '''MSAA_2X''' = '''1'''  Use 2x Multisample Antialiasing.*  '''MSAA_4X''' = '''2'''  Use 4x Multisample Antialiasing.*  '''MSAA_8X''' = '''3'''  Use 8x Multisample Antialiasing. Likely unsupported on low-end and older hardware.*  '''MSAA_16X''' = '''4'''  Use 16x Multisample Antialiasing. Likely unsupported on medium and low-end hardware.=== ClearMode ====== CLEAR_MODE_ALWAYS ====== CLEAR_MODE_NEVER ====== CLEAR_MODE_ONLY_NEXT_FRAME ===enum '''ClearMode''':*  '''CLEAR_MODE_ALWAYS''' = '''0'''  Always clear the render target before drawing.*  '''CLEAR_MODE_NEVER''' = '''1'''  Never clear the render target.*  '''CLEAR_MODE_ONLY_NEXT_FRAME''' = '''2'''  Clear the render target next frame, then switch to [[Viewport GD#CLEAR_MODE_NEVER|CLEAR_MODE_NEVER]].=== DefaultCanvasItemTextureFilter ====== DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST ====== DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR ====== DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS ====== DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS ====== DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX ===enum '''DefaultCanvasItemTextureFilter''':*  '''DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST''' = '''0'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR''' = '''1'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS''' = '''2'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS''' = '''3'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX''' = '''4'''=== DefaultCanvasItemTextureRepeat ====== DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED ====== DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED ====== DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR ====== DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX ===enum '''DefaultCanvasItemTextureRepeat''':*  '''DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED''' = '''0'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED''' = '''1'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR''' = '''2'''*  '''DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX''' = '''3'''== Property Descriptions ===== arvr ===*  bool '''arvr'''{| class="wikitable | ''Default''|| {{Span|false}}           |-| ''Setter''|| set_use_arvr(value) |-| ''Getter''|| use_arvr()          |}If {{Span|true}}, the viewport will be used in AR/VR process.=== audio_listener_enable_2d ===*  bool '''audio_listener_enable_2d'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| set_as_audio_listener_2d(value) |-| ''Getter''|| is_audio_listener_2d()          |}If {{Span|true}}, the viewport will process 2D audio streams.=== audio_listener_enable_3d ===*  bool '''audio_listener_enable_3d'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| set_as_audio_listener(value) |-| ''Getter''|| is_audio_listener()          |}If {{Span|true}}, the viewport will process 3D audio streams.=== canvas_item_default_texture_filter ===*  [[#DefaultCanvasItemTextureFilter|DefaultCanvasItemTextureFilter]] '''canvas_item_default_texture_filter'''{| class="wikitable | ''Default''|| {{Span|1}}                                         |-| ''Setter''|| set_default_canvas_item_texture_filter(value) |-| ''Getter''|| get_default_canvas_item_texture_filter()      |}=== canvas_item_default_texture_repeat ===*  [[#DefaultCanvasItemTextureRepeat|DefaultCanvasItemTextureRepeat]] '''canvas_item_default_texture_repeat'''{| class="wikitable | ''Default''|| {{Span|0}}                                         |-| ''Setter''|| set_default_canvas_item_texture_repeat(value) |-| ''Getter''|| get_default_canvas_item_texture_repeat()      |}=== canvas_transform ===*  [[Transform2D GD|Transform2D]] '''canvas_transform'''{| class="wikitable | ''Setter''|| set_canvas_transform(value) |-| ''Getter''|| get_canvas_transform()      |}The canvas transform of the viewport, useful for changing the on-screen positions of all child [[CanvasItem GD|CanvasItem]]\ s. This is relative to the global canvas transform of the viewport.=== debug_draw ===*  [[#DebugDraw|DebugDraw]] '''debug_draw'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_debug_draw(value) |-| ''Getter''|| get_debug_draw()      |}The overlay mode for test rendered geometry in debug purposes.=== global_canvas_transform ===*  [[Transform2D GD|Transform2D]] '''global_canvas_transform'''{| class="wikitable | ''Setter''|| set_global_canvas_transform(value) |-| ''Getter''|| get_global_canvas_transform()      |}The global canvas transform of the viewport. The canvas transform is relative to this.=== gui_disable_input ===*  bool '''gui_disable_input'''{| class="wikitable | ''Default''|| {{Span|false}}                |-| ''Setter''|| set_disable_input(value) |-| ''Getter''|| is_input_disabled()      |}If {{Span|true}}, the viewport will not receive input event.=== gui_snap_controls_to_pixels ===*  bool '''gui_snap_controls_to_pixels'''{| class="wikitable | ''Default''|| {{Span|true}}                             |-| ''Setter''|| set_snap_controls_to_pixels(value)   |-| ''Getter''|| is_snap_controls_to_pixels_enabled() |}If {{Span|true}}, the GUI controls on the viewport will lay pixel perfectly.=== handle_input_locally ===*  bool '''handle_input_locally'''{| class="wikitable | ''Default''|| {{Span|true}}                        |-| ''Setter''|| set_handle_input_locally(value) |-| ''Getter''|| is_handling_input_locally()     |}=== msaa ===*  [[#MSAA|MSAA]] '''msaa'''{| class="wikitable | ''Default''|| {{Span|0}}           |-| ''Setter''|| set_msaa(value) |-| ''Getter''|| get_msaa()      |}The multisample anti-aliasing mode. A higher number results in smoother edges at the cost of significantly worse performance. A value of 4 is best unless targeting very high-end systems.=== own_world ===*  bool '''own_world'''{| class="wikitable | ''Default''|| {{Span|false}}                |-| ''Setter''|| set_use_own_world(value) |-| ''Getter''|| is_using_own_world()     |}If {{Span|true}}, the viewport will use [[World GD|World]] defined in {{Span|world}} property.=== physics_object_picking ===*  bool '''physics_object_picking'''{| class="wikitable | ''Default''|| {{Span|false}}                         |-| ''Setter''|| set_physics_object_picking(value) |-| ''Getter''|| get_physics_object_picking()      |}If {{Span|true}}, the objects rendered by viewport become subjects of mouse picking process.=== render_direct_to_screen ===*  bool '''render_direct_to_screen'''{| class="wikitable | ''Default''|| {{Span|false}}                              |-| ''Setter''|| set_use_render_direct_to_screen(value) |-| ''Getter''|| is_using_render_direct_to_screen()     |}If {{Span|true}}, renders the Viewport directly to the screen instead of to the root viewport. Only available in GLES2. This is a low-level optimization and should not be used in most cases. If used, reading from the Viewport or from {{Span|SCREEN_TEXTURE}} becomes unavailable. For more information see [[VisualServer GD#viewport_set_render_direct_to_screen|VisualServer.viewport_set_render_direct_to_screen()]].=== render_target_clear_mode ===*  [[#ClearMode|ClearMode]] '''render_target_clear_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_clear_mode(value) |-| ''Getter''|| get_clear_mode()      |}The clear mode when viewport used as a render target.=== render_target_update_mode ===*  [[#UpdateMode|UpdateMode]] '''render_target_update_mode'''{| class="wikitable | ''Default''|| {{Span|2}}                  |-| ''Setter''|| set_update_mode(value) |-| ''Getter''|| get_update_mode()      |}The update mode when viewport used as a render target.=== shadow_atlas_quad_0 ===*  [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] '''shadow_atlas_quad_0'''{| class="wikitable | ''Default''|| {{Span|2}}                                   |-| ''Setter''|| set_shadow_atlas_quadrant_subdiv(value) |-| ''Getter''|| get_shadow_atlas_quadrant_subdiv()      |}The subdivision amount of the first quadrant on the shadow atlas.=== shadow_atlas_quad_1 ===*  [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] '''shadow_atlas_quad_1'''{| class="wikitable | ''Default''|| {{Span|2}}                                   |-| ''Setter''|| set_shadow_atlas_quadrant_subdiv(value) |-| ''Getter''|| get_shadow_atlas_quadrant_subdiv()      |}The subdivision amount of the second quadrant on the shadow atlas.=== shadow_atlas_quad_2 ===*  [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] '''shadow_atlas_quad_2'''{| class="wikitable | ''Default''|| {{Span|3}}                                   |-| ''Setter''|| set_shadow_atlas_quadrant_subdiv(value) |-| ''Getter''|| get_shadow_atlas_quadrant_subdiv()      |}The subdivision amount of the third quadrant on the shadow atlas.=== shadow_atlas_quad_3 ===*  [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] '''shadow_atlas_quad_3'''{| class="wikitable | ''Default''|| {{Span|4}}                                   |-| ''Setter''|| set_shadow_atlas_quadrant_subdiv(value) |-| ''Getter''|| get_shadow_atlas_quadrant_subdiv()      |}The subdivision amount of the fourth quadrant on the shadow atlas.=== shadow_atlas_size ===*  int '''shadow_atlas_size'''{| class="wikitable | ''Default''|| {{Span|0}}                        |-| ''Setter''|| set_shadow_atlas_size(value) |-| ''Getter''|| get_shadow_atlas_size()      |}The shadow atlas' resolution (used for omni and spot lights). The value will be rounded up to the nearest power of 2.'''Note:''' If this is set to 0, shadows won't be visible. Since user-created viewports default to a value of 0, this value must be set above 0 manually.=== size ===*  [[Vector2 GD|Vector2]] '''size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}} |-| ''Setter''|| set_size(value)     |-| ''Getter''|| get_size()          |}The width and height of viewport.=== size_override_stretch ===*  bool '''size_override_stretch'''{| class="wikitable | ''Default''|| {{Span|false}}                          |-| ''Setter''|| set_size_override_stretch(value)   |-| ''Getter''|| is_size_override_stretch_enabled() |}If {{Span|true}}, the size override affects stretch as well.=== transparent_bg ===*  bool '''transparent_bg'''{| class="wikitable | ''Default''|| {{Span|false}}                         |-| ''Setter''|| set_transparent_background(value) |-| ''Getter''|| has_transparent_background()      |}If {{Span|true}}, the viewport should render its background as transparent.=== world ===*  [[World GD|World]] '''world'''{| class="wikitable | ''Setter''|| set_world(value) |-| ''Getter''|| get_world()      |}The custom [[World GD|World]] which can be used as 3D environment source.=== world_2d ===*  [[World2D GD|World2D]] '''world_2d'''{| class="wikitable | ''Setter''|| set_world_2d(value) |-| ''Getter''|| get_world_2d()      |}The custom [[World2D GD|World2D]] which can be used as 2D environment source.== Method Descriptions ===== find_world ===*  [[World GD|World]] '''find_world ( )''' constReturns the 3D world of the viewport, or if none the world of the parent viewport.=== find_world_2d ===*  [[World2D GD|World2D]] '''find_world_2d ( )''' constReturns the 2D world of the viewport.=== get_camera ===*  [[Camera GD|Camera]] '''get_camera ( )''' constReturns the active 3D camera.=== get_final_transform ===*  [[Transform2D GD|Transform2D]] '''get_final_transform ( )''' constReturns the total transform of the viewport.=== get_modal_stack_top ===*  [[Control GD|Control]] '''get_modal_stack_top ( )''' constReturns the topmost modal in the stack.=== get_mouse_position ===*  [[Vector2 GD|Vector2]] '''get_mouse_position ( )''' constReturns the mouse position relative to the viewport.=== get_render_info ===*  int '''get_render_info''' '''(''' [[#RenderInfo|RenderInfo]] info ''')'''Returns information about the viewport from the rendering pipeline.=== get_shadow_atlas_quadrant_subdiv ===*  [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] '''get_shadow_atlas_quadrant_subdiv''' '''(''' int quadrant ''')''' constReturns the [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] of the specified quadrant.=== get_size_override ===*  [[Vector2 GD|Vector2]] '''get_size_override ( )''' constReturns the size override set with [[#set_size_override|set_size_override]].=== get_texture ===*  [[ViewportTexture GD|ViewportTexture]] '''get_texture ( )''' constReturns the viewport's texture.'''Note:''' Due to the way OpenGL works, the resulting [[ViewportTexture GD|ViewportTexture]] is flipped vertically. You can use [[Image GD#flip_y|Image.flip_y()]] on the result of [[Texture2D GD#get_data|Texture2D.get_data()]] to flip it back, for example:::    var img = get_viewport().get_texture().get_data()    img.flip_y()=== get_viewport_rid ===*  [[RID GD|RID]] '''get_viewport_rid ( )''' constReturns the viewport's RID from the [[VisualServer GD|VisualServer]].=== get_visible_rect ===*  [[Rect2 GD|Rect2]] '''get_visible_rect ( )''' constReturns the visible rectangle in global screen coordinates.=== gui_get_drag_data ===*  [[Variant GD|Variant]] '''gui_get_drag_data ( )''' constReturns the drag data from the GUI, that was previously returned by [[Control GD#get_drag_data|Control.get_drag_data()]].=== gui_has_modal_stack ===*  bool '''gui_has_modal_stack ( )''' constReturns {{Span|true}} if there are visible modals on-screen.=== gui_is_dragging ===*  bool '''gui_is_dragging ( )''' constReturns {{Span|true}} if the viewport is currently performing a drag operation.=== input ===*  void '''input''' '''(''' [[InputEvent GD|InputEvent]] local_event ''')'''=== is_input_handled ===*  bool '''is_input_handled ( )''' const=== is_size_override_enabled ===*  bool '''is_size_override_enabled ( )''' constReturns {{Span|true}} if the size override is enabled. See [[#set_size_override|set_size_override]].=== set_attach_to_screen_rect ===*  void '''set_attach_to_screen_rect''' '''(''' [[Rect2 GD|Rect2]] rect ''')'''Attaches this {{Span|Viewport}} to the root {{Span|Viewport}} with the specified rectangle. This bypasses the need for another node to display this {{Span|Viewport}} but makes you responsible for updating the position of this {{Span|Viewport}} manually.=== set_input_as_handled ===*  void '''set_input_as_handled ( )'''Stops the input from propagating further down the [[SceneTree GD|SceneTree]].=== set_shadow_atlas_quadrant_subdiv ===*  void '''set_shadow_atlas_quadrant_subdiv''' '''(''' int quadrant, [[#ShadowAtlasQuadrantSubdiv|ShadowAtlasQuadrantSubdiv]] subdiv ''')'''Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible.=== set_size_override ===*  void '''set_size_override''' '''(''' bool enable, [[Vector2 GD|Vector2]] size=Vector2( -1, -1 ), [[Vector2 GD|Vector2]] margin=Vector2( 0, 0 ) ''')'''Sets the size override of the viewport. If the {{Span|enable}} parameter is {{Span|true}} the override is used, otherwise it uses the default size. If the size parameter is {{Span|(-1, -1)}}, it won't update the size.=== unhandled_input ===*  void '''unhandled_input''' '''(''' [[InputEvent GD|InputEvent]] local_event ''')'''=== update_worlds ===*  void '''update_worlds ( )'''Forces update of the 2D and 3D worlds.=== warp_mouse ===*  void '''warp_mouse''' '''(''' [[Vector2 GD|Vector2]] to_position ''')'''Warps the mouse to a position relative to the viewport.