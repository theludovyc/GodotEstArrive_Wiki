__NOTOC__'''Inherits:''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Used by the editor to extend its functionality.== Description ==Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also [[EditorScript GD|EditorScript]] to add functions to the editor.== Tutorials ==*  :doc:`../tutorials/plugins/editor/index`== Methods =={| class="wikitable | void|| [[#add_autoload_singleton|add_autoload_singleton]] '''(''' [[String GD|String]] name, [[String GD|String]] path ''')'''                                                                         |-| [[ToolButton GD|ToolButton]]|| [[#add_control_to_bottom_panel|add_control_to_bottom_panel]] '''(''' [[Control GD|Control]] control, [[String GD|String]] title ''')'''                                                         |-| void|| [[#add_control_to_container|add_control_to_container]] '''(''' [[#CustomControlContainer|CustomControlContainer]] container, [[Control GD|Control]] control ''')'''               |-| void|| [[#add_control_to_dock|add_control_to_dock]] '''(''' [[#DockSlot|DockSlot]] slot, [[Control GD|Control]] control ''')'''                                                          |-| void|| [[#add_custom_type|add_custom_type]] '''(''' [[String GD|String]] type, [[String GD|String]] base, [[Script GD|Script]] script, [[Texture2D GD|Texture2D]] icon ''')'''           |-| void|| [[#add_export_plugin|add_export_plugin]] '''(''' [[EditorExportPlugin GD|EditorExportPlugin]] plugin ''')'''                                                                                           |-| void|| [[#add_import_plugin|add_import_plugin]] '''(''' [[EditorImportPlugin GD|EditorImportPlugin]] importer ''')'''                                                                                         |-| void|| [[#add_inspector_plugin|add_inspector_plugin]] '''(''' [[EditorInspectorPlugin GD|EditorInspectorPlugin]] plugin ''')'''                                                                               |-| void|| [[#add_scene_import_plugin|add_scene_import_plugin]] '''(''' [[EditorSceneImporter GD|EditorSceneImporter]] scene_importer ''')'''                                                                     |-| void|| [[#add_spatial_gizmo_plugin|add_spatial_gizmo_plugin]] '''(''' [[EditorSpatialGizmoPlugin GD|EditorSpatialGizmoPlugin]] plugin ''')'''                                                                 |-| void|| [[#add_tool_menu_item|add_tool_menu_item]] '''(''' [[String GD|String]] name, [[Object GD|Object]] handler, [[String GD|String]] callback, [[Variant GD|Variant]] ud=null ''')''' |-| void|| [[#add_tool_submenu_item|add_tool_submenu_item]] '''(''' [[String GD|String]] name, [[Object GD|Object]] submenu ''')'''                                                                        |-| void|| [[#apply_changes|apply_changes]] '''(''' ''')''' virtual                                                                                                                                                      |-| bool|| [[#build|build]] '''(''' ''')''' virtual                                                                                                                                                                      |-| void|| [[#clear|clear]] '''(''' ''')''' virtual                                                                                                                                                                      |-| void|| [[#disable_plugin|disable_plugin]] '''(''' ''')''' virtual                                                                                                                                                    |-| void|| [[#edit|edit]] '''(''' [[Object GD|Object]] object ''')''' virtual                                                                                                                                     |-| void|| [[#enable_plugin|enable_plugin]] '''(''' ''')''' virtual                                                                                                                                                      |-| void|| [[#forward_canvas_draw_over_viewport|forward_canvas_draw_over_viewport]] '''(''' [[Control GD|Control]] overlay ''')''' virtual                                                                        |-| void|| [[#forward_canvas_force_draw_over_viewport|forward_canvas_force_draw_over_viewport]] '''(''' [[Control GD|Control]] overlay ''')''' virtual                                                            |-| bool|| [[#forward_canvas_gui_input|forward_canvas_gui_input]] '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtual                                                                                      |-| bool|| [[#forward_spatial_gui_input|forward_spatial_gui_input]] '''(''' [[Camera GD|Camera]] camera, [[InputEvent GD|InputEvent]] event ''')''' virtual                                                |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_breakpoints|get_breakpoints]] '''(''' ''')''' virtual                                                                                                                                                  |-| [[EditorInterface GD|EditorInterface]]|| [[#get_editor_interface|get_editor_interface]] '''(''' ''')'''                                                                                                                                                |-| [[Texture2D GD|Texture2D]]|| [[#get_plugin_icon|get_plugin_icon]] '''(''' ''')''' virtual                                                                                                                                                  |-| [[String GD|String]]|| [[#get_plugin_name|get_plugin_name]] '''(''' ''')''' virtual                                                                                                                                                  |-| [[ScriptCreateDialog GD|ScriptCreateDialog]]|| [[#get_script_create_dialog|get_script_create_dialog]] '''(''' ''')'''                                                                                                                                        |-| [[Dictionary GD|Dictionary]]|| [[#get_state|get_state]] '''(''' ''')''' virtual                                                                                                                                                              |-| [[UndoRedo GD|UndoRedo]]|| [[#get_undo_redo|get_undo_redo]] '''(''' ''')'''                                                                                                                                                              |-| void|| [[#get_window_layout|get_window_layout]] '''(''' [[ConfigFile GD|ConfigFile]] layout ''')''' virtual                                                                                                   |-| bool|| [[#handles|handles]] '''(''' [[Object GD|Object]] object ''')''' virtual                                                                                                                               |-| bool|| [[#has_main_screen|has_main_screen]] '''(''' ''')''' virtual                                                                                                                                                  |-| void|| [[#hide_bottom_panel|hide_bottom_panel]] '''(''' ''')'''                                                                                                                                                      |-| void|| [[#make_bottom_panel_item_visible|make_bottom_panel_item_visible]] '''(''' [[Control GD|Control]] item ''')'''                                                                                         |-| void|| [[#make_visible|make_visible]] '''(''' bool visible ''')''' virtual                                                                                                                        |-| void|| [[#queue_save_layout|queue_save_layout]] '''(''' ''')''' const                                                                                                                                                |-| void|| [[#remove_autoload_singleton|remove_autoload_singleton]] '''(''' [[String GD|String]] name ''')'''                                                                                                     |-| void|| [[#remove_control_from_bottom_panel|remove_control_from_bottom_panel]] '''(''' [[Control GD|Control]] control ''')'''                                                                                  |-| void|| [[#remove_control_from_container|remove_control_from_container]] '''(''' [[#CustomControlContainer|CustomControlContainer]] container, [[Control GD|Control]] control ''')'''     |-| void|| [[#remove_control_from_docks|remove_control_from_docks]] '''(''' [[Control GD|Control]] control ''')'''                                                                                                |-| void|| [[#remove_custom_type|remove_custom_type]] '''(''' [[String GD|String]] type ''')'''                                                                                                                   |-| void|| [[#remove_export_plugin|remove_export_plugin]] '''(''' [[EditorExportPlugin GD|EditorExportPlugin]] plugin ''')'''                                                                                     |-| void|| [[#remove_import_plugin|remove_import_plugin]] '''(''' [[EditorImportPlugin GD|EditorImportPlugin]] importer ''')'''                                                                                   |-| void|| [[#remove_inspector_plugin|remove_inspector_plugin]] '''(''' [[EditorInspectorPlugin GD|EditorInspectorPlugin]] plugin ''')'''                                                                         |-| void|| [[#remove_scene_import_plugin|remove_scene_import_plugin]] '''(''' [[EditorSceneImporter GD|EditorSceneImporter]] scene_importer ''')'''                                                               |-| void|| [[#remove_spatial_gizmo_plugin|remove_spatial_gizmo_plugin]] '''(''' [[EditorSpatialGizmoPlugin GD|EditorSpatialGizmoPlugin]] plugin ''')'''                                                           |-| void|| [[#remove_tool_menu_item|remove_tool_menu_item]] '''(''' [[String GD|String]] name ''')'''                                                                                                             |-| void|| [[#save_external_data|save_external_data]] '''(''' ''')''' virtual                                                                                                                                            |-| void|| [[#set_force_draw_over_forwarding_enabled|set_force_draw_over_forwarding_enabled]] '''(''' ''')'''                                                                                                            |-| void|| [[#set_input_event_forwarding_always_enabled|set_input_event_forwarding_always_enabled]] '''(''' ''')'''                                                                                                      |-| void|| [[#set_state|set_state]] '''(''' [[Dictionary GD|Dictionary]] state ''')''' virtual                                                                                                                    |-| void|| [[#set_window_layout|set_window_layout]] '''(''' [[ConfigFile GD|ConfigFile]] layout ''')''' virtual                                                                                                   |-| int|| [[#update_overlays|update_overlays]] '''(''' ''')''' const                                                                                                                                                    |}== Signals ===== main_screen_changed ===*  '''main_screen_changed''' '''(''' [[String GD|String]] screen_name ''')'''Emitted when user changes the workspace ('''2D''', '''3D''', '''Script''', '''AssetLib'''). Also works with custom screens defined by plugins.=== resource_saved ===*  '''resource_saved''' '''(''' [[Resource GD|Resource]] resource ''')'''=== scene_changed ===*  '''scene_changed''' '''(''' [[Node GD|Node]] scene_root ''')'''Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be {{Span|null}}.=== scene_closed ===*  '''scene_closed''' '''(''' [[String GD|String]] filepath ''')'''Emitted when user closes a scene. The argument is file path to a closed scene.== Enumerations ===== CustomControlContainer ====== CONTAINER_TOOLBAR ====== CONTAINER_SPATIAL_EDITOR_MENU ====== CONTAINER_SPATIAL_EDITOR_SIDE_LEFT ====== CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT ====== CONTAINER_SPATIAL_EDITOR_BOTTOM ====== CONTAINER_CANVAS_EDITOR_MENU ====== CONTAINER_CANVAS_EDITOR_SIDE_LEFT ====== CONTAINER_CANVAS_EDITOR_SIDE_RIGHT ====== CONTAINER_CANVAS_EDITOR_BOTTOM ====== CONTAINER_PROPERTY_EDITOR_BOTTOM ====== CONTAINER_PROJECT_SETTING_TAB_LEFT ====== CONTAINER_PROJECT_SETTING_TAB_RIGHT ===enum '''CustomControlContainer''':*  '''CONTAINER_TOOLBAR''' = '''0'''*  '''CONTAINER_SPATIAL_EDITOR_MENU''' = '''1'''*  '''CONTAINER_SPATIAL_EDITOR_SIDE_LEFT''' = '''2'''*  '''CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT''' = '''3'''*  '''CONTAINER_SPATIAL_EDITOR_BOTTOM''' = '''4'''*  '''CONTAINER_CANVAS_EDITOR_MENU''' = '''5'''*  '''CONTAINER_CANVAS_EDITOR_SIDE_LEFT''' = '''6'''*  '''CONTAINER_CANVAS_EDITOR_SIDE_RIGHT''' = '''7'''*  '''CONTAINER_CANVAS_EDITOR_BOTTOM''' = '''8'''*  '''CONTAINER_PROPERTY_EDITOR_BOTTOM''' = '''9'''*  '''CONTAINER_PROJECT_SETTING_TAB_LEFT''' = '''10'''*  '''CONTAINER_PROJECT_SETTING_TAB_RIGHT''' = '''11'''=== DockSlot ====== DOCK_SLOT_LEFT_UL ====== DOCK_SLOT_LEFT_BL ====== DOCK_SLOT_LEFT_UR ====== DOCK_SLOT_LEFT_BR ====== DOCK_SLOT_RIGHT_UL ====== DOCK_SLOT_RIGHT_BL ====== DOCK_SLOT_RIGHT_UR ====== DOCK_SLOT_RIGHT_BR ====== DOCK_SLOT_MAX ===enum '''DockSlot''':*  '''DOCK_SLOT_LEFT_UL''' = '''0'''*  '''DOCK_SLOT_LEFT_BL''' = '''1'''*  '''DOCK_SLOT_LEFT_UR''' = '''2'''*  '''DOCK_SLOT_LEFT_BR''' = '''3'''*  '''DOCK_SLOT_RIGHT_UL''' = '''4'''*  '''DOCK_SLOT_RIGHT_BL''' = '''5'''*  '''DOCK_SLOT_RIGHT_UR''' = '''6'''*  '''DOCK_SLOT_RIGHT_BR''' = '''7'''*  '''DOCK_SLOT_MAX''' = '''8'''  Represents the size of the [[#DockSlot|DockSlot]] enum.== Method Descriptions ===== add_autoload_singleton ===*  void '''add_autoload_singleton''' '''(''' [[String GD|String]] name, [[String GD|String]] path ''')'''Adds a script at {{Span|path}} to the Autoload list as {{Span|name}}.=== add_control_to_bottom_panel ===*  [[ToolButton GD|ToolButton]] '''add_control_to_bottom_panel''' '''(''' [[Control GD|Control]] control, [[String GD|String]] title ''')'''Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with [[#remove_control_from_bottom_panel|remove_control_from_bottom_panel]] and free it with [[Node GD#queue_free|Node.queue_free()]].=== add_control_to_container ===*  void '''add_control_to_container''' '''(''' [[#CustomControlContainer|CustomControlContainer]] container, [[Control GD|Control]] control ''')'''Adds a custom control to a container (see [[#CustomControlContainer|CustomControlContainer]]). There are many locations where custom controls can be added in the editor UI.Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).When your plugin is deactivated, make sure to remove your custom control with [[#remove_control_from_container|remove_control_from_container]] and free it with [[Node GD#queue_free|Node.queue_free()]].=== add_control_to_dock ===*  void '''add_control_to_dock''' '''(''' [[#DockSlot|DockSlot]] slot, [[Control GD|Control]] control ''')'''Adds the control to a specific dock slot (see [[#DockSlot|DockSlot]] for options).If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.When your plugin is deactivated, make sure to remove your custom control with [[#remove_control_from_docks|remove_control_from_docks]] and free it with [[Node GD#queue_free|Node.queue_free()]].=== add_custom_type ===*  void '''add_custom_type''' '''(''' [[String GD|String]] type, [[String GD|String]] base, [[Script GD|Script]] script, [[Texture2D GD|Texture2D]] icon ''')'''Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.When given node or resource is selected, the base type will be instanced (e.g. "Spatial", "Control", "Resource"), then the script will be loaded and set to this object.You can use the virtual method [[#handles|handles]] to check if your custom object is being edited by checking the script or using the {{Span|is}} keyword.During run-time, this will be a simple object with a script so this function does not need to be called then.=== add_export_plugin ===*  void '''add_export_plugin''' '''(''' [[EditorExportPlugin GD|EditorExportPlugin]] plugin ''')'''=== add_import_plugin ===*  void '''add_import_plugin''' '''(''' [[EditorImportPlugin GD|EditorImportPlugin]] importer ''')'''=== add_inspector_plugin ===*  void '''add_inspector_plugin''' '''(''' [[EditorInspectorPlugin GD|EditorInspectorPlugin]] plugin ''')'''=== add_scene_import_plugin ===*  void '''add_scene_import_plugin''' '''(''' [[EditorSceneImporter GD|EditorSceneImporter]] scene_importer ''')'''=== add_spatial_gizmo_plugin ===*  void '''add_spatial_gizmo_plugin''' '''(''' [[EditorSpatialGizmoPlugin GD|EditorSpatialGizmoPlugin]] plugin ''')'''=== add_tool_menu_item ===*  void '''add_tool_menu_item''' '''(''' [[String GD|String]] name, [[Object GD|Object]] handler, [[String GD|String]] callback, [[Variant GD|Variant]] ud=null ''')'''Adds a custom menu item to '''Project > Tools''' as {{Span|name}} that calls {{Span|callback}} on an instance of {{Span|handler}} with a parameter {{Span|ud}} when user activates it.=== add_tool_submenu_item ===*  void '''add_tool_submenu_item''' '''(''' [[String GD|String]] name, [[Object GD|Object]] submenu ''')'''Adds a custom submenu under '''Project > Tools >''' {{Span|name}}. {{Span|submenu}} should be an object of class [[PopupMenu GD|PopupMenu]]. This submenu should be cleaned up using {{Span|remove_tool_menu_item(name)}}.=== apply_changes ===*  void '''apply_changes ( )''' virtualThis method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.=== build ===*  bool '''build ( )''' virtual=== clear ===*  void '''clear ( )''' virtualClear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.=== disable_plugin ===*  void '''disable_plugin ( )''' virtualCalled by the engine when the user disables the {{Span|EditorPlugin}} in the Plugin tab of the project settings window.=== edit ===*  void '''edit''' '''(''' [[Object GD|Object]] object ''')''' virtualThis function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.=== enable_plugin ===*  void '''enable_plugin ( )''' virtualCalled by the engine when the user enables the {{Span|EditorPlugin}} in the Plugin tab of the project settings window.=== forward_canvas_draw_over_viewport ===*  void '''forward_canvas_draw_over_viewport''' '''(''' [[Control GD|Control]] overlay ''')''' virtual=== forward_canvas_force_draw_over_viewport ===*  void '''forward_canvas_force_draw_over_viewport''' '''(''' [[Control GD|Control]] overlay ''')''' virtual=== forward_canvas_gui_input ===*  bool '''forward_canvas_gui_input''' '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtualCalled when there is a root node in the current edited scene, [[#handles|handles]] is implemented and an [[InputEvent GD|InputEvent]] happens in the 2D viewport. Intercepts the [[InputEvent GD|InputEvent]], if {{Span|return true}} {{Span|EditorPlugin}} consumes the {{Span|event}}, otherwise forwards {{Span|event}} to other Editor classes. Example:::    # Prevents the InputEvent to reach other Editor classes    func forward_canvas_gui_input(event):        var forward = true        return forwardMust {{Span|return false}} in order to forward the [[InputEvent GD|InputEvent]] to other Editor classes. Example:::    # Consumes InputEventMouseMotion and forwards other InputEvent types    func forward_canvas_gui_input(event):        var forward = false        if event is InputEventMouseMotion:            forward = true        return forward=== forward_spatial_gui_input ===*  bool '''forward_spatial_gui_input''' '''(''' [[Camera GD|Camera]] camera, [[InputEvent GD|InputEvent]] event ''')''' virtualCalled when there is a root node in the current edited scene, [[#handles|handles]] is implemented and an [[InputEvent GD|InputEvent]] happens in the 3D viewport. Intercepts the [[InputEvent GD|InputEvent]], if {{Span|return true}} {{Span|EditorPlugin}} consumes the {{Span|event}}, otherwise forwards {{Span|event}} to other Editor classes. Example:::    # Prevents the InputEvent to reach other Editor classes    func forward_spatial_gui_input(camera, event):        var forward = true        return forwardMust {{Span|return false}} in order to forward the [[InputEvent GD|InputEvent]] to other Editor classes. Example:::    # Consumes InputEventMouseMotion and forwards other InputEvent types    func forward_spatial_gui_input(camera, event):        var forward = false        if event is InputEventMouseMotion:            forward = true        return forward=== get_breakpoints ===*  [[PackedStringArray GD|PackedStringArray]] '''get_breakpoints ( )''' virtualThis is for editors that edit script-based objects. You can return a list of breakpoints in the format ({{Span|script:line}}), for example: {{Span|res://path_to_script.gd:25}}.=== get_editor_interface ===*  [[EditorInterface GD|EditorInterface]] '''get_editor_interface ( )'''Returns the [[EditorInterface GD|EditorInterface]] object that gives you control over Godot editor's window and its functionalities.=== get_plugin_icon ===*  [[Texture2D GD|Texture2D]] '''get_plugin_icon ( )''' virtualOverride this method in your plugin to return a [[Texture2D GD|Texture2D]] in order to give it an icon.For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.Ideally, the plugin icon should be white with a transparent background and 16x16 pixels in size.::    func get_plugin_icon():        # You can use a custom icon:        return preload("res://addons/my_plugin/my_plugin_icon.svg")        # Or use a built-in icon:        return get_editor_interface().get_base_control().get_icon("Node", "EditorIcons")=== get_plugin_name ===*  [[String GD|String]] '''get_plugin_name ( )''' virtualOverride this method in your plugin to provide the name of the plugin when displayed in the Godot editor.For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.=== get_script_create_dialog ===*  [[ScriptCreateDialog GD|ScriptCreateDialog]] '''get_script_create_dialog ( )'''Gets the Editor's dialogue used for making scripts.'''Note:''' Users can configure it before use.=== get_state ===*  [[Dictionary GD|Dictionary]] '''get_state ( )''' virtualGets the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns).=== get_undo_redo ===*  [[UndoRedo GD|UndoRedo]] '''get_undo_redo ( )'''Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.=== get_window_layout ===*  void '''get_window_layout''' '''(''' [[ConfigFile GD|ConfigFile]] layout ''')''' virtualGets the GUI layout of the plugin. This is used to save the project's editor layout when [[#queue_save_layout|queue_save_layout]] is called or the editor layout was changed(For example changing the position of a dock).=== handles ===*  bool '''handles''' '''(''' [[Object GD|Object]] object ''')''' virtualImplement this function if your plugin edits a specific type of object (Resource or Node). If you return {{Span|true}}, then you will get the functions [[#edit|edit]] and [[#make_visible|make_visible]] called when the editor requests them. If you have declared the methods [[#forward_canvas_gui_input|forward_canvas_gui_input]] and [[#forward_spatial_gui_input|forward_spatial_gui_input]] these will be called too.=== has_main_screen ===*  bool '''has_main_screen ( )''' virtualReturns {{Span|true}} if this is a main screen editor plugin (it goes in the workspace selector together with '''2D''', '''3D''', '''Script''' and '''AssetLib''').=== hide_bottom_panel ===*  void '''hide_bottom_panel ( )'''=== make_bottom_panel_item_visible ===*  void '''make_bottom_panel_item_visible''' '''(''' [[Control GD|Control]] item ''')'''=== make_visible ===*  void '''make_visible''' '''(''' bool visible ''')''' virtualThis function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.Remember that you have to manage the visibility of all your editor controls manually.=== queue_save_layout ===*  void '''queue_save_layout ( )''' constQueue save the project's editor layout.=== remove_autoload_singleton ===*  void '''remove_autoload_singleton''' '''(''' [[String GD|String]] name ''')'''Removes an Autoload {{Span|name}} from the list.=== remove_control_from_bottom_panel ===*  void '''remove_control_from_bottom_panel''' '''(''' [[Control GD|Control]] control ''')'''Removes the control from the bottom panel. You have to manually [[Node GD#queue_free|Node.queue_free()]] the control.=== remove_control_from_container ===*  void '''remove_control_from_container''' '''(''' [[#CustomControlContainer|CustomControlContainer]] container, [[Control GD|Control]] control ''')'''Removes the control from the specified container. You have to manually [[Node GD#queue_free|Node.queue_free()]] the control.=== remove_control_from_docks ===*  void '''remove_control_from_docks''' '''(''' [[Control GD|Control]] control ''')'''Removes the control from the dock. You have to manually [[Node GD#queue_free|Node.queue_free()]] the control.=== remove_custom_type ===*  void '''remove_custom_type''' '''(''' [[String GD|String]] type ''')'''Removes a custom type added by [[#add_custom_type|add_custom_type]].=== remove_export_plugin ===*  void '''remove_export_plugin''' '''(''' [[EditorExportPlugin GD|EditorExportPlugin]] plugin ''')'''=== remove_import_plugin ===*  void '''remove_import_plugin''' '''(''' [[EditorImportPlugin GD|EditorImportPlugin]] importer ''')'''=== remove_inspector_plugin ===*  void '''remove_inspector_plugin''' '''(''' [[EditorInspectorPlugin GD|EditorInspectorPlugin]] plugin ''')'''=== remove_scene_import_plugin ===*  void '''remove_scene_import_plugin''' '''(''' [[EditorSceneImporter GD|EditorSceneImporter]] scene_importer ''')'''=== remove_spatial_gizmo_plugin ===*  void '''remove_spatial_gizmo_plugin''' '''(''' [[EditorSpatialGizmoPlugin GD|EditorSpatialGizmoPlugin]] plugin ''')'''=== remove_tool_menu_item ===*  void '''remove_tool_menu_item''' '''(''' [[String GD|String]] name ''')'''Removes a menu {{Span|name}} from '''Project > Tools'''.=== save_external_data ===*  void '''save_external_data ( )''' virtualThis method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.=== set_force_draw_over_forwarding_enabled ===*  void '''set_force_draw_over_forwarding_enabled ( )'''=== set_input_event_forwarding_always_enabled ===*  void '''set_input_event_forwarding_always_enabled ( )'''Use this method if you always want to receive inputs from 3D view screen inside [[#forward_spatial_gui_input|forward_spatial_gui_input]]. It might be especially usable if your plugin will want to use raycast in the scene.=== set_state ===*  void '''set_state''' '''(''' [[Dictionary GD|Dictionary]] state ''')''' virtualRestore the state saved by [[#get_state|get_state]].=== set_window_layout ===*  void '''set_window_layout''' '''(''' [[ConfigFile GD|ConfigFile]] layout ''')''' virtualRestore the plugin GUI layout saved by [[#get_window_layout|get_window_layout]].=== update_overlays ===*  int '''update_overlays ( )''' constUpdates the overlays of the editor (2D/3D) viewport.