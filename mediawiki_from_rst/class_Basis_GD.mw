__NOTOC__3×3 matrix datatype.== Description ==3×3 matrix used for 3D rotation and scale. Contains 3 vector fields X, Y and Z as its columns, which can be interpreted as the local basis vectors of a transformation. Can also be accessed as array of 3D vectors. These vectors are orthogonal to each other, but are not necessarily normalized (due to scaling). Almost always used as an orthogonal basis for a [[Transform GD|Transform]].For such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).== Tutorials ==*  :doc:`../tutorials/3d/using_transforms`== Properties =={| class="wikitable | [[Vector3 GD|Vector3]]|| [[#x|x]]|| {{Span|Vector3( 1, 0, 0 )}} |-| [[Vector3 GD|Vector3]]|| [[#y|y]]|| {{Span|Vector3( 0, 1, 0 )}} |-| [[Vector3 GD|Vector3]]|| [[#z|z]]|| {{Span|Vector3( 0, 0, 1 )}} |}== Methods =={| class="wikitable | [[Basis GD|Basis]]|| [[Basis GD#Basis|Basis]] '''(''' [[Quat GD|Quat]] from ''')'''                                                                                     |-| [[Basis GD|Basis]]|| [[Basis GD#Basis|Basis]] '''(''' [[Vector3 GD|Vector3]] from ''')'''                                                                               |-| [[Basis GD|Basis]]|| [[Basis GD#Basis|Basis]] '''(''' [[Vector3 GD|Vector3]] axis, float phi ''')'''                                                |-| [[Basis GD|Basis]]|| [[Basis GD#Basis|Basis]] '''(''' [[Vector3 GD|Vector3]] x_axis, [[Vector3 GD|Vector3]] y_axis, [[Vector3 GD|Vector3]] z_axis ''')''' |-| float|| [[#determinant|determinant]] '''(''' ''')'''                                                                                                      |-| [[Vector3 GD|Vector3]]|| [[#get_euler|get_euler]] '''(''' ''')'''                                                                                                          |-| int|| [[#get_orthogonal_index|get_orthogonal_index]] '''(''' ''')'''                                                                                    |-| [[Quat GD|Quat]]|| [[#get_rotation_quat|get_rotation_quat]] '''(''' ''')'''                                                                                          |-| [[Vector3 GD|Vector3]]|| [[#get_scale|get_scale]] '''(''' ''')'''                                                                                                          |-| [[Basis GD|Basis]]|| [[#inverse|inverse]] '''(''' ''')'''                                                                                                              |-| bool|| [[#is_equal_approx|is_equal_approx]] '''(''' [[Basis GD|Basis]] b, float epsilon=1e-05 ''')'''                         |-| [[Basis GD|Basis]]|| [[#orthonormalized|orthonormalized]] '''(''' ''')'''                                                                                              |-| [[Basis GD|Basis]]|| [[#rotated|rotated]] '''(''' [[Vector3 GD|Vector3]] axis, float phi ''')'''                                            |-| [[Basis GD|Basis]]|| [[#scaled|scaled]] '''(''' [[Vector3 GD|Vector3]] scale ''')'''                                                                            |-| [[Basis GD|Basis]]|| [[#slerp|slerp]] '''(''' [[Basis GD|Basis]] b, float t ''')'''                                                         |-| float|| [[#tdotx|tdotx]] '''(''' [[Vector3 GD|Vector3]] with ''')'''                                                                               |-| float|| [[#tdoty|tdoty]] '''(''' [[Vector3 GD|Vector3]] with ''')'''                                                                               |-| float|| [[#tdotz|tdotz]] '''(''' [[Vector3 GD|Vector3]] with ''')'''                                                                               |-| [[Basis GD|Basis]]|| [[#transposed|transposed]] '''(''' ''')'''                                                                                                        |-| [[Vector3 GD|Vector3]]|| [[#xform|xform]] '''(''' [[Vector3 GD|Vector3]] v ''')'''                                                                                  |-| [[Vector3 GD|Vector3]]|| [[#xform_inv|xform_inv]] '''(''' [[Vector3 GD|Vector3]] v ''')'''                                                                          |}== Constants ===== IDENTITY ====== FLIP_X ====== FLIP_Y ====== FLIP_Z ===*  '''IDENTITY''' = '''Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )'''  The identity basis. This is identical to calling {{Span|Basis()}} without any parameters. This constant can be used to make your code clearer.*  '''FLIP_X''' = '''Basis( -1, 0, 0, 0, 1, 0, 0, 0, 1 )'''  The basis that will flip something along the X axis when used in a transformation.*  '''FLIP_Y''' = '''Basis( 1, 0, 0, 0, -1, 0, 0, 0, 1 )'''  The basis that will flip something along the Y axis when used in a transformation.*  '''FLIP_Z''' = '''Basis( 1, 0, 0, 0, 1, 0, 0, 0, -1 )'''  The basis that will flip something along the Z axis when used in a transformation.== Property Descriptions ===== x ===*  [[Vector3 GD|Vector3]] '''x'''{| class="wikitable | ''Default''|| {{Span|Vector3( 1, 0, 0 )}} |}The basis matrix's X vector.=== y ===*  [[Vector3 GD|Vector3]] '''y'''{| class="wikitable | ''Default''|| {{Span|Vector3( 0, 1, 0 )}} |}The basis matrix's Y vector.=== z ===*  [[Vector3 GD|Vector3]] '''z'''{| class="wikitable | ''Default''|| {{Span|Vector3( 0, 0, 1 )}} |}The basis matrix's Z vector.== Method Descriptions ===== Basis ===*  [[Basis GD|Basis]] '''Basis''' '''(''' [[Quat GD|Quat]] from ''')'''Create a rotation matrix from the given quaternion.*  [[Basis GD|Basis]] '''Basis''' '''(''' [[Vector3 GD|Vector3]] from ''')'''Create a rotation matrix (in the YXZ convention: first Z, then X, and Y last) from the specified Euler angles, given in the vector format as (X angle, Y angle, Z angle).*  [[Basis GD|Basis]] '''Basis''' '''(''' [[Vector3 GD|Vector3]] axis, float phi ''')'''Create a rotation matrix which rotates around the given axis by the specified angle, in radians. The axis must be a normalized vector.*  [[Basis GD|Basis]] '''Basis''' '''(''' [[Vector3 GD|Vector3]] x_axis, [[Vector3 GD|Vector3]] y_axis, [[Vector3 GD|Vector3]] z_axis ''')'''Create a matrix from 3 axis vectors.=== determinant ===*  float '''determinant ( )'''Returns the determinant of the matrix.=== get_euler ===*  [[Vector3 GD|Vector3]] '''get_euler ( )'''Returns the basis's rotation in the form of Euler angles (in the YXZ convention: first Z, then X, and Y last). The returned vector contains the rotation angles in the format (X angle, Y angle, Z angle). See [[#get_rotation_quat|get_rotation_quat]] if you need a quaternion instead.=== get_orthogonal_index ===*  int '''get_orthogonal_index ( )'''This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1, 0, or 1, and returns the index of the point best representing the orientation of the object. It is mainly used by the grid map editor. For further details, refer to the Godot source code.=== get_rotation_quat ===*  [[Quat GD|Quat]] '''get_rotation_quat ( )'''Returns the basis's rotation in the form of a quaternion. See [[#get_euler|get_euler]] if you need Euler angles, but keep in mind quaternions should generally be preferred to Euler angles.=== get_scale ===*  [[Vector3 GD|Vector3]] '''get_scale ( )'''Assuming that the matrix is the combination of a rotation and scaling, return the absolute value of scaling factors along each axis.=== inverse ===*  [[Basis GD|Basis]] '''inverse ( )'''Returns the inverse of the matrix.=== is_equal_approx ===*  bool '''is_equal_approx''' '''(''' [[Basis GD|Basis]] b, float epsilon=1e-05 ''')'''Returns {{Span|true}} if this basis and {{Span|b}} are approximately equal, by calling {{Span|is_equal_approx}} on each component.=== orthonormalized ===*  [[Basis GD|Basis]] '''orthonormalized ( )'''Returns the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error for orthogonal matrices). This performs a Gram-Schmidt orthonormalization on the basis of the matrix.=== rotated ===*  [[Basis GD|Basis]] '''rotated''' '''(''' [[Vector3 GD|Vector3]] axis, float phi ''')'''Introduce an additional rotation around the given axis by phi (radians). The axis must be a normalized vector.=== scaled ===*  [[Basis GD|Basis]] '''scaled''' '''(''' [[Vector3 GD|Vector3]] scale ''')'''Introduce an additional scaling specified by the given 3D scaling factor.=== slerp ===*  [[Basis GD|Basis]] '''slerp''' '''(''' [[Basis GD|Basis]] b, float t ''')'''Assuming that the matrix is a proper rotation matrix, slerp performs a spherical-linear interpolation with another rotation matrix.=== tdotx ===*  float '''tdotx''' '''(''' [[Vector3 GD|Vector3]] with ''')'''Transposed dot product with the X axis of the matrix.=== tdoty ===*  float '''tdoty''' '''(''' [[Vector3 GD|Vector3]] with ''')'''Transposed dot product with the Y axis of the matrix.=== tdotz ===*  float '''tdotz''' '''(''' [[Vector3 GD|Vector3]] with ''')'''Transposed dot product with the Z axis of the matrix.=== transposed ===*  [[Basis GD|Basis]] '''transposed ( )'''Returns the transposed version of the matrix.=== xform ===*  [[Vector3 GD|Vector3]] '''xform''' '''(''' [[Vector3 GD|Vector3]] v ''')'''Returns a vector transformed (multiplied) by the matrix.=== xform_inv ===*  [[Vector3 GD|Vector3]] '''xform_inv''' '''(''' [[Vector3 GD|Vector3]] v ''')'''Returns a vector transformed (multiplied) by the transposed matrix.'''Note:''' This results in a multiplication by the inverse of the matrix only if it represents a rotation-reflection.