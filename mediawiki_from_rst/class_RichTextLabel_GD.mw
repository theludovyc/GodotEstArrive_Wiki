__NOTOC__'''Inherits:''' [[Control GD|Control]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Label that displays rich text.== Description ==Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.'''Note:''' Assignments to [[#bbcode_text|bbcode_text]] clear the tag stack and reconstruct it from the property's contents. Any edits made to [[#bbcode_text|bbcode_text]] will erase previous edits made from other manual sources such as [[#append_bbcode|append_bbcode]] and the {{Span|push_*}} / [[#pop|pop]] methods.== Tutorials ==*  :doc:`../tutorials/gui/bbcode_in_richtextlabel`== Properties =={| class="wikitable | bool|| [[#bbcode_enabled|bbcode_enabled]]|| {{Span|false}}       |-| [[String GD|String]]|| [[#bbcode_text|bbcode_text]]|| {{Span|""}}          |-| [[Array GD|Array]]|| [[#custom_effects|custom_effects]]|| {{Span|[  ]}}        |-| bool|| [[#meta_underlined|meta_underlined]]|| {{Span|true}}        |-| bool|| [[#override_selected_font_color|override_selected_font_color]]|| {{Span|false}}       |-| float|| [[#percent_visible|percent_visible]]|| {{Span|1.0}}         |-| bool|| rect_clip_content|| {{Span|true}} (parent override) |-| bool|| [[#scroll_active|scroll_active]]|| {{Span|true}}        |-| bool|| [[#scroll_following|scroll_following]]|| {{Span|false}}       |-| bool|| [[#selection_enabled|selection_enabled]]|| {{Span|false}}       |-| int|| [[#tab_size|tab_size]]|| {{Span|4}}           |-| [[String GD|String]]|| [[#text|text]]|| {{Span|""}}          |-| int|| [[#visible_characters|visible_characters]]|| {{Span|-1}}          |}== Methods =={| class="wikitable | void|| [[#add_image|add_image]] '''(''' [[Texture2D GD|Texture2D]] image, int width=0, int height=0 ''')'''                |-| void|| [[#add_text|add_text]] '''(''' [[String GD|String]] text ''')'''                                                                                        |-| [[@GlobalScope GD#Error|Error]]|| [[#append_bbcode|append_bbcode]] '''(''' [[String GD|String]] bbcode ''')'''                                                                            |-| void|| [[#clear|clear]] '''(''' ''')'''                                                                                                                               |-| int|| [[#get_content_height|get_content_height]] '''(''' ''')'''                                                                                                     |-| int|| [[#get_line_count|get_line_count]] '''(''' ''')''' const                                                                                                       |-| int|| [[#get_total_character_count|get_total_character_count]] '''(''' ''')''' const                                                                                 |-| [[VScrollBar GD|VScrollBar]]|| [[#get_v_scroll|get_v_scroll]] '''(''' ''')'''                                                                                                                 |-| int|| [[#get_visible_line_count|get_visible_line_count]] '''(''' ''')''' const                                                                                       |-| void|| [[#install_effect|install_effect]] '''(''' [[Variant GD|Variant]] effect ''')'''                                                                        |-| void|| [[#newline|newline]] '''(''' ''')'''                                                                                                                           |-| [[@GlobalScope GD#Error|Error]]|| [[#parse_bbcode|parse_bbcode]] '''(''' [[String GD|String]] bbcode ''')'''                                                                              |-| [[Dictionary GD|Dictionary]]|| [[#parse_expressions_for_values|parse_expressions_for_values]] '''(''' [[PackedStringArray GD|PackedStringArray]] expressions ''')'''                   |-| void|| [[#pop|pop]] '''(''' ''')'''                                                                                                                                   |-| void|| [[#push_align|push_align]] '''(''' [[#Align|Align]] align ''')'''                                                                        |-| void|| [[#push_bold|push_bold]] '''(''' ''')'''                                                                                                                       |-| void|| [[#push_bold_italics|push_bold_italics]] '''(''' ''')'''                                                                                                       |-| void|| [[#push_cell|push_cell]] '''(''' ''')'''                                                                                                                       |-| void|| [[#push_color|push_color]] '''(''' [[Color GD|Color]] color ''')'''                                                                                     |-| void|| [[#push_font|push_font]] '''(''' [[Font GD|Font]] font ''')'''                                                                                          |-| void|| [[#push_indent|push_indent]] '''(''' int level ''')'''                                                                                       |-| void|| [[#push_italics|push_italics]] '''(''' ''')'''                                                                                                                 |-| void|| [[#push_list|push_list]] '''(''' [[#ListType|ListType]] type ''')'''                                                                     |-| void|| [[#push_meta|push_meta]] '''(''' [[Variant GD|Variant]] data ''')'''                                                                                    |-| void|| [[#push_mono|push_mono]] '''(''' ''')'''                                                                                                                       |-| void|| [[#push_normal|push_normal]] '''(''' ''')'''                                                                                                                   |-| void|| [[#push_strikethrough|push_strikethrough]] '''(''' ''')'''                                                                                                     |-| void|| [[#push_table|push_table]] '''(''' int columns ''')'''                                                                                       |-| void|| [[#push_underline|push_underline]] '''(''' ''')'''                                                                                                             |-| bool|| [[#remove_line|remove_line]] '''(''' int line ''')'''                                                                                        |-| void|| [[#scroll_to_line|scroll_to_line]] '''(''' int line ''')'''                                                                                  |-| void|| [[#set_table_column_expand|set_table_column_expand]] '''(''' int column, bool expand, int ratio ''')''' |}== Theme Properties =={| class="wikitable | [[Font GD|Font]]|| bold_font||                              |-| [[Font GD|Font]]|| bold_italics_font||                              |-| [[Color GD|Color]]|| default_color|| Color( 1, 1, 1, 1 )          |-| [[StyleBox GD|StyleBox]]|| focus||                              |-| [[Color GD|Color]]|| font_color_selected|| Color( 0.49, 0.49, 0.49, 1 ) |-| [[Color GD|Color]]|| font_color_shadow|| Color( 0, 0, 0, 0 )          |-| [[Font GD|Font]]|| italics_font||                              |-| int|| line_separation|| 1                            |-| [[Font GD|Font]]|| mono_font||                              |-| [[StyleBox GD|StyleBox]]|| normal||                              |-| [[Font GD|Font]]|| normal_font||                              |-| [[Color GD|Color]]|| selection_color|| Color( 0.1, 0.1, 1, 0.8 )    |-| int|| shadow_as_outline|| 0                            |-| int|| shadow_offset_x|| 1                            |-| int|| shadow_offset_y|| 1                            |-| int|| table_hseparation|| 3                            |-| int|| table_vseparation|| 3                            |}== Signals ===== meta_clicked ===*  '''meta_clicked''' '''(''' [[Variant GD|Variant]] meta ''')'''Triggered when the user clicks on content between meta tags. If the meta is defined in text, e.g. {{Span|[url={"data"="hi"}]hi[/url]}}, then the parameter for this signal will be a [[String GD|String]] type. If a particular type or an object is desired, the [[#push_meta|push_meta]] method must be used to manually insert the data into the tag stack.=== meta_hover_ended ===*  '''meta_hover_ended''' '''(''' [[Variant GD|Variant]] meta ''')'''Triggers when the mouse exits a meta tag.=== meta_hover_started ===*  '''meta_hover_started''' '''(''' [[Variant GD|Variant]] meta ''')'''Triggers when the mouse enters a meta tag.== Enumerations ===== Align ====== ALIGN_LEFT ====== ALIGN_CENTER ====== ALIGN_RIGHT ====== ALIGN_FILL ===enum '''Align''':*  '''ALIGN_LEFT''' = '''0'''  Makes text left aligned.*  '''ALIGN_CENTER''' = '''1'''  Makes text centered.*  '''ALIGN_RIGHT''' = '''2'''  Makes text right aligned.*  '''ALIGN_FILL''' = '''3'''  Makes text fill width.=== ListType ====== LIST_NUMBERS ====== LIST_LETTERS ====== LIST_DOTS ===enum '''ListType''':*  '''LIST_NUMBERS''' = '''0'''  Each list item has a number marker.*  '''LIST_LETTERS''' = '''1'''  Each list item has a letter marker.*  '''LIST_DOTS''' = '''2'''  Each list item has a filled circle marker.=== ItemType ====== ITEM_FRAME ====== ITEM_TEXT ====== ITEM_IMAGE ====== ITEM_NEWLINE ====== ITEM_FONT ====== ITEM_COLOR ====== ITEM_UNDERLINE ====== ITEM_STRIKETHROUGH ====== ITEM_ALIGN ====== ITEM_INDENT ====== ITEM_LIST ====== ITEM_TABLE ====== ITEM_FADE ====== ITEM_SHAKE ====== ITEM_WAVE ====== ITEM_TORNADO ====== ITEM_RAINBOW ====== ITEM_CUSTOMFX ====== ITEM_META ===enum '''ItemType''':*  '''ITEM_FRAME''' = '''0'''*  '''ITEM_TEXT''' = '''1'''*  '''ITEM_IMAGE''' = '''2'''*  '''ITEM_NEWLINE''' = '''3'''*  '''ITEM_FONT''' = '''4'''*  '''ITEM_COLOR''' = '''5'''*  '''ITEM_UNDERLINE''' = '''6'''*  '''ITEM_STRIKETHROUGH''' = '''7'''*  '''ITEM_ALIGN''' = '''8'''*  '''ITEM_INDENT''' = '''9'''*  '''ITEM_LIST''' = '''10'''*  '''ITEM_TABLE''' = '''11'''*  '''ITEM_FADE''' = '''12'''*  '''ITEM_SHAKE''' = '''13'''*  '''ITEM_WAVE''' = '''14'''*  '''ITEM_TORNADO''' = '''15'''*  '''ITEM_RAINBOW''' = '''16'''*  '''ITEM_CUSTOMFX''' = '''18'''*  '''ITEM_META''' = '''17'''== Property Descriptions ===== bbcode_enabled ===*  bool '''bbcode_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}             |-| ''Setter''|| set_use_bbcode(value) |-| ''Getter''|| is_using_bbcode()     |}If {{Span|true}}, the label uses BBCode formatting.=== bbcode_text ===*  [[String GD|String]] '''bbcode_text'''{| class="wikitable | ''Default''|| {{Span|""}}            |-| ''Setter''|| set_bbcode(value) |-| ''Getter''|| get_bbcode()      |}The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.'''Note:''' It is unadvised to use {{Span|+=}} operator with {{Span|bbcode_text}} (e.g. {{Span|bbcode_text += "some string"}}) as it replaces the whole text and can cause slowdowns. Use [[#append_bbcode|append_bbcode]] for adding text instead.=== custom_effects ===*  [[Array GD|Array]] '''custom_effects'''{| class="wikitable | ''Default''|| {{Span|[  ]}}           |-| ''Setter''|| set_effects(value) |-| ''Getter''|| get_effects()      |}The currently installed custom effects. This is an array of [[RichTextEffect GD|RichTextEffect]]\ s.To add a custom effect, it's more convenient to use [[#install_effect|install_effect]].=== meta_underlined ===*  bool '''meta_underlined'''{| class="wikitable | ''Default''|| {{Span|true}}                  |-| ''Setter''|| set_meta_underline(value) |-| ''Getter''|| is_meta_underlined()      |}If {{Span|true}}, the label underlines meta tags such as {{Span|[url]{text}[/url]}}.=== override_selected_font_color ===*  bool '''override_selected_font_color'''{| class="wikitable | ''Default''|| {{Span|false}}                               |-| ''Setter''|| set_override_selected_font_color(value) |-| ''Getter''|| is_overriding_selected_font_color()     |}If {{Span|true}}, the label uses the custom font color.=== percent_visible ===*  float '''percent_visible'''{| class="wikitable | ''Default''|| {{Span|1.0}}                    |-| ''Setter''|| set_percent_visible(value) |-| ''Getter''|| get_percent_visible()      |}The range of characters to display, as a float between 0.0 and 1.0. When assigned an out of range value, it's the same as assigning 1.0.'''Note:''' Setting this property updates [[#visible_characters|visible_characters]] based on current [[#get_total_character_count|get_total_character_count]].=== scroll_active ===*  bool '''scroll_active'''{| class="wikitable | ''Default''|| {{Span|true}}                 |-| ''Setter''|| set_scroll_active(value) |-| ''Getter''|| is_scroll_active()       |}If {{Span|true}}, the scrollbar is visible. Setting this to {{Span|false}} does not block scrolling completely. See [[#scroll_to_line|scroll_to_line]].=== scroll_following ===*  bool '''scroll_following'''{| class="wikitable | ''Default''|| {{Span|false}}                |-| ''Setter''|| set_scroll_follow(value) |-| ''Getter''|| is_scroll_following()    |}If {{Span|true}}, the window scrolls down to display new content automatically.=== selection_enabled ===*  bool '''selection_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| set_selection_enabled(value) |-| ''Getter''|| is_selection_enabled()       |}If {{Span|true}}, the label allows text selection.=== tab_size ===*  int '''tab_size'''{| class="wikitable | ''Default''|| {{Span|4}}               |-| ''Setter''|| set_tab_size(value) |-| ''Getter''|| get_tab_size()      |}The number of spaces associated with a single tab length. Does not affect {{Span|\t}} in text tags, only indent tags.=== text ===*  [[String GD|String]] '''text'''{| class="wikitable | ''Default''|| {{Span|""}}          |-| ''Setter''|| set_text(value) |-| ''Getter''|| get_text()      |}The raw text of the label.When set, clears the tag stack and adds a raw text tag to the top of it. Does not parse BBCodes. Does not modify [[#bbcode_text|bbcode_text]].=== visible_characters ===*  int '''visible_characters'''{| class="wikitable | ''Default''|| {{Span|-1}}                        |-| ''Setter''|| set_visible_characters(value) |-| ''Getter''|| get_visible_characters()      |}The restricted number of characters to display in the label. If {{Span|-1}}, all characters will be displayed.== Method Descriptions ===== add_image ===*  void '''add_image''' '''(''' [[Texture2D GD|Texture2D]] image, int width=0, int height=0 ''')'''Adds an image's opening and closing tags to the tag stack, optionally providing a {{Span|width}} and {{Span|height}} to resize the image.If {{Span|width}} or {{Span|height}} is set to 0, the image size will be adjusted in order to keep the original aspect ratio.=== add_text ===*  void '''add_text''' '''(''' [[String GD|String]] text ''')'''Adds raw non-BBCode-parsed text to the tag stack.=== append_bbcode ===*  [[@GlobalScope GD#Error|Error]] '''append_bbcode''' '''(''' [[String GD|String]] bbcode ''')'''Parses {{Span|bbcode}} and adds tags to the tag stack as needed. Returns the result of the parsing, [[@GlobalScope GD#OK|@GlobalScope.OK()]] if successful.=== clear ===*  void '''clear ( )'''Clears the tag stack and sets [[#bbcode_text|bbcode_text]] to an empty string.=== get_content_height ===*  int '''get_content_height ( )'''Returns the height of the content.=== get_line_count ===*  int '''get_line_count ( )''' constReturns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.=== get_total_character_count ===*  int '''get_total_character_count ( )''' constReturns the total number of characters from text tags. Does not include BBCodes.=== get_v_scroll ===*  [[VScrollBar GD|VScrollBar]] '''get_v_scroll ( )'''Returns the vertical scrollbar.=== get_visible_line_count ===*  int '''get_visible_line_count ( )''' constReturns the number of visible lines.=== install_effect ===*  void '''install_effect''' '''(''' [[Variant GD|Variant]] effect ''')'''Installs a custom effect. {{Span|effect}} should be a valid [[RichTextEffect GD|RichTextEffect]].=== newline ===*  void '''newline ( )'''Adds a newline tag to the tag stack.=== parse_bbcode ===*  [[@GlobalScope GD#Error|Error]] '''parse_bbcode''' '''(''' [[String GD|String]] bbcode ''')'''The assignment version of [[#append_bbcode|append_bbcode]]. Clears the tag stack and inserts the new content. Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] if parses {{Span|bbcode}} successfully.=== parse_expressions_for_values ===*  [[Dictionary GD|Dictionary]] '''parse_expressions_for_values''' '''(''' [[PackedStringArray GD|PackedStringArray]] expressions ''')'''Parses BBCode parameter {{Span|expressions}} into a dictionary.=== pop ===*  void '''pop ( )'''Terminates the current tag. Use after {{Span|push_*}} methods to close BBCodes manually. Does not need to follow {{Span|add_*}} methods.=== push_align ===*  void '''push_align''' '''(''' [[#Align|Align]] align ''')'''Adds an {{Span|[align]}} tag based on the given {{Span|align}} value. See [[#Align|Align]] for possible values.=== push_bold ===*  void '''push_bold ( )'''Adds a {{Span|[font]}} tag with a bold font to the tag stack. This is the same as adding a {{Span|[b]}} tag if not currently in a {{Span|[i]}} tag.=== push_bold_italics ===*  void '''push_bold_italics ( )'''Adds a {{Span|[font]}} tag with a bold italics font to the tag stack.=== push_cell ===*  void '''push_cell ( )'''Adds a {{Span|[cell]}} tag to the tag stack. Must be inside a {{Span|[table]}} tag. See [[#push_table|push_table]] for details.=== push_color ===*  void '''push_color''' '''(''' [[Color GD|Color]] color ''')'''Adds a {{Span|[color]}} tag to the tag stack.=== push_font ===*  void '''push_font''' '''(''' [[Font GD|Font]] font ''')'''Adds a {{Span|[font]}} tag to the tag stack. Overrides default fonts for its duration.=== push_indent ===*  void '''push_indent''' '''(''' int level ''')'''Adds an {{Span|[indent]}} tag to the tag stack. Multiplies {{Span|level}} by current [[#tab_size|tab_size]] to determine new margin length.=== push_italics ===*  void '''push_italics ( )'''Adds a {{Span|[font]}} tag with a italics font to the tag stack. This is the same as adding a {{Span|[i]}} tag if not currently in a {{Span|[b]}} tag.=== push_list ===*  void '''push_list''' '''(''' [[#ListType|ListType]] type ''')'''Adds a {{Span|[list]}} tag to the tag stack. Similar to the BBCodes {{Span|[ol]}} or {{Span|[ul]}}, but supports more list types. Not fully implemented!=== push_meta ===*  void '''push_meta''' '''(''' [[Variant GD|Variant]] data ''')'''Adds a {{Span|[meta]}} tag to the tag stack. Similar to the BBCode {{Span|[url=something]{text}[/url]}}, but supports non-[[String GD|String]] metadata types.=== push_mono ===*  void '''push_mono ( )'''Adds a {{Span|[font]}} tag with a monospace font to the tag stack.=== push_normal ===*  void '''push_normal ( )'''Adds a {{Span|[font]}} tag with a normal font to the tag stack.=== push_strikethrough ===*  void '''push_strikethrough ( )'''Adds a {{Span|[s]}} tag to the tag stack.=== push_table ===*  void '''push_table''' '''(''' int columns ''')'''Adds a {{Span|[table=columns]}} tag to the tag stack.=== push_underline ===*  void '''push_underline ( )'''Adds a {{Span|[u]}} tag to the tag stack.=== remove_line ===*  bool '''remove_line''' '''(''' int line ''')'''Removes a line of content from the label. Returns {{Span|true}} if the line exists.The {{Span|line}} argument is the index of the line to remove, it can take values in the interval {{Span|[0, get_line_count() - 1]}}.=== scroll_to_line ===*  void '''scroll_to_line''' '''(''' int line ''')'''Scrolls the window's top line to match {{Span|line}}.=== set_table_column_expand ===*  void '''set_table_column_expand''' '''(''' int column, bool expand, int ratio ''')'''Edits the selected column's expansion options. If {{Span|expand}} is {{Span|true}}, the column expands in proportion to its expansion ratio versus the other columns' ratios.For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.If {{Span|expand}} is {{Span|false}}, the column will not contribute to the total ratio.