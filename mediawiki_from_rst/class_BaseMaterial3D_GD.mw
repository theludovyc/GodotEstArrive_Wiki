__NOTOC__'''Inherits:''' [[Material GD|Material]] '''<''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[ORMMaterial3D GD|ORMMaterial3D]], [[StandardMaterial3D GD|StandardMaterial3D]]Default 3D rendering material.== Description ==This provides a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details.== Tutorials ==*  :doc:`../tutorials/3d/spatial_material`== Properties =={| class="wikitable | [[Color GD|Color]]|| [[#albedo_color|albedo_color]]|| {{Span|Color( 1, 1, 1, 1 )}} |-| bool|| [[#albedo_tex_force_srgb|albedo_tex_force_srgb]]|| {{Span|false}}               |-| [[Texture2D GD|Texture2D]]|| [[#albedo_texture|albedo_texture]]||                         |-| float|| [[#alpha_scissor_threshold|alpha_scissor_threshold]]||                         |-| float|| [[#anisotropy|anisotropy]]||                         |-| bool|| [[#anisotropy_enabled|anisotropy_enabled]]|| {{Span|false}}               |-| [[Texture2D GD|Texture2D]]|| [[#anisotropy_flowmap|anisotropy_flowmap]]||                         |-| bool|| [[#ao_enabled|ao_enabled]]|| {{Span|false}}               |-| float|| [[#ao_light_affect|ao_light_affect]]||                         |-| bool|| [[#ao_on_uv2|ao_on_uv2]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#ao_texture|ao_texture]]||                         |-| [[#TextureChannel|TextureChannel]]|| [[#ao_texture_channel|ao_texture_channel]]||                         |-| bool|| [[#billboard_keep_scale|billboard_keep_scale]]|| {{Span|false}}               |-| [[#BillboardMode|BillboardMode]]|| [[#billboard_mode|billboard_mode]]|| {{Span|0}}                   |-| [[#BlendMode|BlendMode]]|| [[#blend_mode|blend_mode]]|| {{Span|0}}                   |-| float|| [[#clearcoat|clearcoat]]||                         |-| bool|| [[#clearcoat_enabled|clearcoat_enabled]]|| {{Span|false}}               |-| float|| [[#clearcoat_gloss|clearcoat_gloss]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#clearcoat_texture|clearcoat_texture]]||                         |-| [[#CullMode|CullMode]]|| [[#cull_mode|cull_mode]]|| {{Span|0}}                   |-| [[#DepthDrawMode|DepthDrawMode]]|| [[#depth_draw_mode|depth_draw_mode]]|| {{Span|0}}                   |-| [[Texture2D GD|Texture2D]]|| [[#detail_albedo|detail_albedo]]||                         |-| [[#BlendMode|BlendMode]]|| [[#detail_blend_mode|detail_blend_mode]]||                         |-| bool|| [[#detail_enabled|detail_enabled]]|| {{Span|false}}               |-| [[Texture2D GD|Texture2D]]|| [[#detail_mask|detail_mask]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#detail_normal|detail_normal]]||                         |-| [[#DetailUV|DetailUV]]|| [[#detail_uv_layer|detail_uv_layer]]||                         |-| [[#DiffuseMode|DiffuseMode]]|| [[#diffuse_mode|diffuse_mode]]|| {{Span|0}}                   |-| bool|| [[#disable_ambient_light|disable_ambient_light]]|| {{Span|false}}               |-| bool|| [[#disable_receive_shadows|disable_receive_shadows]]|| {{Span|false}}               |-| float|| [[#distance_fade_max_distance|distance_fade_max_distance]]||                         |-| float|| [[#distance_fade_min_distance|distance_fade_min_distance]]||                         |-| [[#DistanceFadeMode|DistanceFadeMode]]|| [[#distance_fade_mode|distance_fade_mode]]|| {{Span|0}}                   |-| [[Color GD|Color]]|| [[#emission|emission]]||                         |-| bool|| [[#emission_enabled|emission_enabled]]|| {{Span|false}}               |-| float|| [[#emission_energy|emission_energy]]||                         |-| bool|| [[#emission_on_uv2|emission_on_uv2]]||                         |-| [[#EmissionOperator|EmissionOperator]]|| [[#emission_operator|emission_operator]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#emission_texture|emission_texture]]||                         |-| bool|| [[#fixed_size|fixed_size]]|| {{Span|false}}               |-| bool|| [[#grow|grow]]|| {{Span|false}}               |-| float|| [[#grow_amount|grow_amount]]|| {{Span|0.0}}                 |-| bool|| [[#heightmap_deep_parallax|heightmap_deep_parallax]]||                         |-| bool|| [[#heightmap_enabled|heightmap_enabled]]|| {{Span|false}}               |-| bool|| [[#heightmap_flip_binormal|heightmap_flip_binormal]]||                         |-| bool|| [[#heightmap_flip_tangent|heightmap_flip_tangent]]||                         |-| bool|| [[#heightmap_flip_texture|heightmap_flip_texture]]||                         |-| int|| [[#heightmap_max_layers|heightmap_max_layers]]||                         |-| int|| [[#heightmap_min_layers|heightmap_min_layers]]||                         |-| float|| [[#heightmap_scale|heightmap_scale]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#heightmap_texture|heightmap_texture]]||                         |-| float|| [[#metallic|metallic]]|| {{Span|0.0}}                 |-| float|| [[#metallic_specular|metallic_specular]]|| {{Span|0.5}}                 |-| [[Texture2D GD|Texture2D]]|| [[#metallic_texture|metallic_texture]]||                         |-| [[#TextureChannel|TextureChannel]]|| [[#metallic_texture_channel|metallic_texture_channel]]|| {{Span|0}}                   |-| bool|| [[#no_depth_test|no_depth_test]]|| {{Span|false}}               |-| bool|| [[#normal_enabled|normal_enabled]]|| {{Span|false}}               |-| float|| [[#normal_scale|normal_scale]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#normal_texture|normal_texture]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#orm_texture|orm_texture]]||                         |-| int|| [[#particles_anim_h_frames|particles_anim_h_frames]]||                         |-| bool|| [[#particles_anim_loop|particles_anim_loop]]||                         |-| int|| [[#particles_anim_v_frames|particles_anim_v_frames]]||                         |-| float|| [[#point_size|point_size]]|| {{Span|1.0}}                 |-| float|| [[#proximity_fade_distance|proximity_fade_distance]]||                         |-| bool|| [[#proximity_fade_enable|proximity_fade_enable]]|| {{Span|false}}               |-| bool|| [[#refraction_enabled|refraction_enabled]]|| {{Span|false}}               |-| float|| [[#refraction_scale|refraction_scale]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#refraction_texture|refraction_texture]]||                         |-| [[#TextureChannel|TextureChannel]]|| [[#refraction_texture_channel|refraction_texture_channel]]||                         |-| float|| [[#rim|rim]]||                         |-| bool|| [[#rim_enabled|rim_enabled]]|| {{Span|false}}               |-| [[Texture2D GD|Texture2D]]|| [[#rim_texture|rim_texture]]||                         |-| float|| [[#rim_tint|rim_tint]]||                         |-| float|| [[#roughness|roughness]]|| {{Span|1.0}}                 |-| [[Texture2D GD|Texture2D]]|| [[#roughness_texture|roughness_texture]]||                         |-| [[#TextureChannel|TextureChannel]]|| [[#roughness_texture_channel|roughness_texture_channel]]|| {{Span|0}}                   |-| [[#ShadingMode|ShadingMode]]|| [[#shading_mode|shading_mode]]|| {{Span|1}}                   |-| bool|| [[#shadow_to_opacity|shadow_to_opacity]]|| {{Span|false}}               |-| [[#SpecularMode|SpecularMode]]|| [[#specular_mode|specular_mode]]|| {{Span|0}}                   |-| bool|| [[#subsurf_scatter_enabled|subsurf_scatter_enabled]]|| {{Span|false}}               |-| float|| [[#subsurf_scatter_strength|subsurf_scatter_strength]]||                         |-| [[Texture2D GD|Texture2D]]|| [[#subsurf_scatter_texture|subsurf_scatter_texture]]||                         |-| [[#TextureFilter|TextureFilter]]|| [[#texture_filter|texture_filter]]|| {{Span|3}}                   |-| bool|| [[#texture_repeat|texture_repeat]]|| {{Span|true}}                |-| [[Color GD|Color]]|| [[#transmission|transmission]]||                         |-| bool|| [[#transmission_enabled|transmission_enabled]]|| {{Span|false}}               |-| [[Texture2D GD|Texture2D]]|| [[#transmission_texture|transmission_texture]]||                         |-| [[#Transparency|Transparency]]|| [[#transparency|transparency]]|| {{Span|0}}                   |-| bool|| [[#use_point_size|use_point_size]]|| {{Span|false}}               |-| [[Vector3 GD|Vector3]]|| [[#uv1_offset|uv1_offset]]|| {{Span|Vector3( 0, 0, 0 )}}  |-| [[Vector3 GD|Vector3]]|| [[#uv1_scale|uv1_scale]]|| {{Span|Vector3( 1, 1, 1 )}}  |-| bool|| [[#uv1_triplanar|uv1_triplanar]]|| {{Span|false}}               |-| float|| [[#uv1_triplanar_sharpness|uv1_triplanar_sharpness]]|| {{Span|1.0}}                 |-| bool|| [[#uv1_world_triplanar|uv1_world_triplanar]]|| {{Span|false}}               |-| [[Vector3 GD|Vector3]]|| [[#uv2_offset|uv2_offset]]|| {{Span|Vector3( 0, 0, 0 )}}  |-| [[Vector3 GD|Vector3]]|| [[#uv2_scale|uv2_scale]]|| {{Span|Vector3( 1, 1, 1 )}}  |-| bool|| [[#uv2_triplanar|uv2_triplanar]]|| {{Span|false}}               |-| float|| [[#uv2_triplanar_sharpness|uv2_triplanar_sharpness]]|| {{Span|1.0}}                 |-| bool|| [[#uv2_world_triplanar|uv2_world_triplanar]]|| {{Span|false}}               |-| bool|| [[#vertex_color_is_srgb|vertex_color_is_srgb]]|| {{Span|false}}               |-| bool|| [[#vertex_color_use_as_albedo|vertex_color_use_as_albedo]]|| {{Span|false}}               |}== Methods =={| class="wikitable | bool|| [[#get_feature|get_feature]] '''(''' [[#Feature|Feature]] feature ''')''' const                                              |-| bool|| [[#get_flag|get_flag]] '''(''' [[#Flags|Flags]] flag ''')''' const                                                           |-| [[Texture2D GD|Texture2D]]|| [[#get_texture|get_texture]] '''(''' [[#TextureParam|TextureParam]] param ''')''' const                                      |-| void|| [[#set_feature|set_feature]] '''(''' [[#Feature|Feature]] feature, bool enable ''')'''                    |-| void|| [[#set_flag|set_flag]] '''(''' [[#Flags|Flags]] flag, bool enable ''')'''                                 |-| void|| [[#set_texture|set_texture]] '''(''' [[#TextureParam|TextureParam]] param, [[Texture2D GD|Texture2D]] texture ''')''' |}== Enumerations ===== TextureParam ====== TEXTURE_ALBEDO ====== TEXTURE_METALLIC ====== TEXTURE_ROUGHNESS ====== TEXTURE_EMISSION ====== TEXTURE_NORMAL ====== TEXTURE_RIM ====== TEXTURE_CLEARCOAT ====== TEXTURE_FLOWMAP ====== TEXTURE_AMBIENT_OCCLUSION ====== TEXTURE_HEIGHTMAP ====== TEXTURE_SUBSURFACE_SCATTERING ====== TEXTURE_TRANSMISSION ====== TEXTURE_REFRACTION ====== TEXTURE_DETAIL_MASK ====== TEXTURE_DETAIL_ALBEDO ====== TEXTURE_DETAIL_NORMAL ====== TEXTURE_ORM ====== TEXTURE_MAX ===enum '''TextureParam''':*  '''TEXTURE_ALBEDO''' = '''0'''  Texture specifying per-pixel color.*  '''TEXTURE_METALLIC''' = '''1'''  Texture specifying per-pixel metallic value.*  '''TEXTURE_ROUGHNESS''' = '''2'''  Texture specifying per-pixel roughness value.*  '''TEXTURE_EMISSION''' = '''3'''  Texture specifying per-pixel emission color.*  '''TEXTURE_NORMAL''' = '''4'''  Texture specifying per-pixel normal vector.*  '''TEXTURE_RIM''' = '''5'''  Texture specifying per-pixel rim value.*  '''TEXTURE_CLEARCOAT''' = '''6'''  Texture specifying per-pixel clearcoat value.*  '''TEXTURE_FLOWMAP''' = '''7'''  Texture specifying per-pixel flowmap direction for use with [[#anisotropy|anisotropy]].*  '''TEXTURE_AMBIENT_OCCLUSION''' = '''8'''  Texture specifying per-pixel ambient occlusion value.*  '''TEXTURE_HEIGHTMAP''' = '''9'''  Texture specifying per-pixel height.*  '''TEXTURE_SUBSURFACE_SCATTERING''' = '''10'''  Texture specifying per-pixel subsurface scattering.*  '''TEXTURE_TRANSMISSION''' = '''11'''  Texture specifying per-pixel transmission color.*  '''TEXTURE_REFRACTION''' = '''12'''  Texture specifying per-pixel refraction strength.*  '''TEXTURE_DETAIL_MASK''' = '''13'''  Texture specifying per-pixel detail mask blending value.*  '''TEXTURE_DETAIL_ALBEDO''' = '''14'''  Texture specifying per-pixel detail color.*  '''TEXTURE_DETAIL_NORMAL''' = '''15'''  Texture specifying per-pixel detail normal.*  '''TEXTURE_ORM''' = '''16'''*  '''TEXTURE_MAX''' = '''17'''  Represents the size of the [[#TextureParam|TextureParam]] enum.=== TextureFilter ====== TEXTURE_FILTER_NEAREST ====== TEXTURE_FILTER_LINEAR ====== TEXTURE_FILTER_NEAREST_WITH_MIPMAPS ====== TEXTURE_FILTER_LINEAR_WITH_MIPMAPS ====== TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC ====== TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC ====== TEXTURE_FILTER_MAX ===enum '''TextureFilter''':*  '''TEXTURE_FILTER_NEAREST''' = '''0'''  The texture filter reads from the nearest pixel only. The simplest and fastest method of filtering, but the texture will look pixelized.*  '''TEXTURE_FILTER_LINEAR''' = '''1'''  The texture filter blends between the nearest four pixels. Use this for most cases where you want to avoid a pixelated style.*  '''TEXTURE_FILTER_NEAREST_WITH_MIPMAPS''' = '''2'''*  '''TEXTURE_FILTER_LINEAR_WITH_MIPMAPS''' = '''3'''*  '''TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC''' = '''4'''*  '''TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC''' = '''5'''*  '''TEXTURE_FILTER_MAX''' = '''6'''  Represents the size of the [[#TextureFilter|TextureFilter]] enum.=== DetailUV ====== DETAIL_UV_1 ====== DETAIL_UV_2 ===enum '''DetailUV''':*  '''DETAIL_UV_1''' = '''0'''  Use {{Span|UV}} with the detail texture.*  '''DETAIL_UV_2''' = '''1'''  Use {{Span|UV2}} with the detail texture.=== Transparency ====== TRANSPARENCY_DISABLED ====== TRANSPARENCY_ALPHA ====== TRANSPARENCY_ALPHA_SCISSOR ====== TRANSPARENCY_ALPHA_DEPTH_PRE_PASS ====== TRANSPARENCY_MAX ===enum '''Transparency''':*  '''TRANSPARENCY_DISABLED''' = '''0'''  The material will not use transparency.*  '''TRANSPARENCY_ALPHA''' = '''1'''  The material will use the texture's alpha values for transparency.*  '''TRANSPARENCY_ALPHA_SCISSOR''' = '''2'''*  '''TRANSPARENCY_ALPHA_DEPTH_PRE_PASS''' = '''3'''*  '''TRANSPARENCY_MAX''' = '''4'''  Represents the size of the [[#Transparency|Transparency]] enum.=== ShadingMode ====== SHADING_MODE_UNSHADED ====== SHADING_MODE_PER_PIXEL ====== SHADING_MODE_PER_VERTEX ====== SHADING_MODE_MAX ===enum '''ShadingMode''':*  '''SHADING_MODE_UNSHADED''' = '''0'''  The object will not receive shadows.*  '''SHADING_MODE_PER_PIXEL''' = '''1'''  The object will be shaded per pixel. Useful for realistic shading effect.*  '''SHADING_MODE_PER_VERTEX''' = '''2'''  The object will be shaded per vertex. Useful when you want cheaper shaders and do not care about visual quality.*  '''SHADING_MODE_MAX''' = '''3'''  Represents the size of the [[#ShadingMode|ShadingMode]] enum.=== Feature ====== FEATURE_EMISSION ====== FEATURE_NORMAL_MAPPING ====== FEATURE_RIM ====== FEATURE_CLEARCOAT ====== FEATURE_ANISOTROPY ====== FEATURE_AMBIENT_OCCLUSION ====== FEATURE_HEIGHT_MAPPING ====== FEATURE_SUBSURACE_SCATTERING ====== FEATURE_TRANSMISSION ====== FEATURE_REFRACTION ====== FEATURE_DETAIL ====== FEATURE_MAX ===enum '''Feature''':*  '''FEATURE_EMISSION''' = '''0'''  Constant for setting [[#emission_enabled|emission_enabled]].*  '''FEATURE_NORMAL_MAPPING''' = '''1'''  Constant for setting [[#normal_enabled|normal_enabled]].*  '''FEATURE_RIM''' = '''2'''  Constant for setting [[#rim_enabled|rim_enabled]].*  '''FEATURE_CLEARCOAT''' = '''3'''  Constant for setting [[#clearcoat_enabled|clearcoat_enabled]].*  '''FEATURE_ANISOTROPY''' = '''4'''  Constant for setting [[#anisotropy_enabled|anisotropy_enabled]].*  '''FEATURE_AMBIENT_OCCLUSION''' = '''5'''  Constant for setting [[#ao_enabled|ao_enabled]].*  '''FEATURE_HEIGHT_MAPPING''' = '''6'''*  '''FEATURE_SUBSURACE_SCATTERING''' = '''7'''  Constant for setting [[#subsurf_scatter_enabled|subsurf_scatter_enabled]].*  '''FEATURE_TRANSMISSION''' = '''8'''  Constant for setting [[#transmission_enabled|transmission_enabled]].*  '''FEATURE_REFRACTION''' = '''9'''  Constant for setting [[#refraction_enabled|refraction_enabled]].*  '''FEATURE_DETAIL''' = '''10'''  Constant for setting [[#detail_enabled|detail_enabled]].*  '''FEATURE_MAX''' = '''11'''  Represents the size of the [[#Feature|Feature]] enum.=== BlendMode ====== BLEND_MODE_MIX ====== BLEND_MODE_ADD ====== BLEND_MODE_SUB ====== BLEND_MODE_MUL ===enum '''BlendMode''':*  '''BLEND_MODE_MIX''' = '''0'''  Default blend mode. The color of the object is blended over the background based on the object's alpha value.*  '''BLEND_MODE_ADD''' = '''1'''  The color of the object is added to the background.*  '''BLEND_MODE_SUB''' = '''2'''  The color of the object is subtracted from the background.*  '''BLEND_MODE_MUL''' = '''3'''  The color of the object is multiplied by the background.=== DepthDrawMode ====== DEPTH_DRAW_OPAQUE_ONLY ====== DEPTH_DRAW_ALWAYS ====== DEPTH_DRAW_DISABLED ===enum '''DepthDrawMode''':*  '''DEPTH_DRAW_OPAQUE_ONLY''' = '''0'''  Default depth draw mode. Depth is drawn only for opaque objects.*  '''DEPTH_DRAW_ALWAYS''' = '''1'''  Depth draw is calculated for both opaque and transparent objects.*  '''DEPTH_DRAW_DISABLED''' = '''2'''  No depth draw.=== CullMode ====== CULL_BACK ====== CULL_FRONT ====== CULL_DISABLED ===enum '''CullMode''':*  '''CULL_BACK''' = '''0'''  Default cull mode. The back of the object is culled when not visible.*  '''CULL_FRONT''' = '''1'''  The front of the object is culled when not visible.*  '''CULL_DISABLED''' = '''2'''  No culling is performed.=== Flags ====== FLAG_DISABLE_DEPTH_TEST ====== FLAG_ALBEDO_FROM_VERTEX_COLOR ====== FLAG_SRGB_VERTEX_COLOR ====== FLAG_USE_POINT_SIZE ====== FLAG_FIXED_SIZE ====== FLAG_BILLBOARD_KEEP_SCALE ====== FLAG_UV1_USE_TRIPLANAR ====== FLAG_UV2_USE_TRIPLANAR ====== FLAG_UV1_USE_WORLD_TRIPLANAR ====== FLAG_UV2_USE_WORLD_TRIPLANAR ====== FLAG_AO_ON_UV2 ====== FLAG_EMISSION_ON_UV2 ====== FLAG_ALBEDO_TEXTURE_FORCE_SRGB ====== FLAG_DONT_RECEIVE_SHADOWS ====== FLAG_DISABLE_AMBIENT_LIGHT ====== FLAG_USE_SHADOW_TO_OPACITY ====== FLAG_USE_TEXTURE_REPEAT ====== FLAG_INVERT_HEIGHTMAP ====== FLAG_MAX ===enum '''Flags''':*  '''FLAG_DISABLE_DEPTH_TEST''' = '''0'''  Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it.*  '''FLAG_ALBEDO_FROM_VERTEX_COLOR''' = '''1'''  Set {{Span|ALBEDO}} to the per-vertex color specified in the mesh.*  '''FLAG_SRGB_VERTEX_COLOR''' = '''2'''  Vertex color is in sRGB space and needs to be converted to linear. Only applies in the Vulkan renderer.*  '''FLAG_USE_POINT_SIZE''' = '''3'''  Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use {{Span|POINT_COORD}} instead of {{Span|UV}}.*  '''FLAG_FIXED_SIZE''' = '''4'''  Object is scaled by depth so that it always appears the same size on screen.*  '''FLAG_BILLBOARD_KEEP_SCALE''' = '''5'''  Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when [[#billboard_mode|billboard_mode]] is [[BaseMaterial3D GD#BILLBOARD_ENABLED|BILLBOARD_ENABLED]].*  '''FLAG_UV1_USE_TRIPLANAR''' = '''6'''  Use triplanar texture lookup for all texture lookups that would normally use {{Span|UV}}.*  '''FLAG_UV2_USE_TRIPLANAR''' = '''7'''  Use triplanar texture lookup for all texture lookups that would normally use {{Span|UV2}}.*  '''FLAG_UV1_USE_WORLD_TRIPLANAR''' = '''8'''  Use triplanar texture lookup for all texture lookups that would normally use {{Span|UV}}.*  '''FLAG_UV2_USE_WORLD_TRIPLANAR''' = '''9'''  Use triplanar texture lookup for all texture lookups that would normally use {{Span|UV2}}.*  '''FLAG_AO_ON_UV2''' = '''10'''  Use {{Span|UV2}} coordinates to look up from the [[#ao_texture|ao_texture]].*  '''FLAG_EMISSION_ON_UV2''' = '''11'''  Use {{Span|UV2}} coordinates to look up from the [[#emission_texture|emission_texture]].*  '''FLAG_ALBEDO_TEXTURE_FORCE_SRGB''' = '''12'''  Forces the shader to convert albedo from sRGB space to linear space.*  '''FLAG_DONT_RECEIVE_SHADOWS''' = '''13'''  Disables receiving shadows from other objects.*  '''FLAG_DISABLE_AMBIENT_LIGHT''' = '''14'''  Disables receiving ambient light.*  '''FLAG_USE_SHADOW_TO_OPACITY''' = '''15'''  Enables the shadow to opacity feature.*  '''FLAG_USE_TEXTURE_REPEAT''' = '''16'''*  '''FLAG_INVERT_HEIGHTMAP''' = '''17'''  Invert values read from a depth texture to convert them to height values (heightmap).*  '''FLAG_MAX''' = '''18'''  Represents the size of the [[#Flags|Flags]] enum.=== DiffuseMode ====== DIFFUSE_BURLEY ====== DIFFUSE_LAMBERT ====== DIFFUSE_LAMBERT_WRAP ====== DIFFUSE_OREN_NAYAR ====== DIFFUSE_TOON ===enum '''DiffuseMode''':*  '''DIFFUSE_BURLEY''' = '''0'''  Default diffuse scattering algorithm.*  '''DIFFUSE_LAMBERT''' = '''1'''  Diffuse scattering ignores roughness.*  '''DIFFUSE_LAMBERT_WRAP''' = '''2'''  Extends Lambert to cover more than 90 degrees when roughness increases.*  '''DIFFUSE_OREN_NAYAR''' = '''3'''  Attempts to use roughness to emulate microsurfacing.*  '''DIFFUSE_TOON''' = '''4'''  Uses a hard cut for lighting, with smoothing affected by roughness.=== SpecularMode ====== SPECULAR_SCHLICK_GGX ====== SPECULAR_BLINN ====== SPECULAR_PHONG ====== SPECULAR_TOON ====== SPECULAR_DISABLED ===enum '''SpecularMode''':*  '''SPECULAR_SCHLICK_GGX''' = '''0'''  Default specular blob.*  '''SPECULAR_BLINN''' = '''1'''  Older specular algorithm, included for compatibility.*  '''SPECULAR_PHONG''' = '''2'''  Older specular algorithm, included for compatibility.*  '''SPECULAR_TOON''' = '''3'''  Toon blob which changes size based on roughness.*  '''SPECULAR_DISABLED''' = '''4'''  No specular blob.=== BillboardMode ====== BILLBOARD_DISABLED ====== BILLBOARD_ENABLED ====== BILLBOARD_FIXED_Y ====== BILLBOARD_PARTICLES ===enum '''BillboardMode''':*  '''BILLBOARD_DISABLED''' = '''0'''  Billboard mode is disabled.*  '''BILLBOARD_ENABLED''' = '''1'''  The object's Z axis will always face the camera.*  '''BILLBOARD_FIXED_Y''' = '''2'''  The object's X axis will always face the camera.*  '''BILLBOARD_PARTICLES''' = '''3'''  Used for particle systems when assigned to [[Particles GD|Particles]] and [[CPUParticles GD|CPUParticles]] nodes. Enables {{Span|particles_anim_*}} properties.The [[ParticlesMaterial GD#anim_speed|ParticlesMaterial.anim_speed()]] or [[CPUParticles GD#anim_speed|CPUParticles.anim_speed()]] should also be set to a positive value for the animation to play.=== TextureChannel ====== TEXTURE_CHANNEL_RED ====== TEXTURE_CHANNEL_GREEN ====== TEXTURE_CHANNEL_BLUE ====== TEXTURE_CHANNEL_ALPHA ====== TEXTURE_CHANNEL_GRAYSCALE ===enum '''TextureChannel''':*  '''TEXTURE_CHANNEL_RED''' = '''0'''  Used to read from the red channel of a texture.*  '''TEXTURE_CHANNEL_GREEN''' = '''1'''  Used to read from the green channel of a texture.*  '''TEXTURE_CHANNEL_BLUE''' = '''2'''  Used to read from the blue channel of a texture.*  '''TEXTURE_CHANNEL_ALPHA''' = '''3'''  Used to read from the alpha channel of a texture.*  '''TEXTURE_CHANNEL_GRAYSCALE''' = '''4'''  Currently unused.=== EmissionOperator ====== EMISSION_OP_ADD ====== EMISSION_OP_MULTIPLY ===enum '''EmissionOperator''':*  '''EMISSION_OP_ADD''' = '''0'''  Adds the emission color to the color from the emission texture.*  '''EMISSION_OP_MULTIPLY''' = '''1'''  Multiplies the emission color by the color from the emission texture.=== DistanceFadeMode ====== DISTANCE_FADE_DISABLED ====== DISTANCE_FADE_PIXEL_ALPHA ====== DISTANCE_FADE_PIXEL_DITHER ====== DISTANCE_FADE_OBJECT_DITHER ===enum '''DistanceFadeMode''':*  '''DISTANCE_FADE_DISABLED''' = '''0'''  Do not use distance fade.*  '''DISTANCE_FADE_PIXEL_ALPHA''' = '''1'''  Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel.*  '''DISTANCE_FADE_PIXEL_DITHER''' = '''2'''  Smoothly fades the object out based on each pixel's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than [[BaseMaterial3D GD#DISTANCE_FADE_PIXEL_ALPHA|DISTANCE_FADE_PIXEL_ALPHA]].*  '''DISTANCE_FADE_OBJECT_DITHER''' = '''3'''  Smoothly fades the object out based on the object's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than [[BaseMaterial3D GD#DISTANCE_FADE_PIXEL_ALPHA|DISTANCE_FADE_PIXEL_ALPHA]].== Property Descriptions ===== albedo_color ===*  [[Color GD|Color]] '''albedo_color'''{| class="wikitable | ''Default''|| {{Span|Color( 1, 1, 1, 1 )}} |-| ''Setter''|| set_albedo(value)       |-| ''Getter''|| get_albedo()            |}The material's base color.=== albedo_tex_force_srgb ===*  bool '''albedo_tex_force_srgb'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}Forces a conversion of the [[#albedo_texture|albedo_texture]] from sRGB space to linear space.=== albedo_texture ===*  [[Texture2D GD|Texture2D]] '''albedo_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture to multiply by [[#albedo_color|albedo_color]]. Used for basic texturing of objects.=== alpha_scissor_threshold ===*  float '''alpha_scissor_threshold'''{| class="wikitable | ''Setter''|| set_alpha_scissor_threshold(value) |-| ''Getter''|| get_alpha_scissor_threshold()      |}Threshold at which the alpha scissor will discard values.=== anisotropy ===*  float '''anisotropy'''{| class="wikitable | ''Setter''|| set_anisotropy(value) |-| ''Getter''|| get_anisotropy()      |}The strength of the anisotropy effect.=== anisotropy_enabled ===*  bool '''anisotropy_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, anisotropy is enabled. Changes the shape of the specular blob and aligns it to tangent space. Mesh tangents are needed for this to work. If the mesh does not contain tangents the anisotropy effect will appear broken.=== anisotropy_flowmap ===*  [[Texture2D GD|Texture2D]] '''anisotropy_flowmap'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that offsets the tangent map for anisotropy calculations.=== ao_enabled ===*  bool '''ao_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, ambient occlusion is enabled. Ambient occlusion darkens areas based on the [[#ao_texture|ao_texture]].=== ao_light_affect ===*  float '''ao_light_affect'''{| class="wikitable | ''Setter''|| set_ao_light_affect(value) |-| ''Getter''|| get_ao_light_affect()      |}Amount that ambient occlusion affects lighting from lights. If {{Span|0}}, ambient occlusion only affects ambient light. If {{Span|1}}, ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic.=== ao_on_uv2 ===*  bool '''ao_on_uv2'''{| class="wikitable | ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, use {{Span|UV2}} coordinates to look up from the [[#ao_texture|ao_texture]].=== ao_texture ===*  [[Texture2D GD|Texture2D]] '''ao_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that defines the amount of ambient occlusion for a given point on the object.=== ao_texture_channel ===*  [[#TextureChannel|TextureChannel]] '''ao_texture_channel'''{| class="wikitable | ''Setter''|| set_ao_texture_channel(value) |-| ''Getter''|| get_ao_texture_channel()      |}Specifies the channel of the [[#ao_texture|ao_texture]] in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.=== billboard_keep_scale ===*  bool '''billboard_keep_scale'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, the shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when [[#billboard_mode|billboard_mode]] is [[BaseMaterial3D GD#BILLBOARD_ENABLED|BILLBOARD_ENABLED]].=== billboard_mode ===*  [[#BillboardMode|BillboardMode]] '''billboard_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                     |-| ''Setter''|| set_billboard_mode(value) |-| ''Getter''|| get_billboard_mode()      |}Controls how the object faces the camera. See [[#BillboardMode|BillboardMode]].=== blend_mode ===*  [[#BlendMode|BlendMode]] '''blend_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_blend_mode(value) |-| ''Getter''|| get_blend_mode()      |}The material's blend mode.'''Note:''' Values other than {{Span|Mix}} force the object into the transparent pipeline. See [[#BlendMode|BlendMode]].=== clearcoat ===*  float '''clearcoat'''{| class="wikitable | ''Setter''|| set_clearcoat(value) |-| ''Getter''|| get_clearcoat()      |}Sets the strength of the clearcoat effect. Setting to {{Span|0}} looks the same as disabling the clearcoat effect.=== clearcoat_enabled ===*  bool '''clearcoat_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough.=== clearcoat_gloss ===*  float '''clearcoat_gloss'''{| class="wikitable | ''Setter''|| set_clearcoat_gloss(value) |-| ''Getter''|| get_clearcoat_gloss()      |}Sets the roughness of the clearcoat pass. A higher value results in a smoother clearcoat while a lower value results in a rougher clearcoat.=== clearcoat_texture ===*  [[Texture2D GD|Texture2D]] '''clearcoat_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel.=== cull_mode ===*  [[#CullMode|CullMode]] '''cull_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                |-| ''Setter''|| set_cull_mode(value) |-| ''Getter''|| get_cull_mode()      |}Which side of the object is not drawn when backfaces are rendered. See [[#CullMode|CullMode]].=== depth_draw_mode ===*  [[#DepthDrawMode|DepthDrawMode]] '''depth_draw_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                      |-| ''Setter''|| set_depth_draw_mode(value) |-| ''Getter''|| get_depth_draw_mode()      |}Determines when depth rendering takes place. See [[#DepthDrawMode|DepthDrawMode]]. See also [[#transparency|transparency]].=== detail_albedo ===*  [[Texture2D GD|Texture2D]] '''detail_albedo'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that specifies the color of the detail overlay.=== detail_blend_mode ===*  [[#BlendMode|BlendMode]] '''detail_blend_mode'''{| class="wikitable | ''Setter''|| set_detail_blend_mode(value) |-| ''Getter''|| get_detail_blend_mode()      |}Specifies how the [[#detail_albedo|detail_albedo]] should blend with the current {{Span|ALBEDO}}. See [[#BlendMode|BlendMode]] for options.=== detail_enabled ===*  bool '''detail_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on [[#detail_mask|detail_mask]]. This can be used to add variation to objects, or to blend between two different albedo/normal textures.=== detail_mask ===*  [[Texture2D GD|Texture2D]] '''detail_mask'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to specify how the detail textures get blended with the base textures.=== detail_normal ===*  [[Texture2D GD|Texture2D]] '''detail_normal'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that specifies the per-pixel normal of the detail overlay.=== detail_uv_layer ===*  [[#DetailUV|DetailUV]] '''detail_uv_layer'''{| class="wikitable | ''Setter''|| set_detail_uv(value) |-| ''Getter''|| get_detail_uv()      |}Specifies whether to use {{Span|UV}} or {{Span|UV2}} for the detail layer. See [[#DetailUV|DetailUV]] for options.=== diffuse_mode ===*  [[#DiffuseMode|DiffuseMode]] '''diffuse_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                   |-| ''Setter''|| set_diffuse_mode(value) |-| ''Getter''|| get_diffuse_mode()      |}The algorithm used for diffuse light scattering. See [[#DiffuseMode|DiffuseMode]].=== disable_ambient_light ===*  bool '''disable_ambient_light'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, the object receives no ambient light.=== disable_receive_shadows ===*  bool '''disable_receive_shadows'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, the object receives no shadow that would otherwise be cast onto it.=== distance_fade_max_distance ===*  float '''distance_fade_max_distance'''{| class="wikitable | ''Setter''|| set_distance_fade_max_distance(value) |-| ''Getter''|| get_distance_fade_max_distance()      |}Distance at which the object fades fully and is no longer visible.=== distance_fade_min_distance ===*  float '''distance_fade_min_distance'''{| class="wikitable | ''Setter''|| set_distance_fade_min_distance(value) |-| ''Getter''|| get_distance_fade_min_distance()      |}Distance at which the object starts to fade. If the object is less than this distance away it will appear normal.=== distance_fade_mode ===*  [[#DistanceFadeMode|DistanceFadeMode]] '''distance_fade_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                    |-| ''Setter''|| set_distance_fade(value) |-| ''Getter''|| get_distance_fade()      |}Specifies which type of fade to use. Can be any of the [[#DistanceFadeMode|DistanceFadeMode]]\ s.=== emission ===*  [[Color GD|Color]] '''emission'''{| class="wikitable | ''Setter''|| set_emission(value) |-| ''Getter''|| get_emission()      |}The emitted light's color. See [[#emission_enabled|emission_enabled]].=== emission_enabled ===*  bool '''emission_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a [[GIProbe GD|GIProbe]] is used and this object is used in baked lighting.=== emission_energy ===*  float '''emission_energy'''{| class="wikitable | ''Setter''|| set_emission_energy(value) |-| ''Getter''|| get_emission_energy()      |}The emitted light's strength. See [[#emission_enabled|emission_enabled]].=== emission_on_uv2 ===*  bool '''emission_on_uv2'''{| class="wikitable | ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}Use {{Span|UV2}} to read from the [[#emission_texture|emission_texture]].=== emission_operator ===*  [[#EmissionOperator|EmissionOperator]] '''emission_operator'''{| class="wikitable | ''Setter''|| set_emission_operator(value) |-| ''Getter''|| get_emission_operator()      |}Sets how [[#emission|emission]] interacts with [[#emission_texture|emission_texture]]. Can either add or multiply. See [[#EmissionOperator|EmissionOperator]] for options.=== emission_texture ===*  [[Texture2D GD|Texture2D]] '''emission_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that specifies how much surface emits light at a given point.=== fixed_size ===*  bool '''fixed_size'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, the object is rendered at the same size regardless of distance.=== grow ===*  bool '''grow'''{| class="wikitable | ''Default''|| {{Span|false}}               |-| ''Setter''|| set_grow_enabled(value) |-| ''Getter''|| is_grow_enabled()       |}If {{Span|true}}, enables the vertex grow setting. See [[#grow_amount|grow_amount]].=== grow_amount ===*  float '''grow_amount'''{| class="wikitable | ''Default''|| {{Span|0.0}}         |-| ''Setter''|| set_grow(value) |-| ''Getter''|| get_grow()      |}Grows object vertices in the direction of their normals.=== heightmap_deep_parallax ===*  bool '''heightmap_deep_parallax'''{| class="wikitable | ''Setter''|| set_heightmap_deep_parallax(value)   |-| ''Getter''|| is_heightmap_deep_parallax_enabled() |}=== heightmap_enabled ===*  bool '''heightmap_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}=== heightmap_flip_binormal ===*  bool '''heightmap_flip_binormal'''{| class="wikitable | ''Setter''|| set_heightmap_deep_parallax_flip_binormal(value) |-| ''Getter''|| get_heightmap_deep_parallax_flip_binormal()      |}=== heightmap_flip_tangent ===*  bool '''heightmap_flip_tangent'''{| class="wikitable | ''Setter''|| set_heightmap_deep_parallax_flip_tangent(value) |-| ''Getter''|| get_heightmap_deep_parallax_flip_tangent()      |}=== heightmap_flip_texture ===*  bool '''heightmap_flip_texture'''{| class="wikitable | ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}=== heightmap_max_layers ===*  int '''heightmap_max_layers'''{| class="wikitable | ''Setter''|| set_heightmap_deep_parallax_max_layers(value) |-| ''Getter''|| get_heightmap_deep_parallax_max_layers()      |}=== heightmap_min_layers ===*  int '''heightmap_min_layers'''{| class="wikitable | ''Setter''|| set_heightmap_deep_parallax_min_layers(value) |-| ''Getter''|| get_heightmap_deep_parallax_min_layers()      |}=== heightmap_scale ===*  float '''heightmap_scale'''{| class="wikitable | ''Setter''|| set_heightmap_scale(value) |-| ''Getter''|| get_heightmap_scale()      |}=== heightmap_texture ===*  [[Texture2D GD|Texture2D]] '''heightmap_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}=== metallic ===*  float '''metallic'''{| class="wikitable | ''Default''|| {{Span|0.0}}             |-| ''Setter''|| set_metallic(value) |-| ''Getter''|| get_metallic()      |}A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between {{Span|0}} and {{Span|1}} should only be used for blending between metal and non-metal sections. To alter the amount of reflection use [[#roughness|roughness]].=== metallic_specular ===*  float '''metallic_specular'''{| class="wikitable | ''Default''|| {{Span|0.5}}             |-| ''Setter''|| set_specular(value) |-| ''Getter''|| get_specular()      |}Sets the size of the specular lobe. The specular lobe is the bright spot that is reflected from light sources.'''Note:''' unlike [[#metallic|metallic]], this is not energy-conserving, so it should be left at {{Span|0.5}} in most cases. See also [[#roughness|roughness]].=== metallic_texture ===*  [[Texture2D GD|Texture2D]] '''metallic_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to specify metallic for an object. This is multiplied by [[#metallic|metallic]].=== metallic_texture_channel ===*  [[#TextureChannel|TextureChannel]] '''metallic_texture_channel'''{| class="wikitable | ''Default''|| {{Span|0}}                               |-| ''Setter''|| set_metallic_texture_channel(value) |-| ''Getter''|| get_metallic_texture_channel()      |}Specifies the channel of the [[#metallic_texture|metallic_texture]] in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.=== no_depth_test ===*  bool '''no_depth_test'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, depth testing is disabled and the object will be drawn in render order.=== normal_enabled ===*  bool '''normal_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, normal mapping is enabled.=== normal_scale ===*  float '''normal_scale'''{| class="wikitable | ''Setter''|| set_normal_scale(value) |-| ''Getter''|| get_normal_scale()      |}The strength of the normal map's effect.=== normal_texture ===*  [[Texture2D GD|Texture2D]] '''normal_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to specify the normal at a given pixel. The {{Span|normal_texture}} only uses the red and green channels. The normal read from {{Span|normal_texture}} is oriented around the surface normal provided by the [[Mesh GD|Mesh]].=== orm_texture ===*  [[Texture2D GD|Texture2D]] '''orm_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}=== particles_anim_h_frames ===*  int '''particles_anim_h_frames'''{| class="wikitable | ''Setter''|| set_particles_anim_h_frames(value) |-| ''Getter''|| get_particles_anim_h_frames()      |}The number of horizontal frames in the particle sprite sheet. Only enabled when using [[BaseMaterial3D GD#BILLBOARD_PARTICLES|BILLBOARD_PARTICLES]]. See [[#billboard_mode|billboard_mode]].=== particles_anim_loop ===*  bool '''particles_anim_loop'''{| class="wikitable | ''Setter''|| set_particles_anim_loop(value) |-| ''Getter''|| get_particles_anim_loop()      |}If {{Span|true}}, particle animations are looped. Only enabled when using [[BaseMaterial3D GD#BILLBOARD_PARTICLES|BILLBOARD_PARTICLES]]. See [[#billboard_mode|billboard_mode]].=== particles_anim_v_frames ===*  int '''particles_anim_v_frames'''{| class="wikitable | ''Setter''|| set_particles_anim_v_frames(value) |-| ''Getter''|| get_particles_anim_v_frames()      |}The number of vertical frames in the particle sprite sheet. Only enabled when using [[BaseMaterial3D GD#BILLBOARD_PARTICLES|BILLBOARD_PARTICLES]]. See [[#billboard_mode|billboard_mode]].=== point_size ===*  float '''point_size'''{| class="wikitable | ''Default''|| {{Span|1.0}}               |-| ''Setter''|| set_point_size(value) |-| ''Getter''|| get_point_size()      |}The point size in pixels. See [[#use_point_size|use_point_size]].=== proximity_fade_distance ===*  float '''proximity_fade_distance'''{| class="wikitable | ''Setter''|| set_proximity_fade_distance(value) |-| ''Getter''|| get_proximity_fade_distance()      |}Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade.=== proximity_fade_enable ===*  bool '''proximity_fade_enable'''{| class="wikitable | ''Default''|| {{Span|false}}                   |-| ''Setter''|| set_proximity_fade(value)   |-| ''Getter''|| is_proximity_fade_enabled() |}If {{Span|true}}, the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object.=== refraction_enabled ===*  bool '''refraction_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, the refraction effect is enabled. Distorts transparency based on light from behind the object.=== refraction_scale ===*  float '''refraction_scale'''{| class="wikitable | ''Setter''|| set_refraction(value) |-| ''Getter''|| get_refraction()      |}The strength of the refraction effect.=== refraction_texture ===*  [[Texture2D GD|Texture2D]] '''refraction_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture that controls the strength of the refraction per-pixel. Multiplied by [[#refraction_scale|refraction_scale]].=== refraction_texture_channel ===*  [[#TextureChannel|TextureChannel]] '''refraction_texture_channel'''{| class="wikitable | ''Setter''|| set_refraction_texture_channel(value) |-| ''Getter''|| get_refraction_texture_channel()      |}Specifies the channel of the [[#ao_texture|ao_texture]] in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.=== rim ===*  float '''rim'''{| class="wikitable | ''Setter''|| set_rim(value) |-| ''Getter''|| get_rim()      |}Sets the strength of the rim lighting effect.=== rim_enabled ===*  bool '''rim_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object.=== rim_texture ===*  [[Texture2D GD|Texture2D]] '''rim_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by [[#rim|rim]].=== rim_tint ===*  float '''rim_tint'''{| class="wikitable | ''Setter''|| set_rim_tint(value) |-| ''Getter''|| get_rim_tint()      |}The amount of to blend light and albedo color when rendering rim effect. If {{Span|0}} the light color is used, while {{Span|1}} means albedo color is used. An intermediate value generally works best.=== roughness ===*  float '''roughness'''{| class="wikitable | ''Default''|| {{Span|1.0}}              |-| ''Setter''|| set_roughness(value) |-| ''Getter''|| get_roughness()      |}Surface reflection. A value of {{Span|0}} represents a perfect mirror while a value of {{Span|1}} completely blurs the reflection. See also [[#metallic|metallic]].=== roughness_texture ===*  [[Texture2D GD|Texture2D]] '''roughness_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to control the roughness per-pixel. Multiplied by [[#roughness|roughness]].=== roughness_texture_channel ===*  [[#TextureChannel|TextureChannel]] '''roughness_texture_channel'''{| class="wikitable | ''Default''|| {{Span|0}}                                |-| ''Setter''|| set_roughness_texture_channel(value) |-| ''Getter''|| get_roughness_texture_channel()      |}Specifies the channel of the [[#ao_texture|ao_texture]] in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.=== shading_mode ===*  [[#ShadingMode|ShadingMode]] '''shading_mode'''{| class="wikitable | ''Default''|| {{Span|1}}                   |-| ''Setter''|| set_shading_mode(value) |-| ''Getter''|| get_shading_mode()      |}=== shadow_to_opacity ===*  bool '''shadow_to_opacity'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, enables the "shadow to opacity" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR.=== specular_mode ===*  [[#SpecularMode|SpecularMode]] '''specular_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                    |-| ''Setter''|| set_specular_mode(value) |-| ''Getter''|| get_specular_mode()      |}The method for rendering the specular blob. See [[#SpecularMode|SpecularMode]].=== subsurf_scatter_enabled ===*  bool '''subsurf_scatter_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges.=== subsurf_scatter_strength ===*  float '''subsurf_scatter_strength'''{| class="wikitable | ''Setter''|| set_subsurface_scattering_strength(value) |-| ''Getter''|| get_subsurface_scattering_strength()      |}The strength of the subsurface scattering effect.=== subsurf_scatter_texture ===*  [[Texture2D GD|Texture2D]] '''subsurf_scatter_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by [[#subsurf_scatter_strength|subsurf_scatter_strength]].=== texture_filter ===*  [[#TextureFilter|TextureFilter]] '''texture_filter'''{| class="wikitable | ''Default''|| {{Span|3}}                     |-| ''Setter''|| set_texture_filter(value) |-| ''Getter''|| get_texture_filter()      |}Filter flags for the texture. See [[#TextureFilter|TextureFilter]] for options.=== texture_repeat ===*  bool '''texture_repeat'''{| class="wikitable | ''Default''|| {{Span|true}}        |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}Repeat flags for the texture. See [[#TextureFilter|TextureFilter]] for options.=== transmission ===*  [[Color GD|Color]] '''transmission'''{| class="wikitable | ''Setter''|| set_transmission(value) |-| ''Getter''|| get_transmission()      |}The color used by the transmission effect. Represents the light passing through an object.=== transmission_enabled ===*  bool '''transmission_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_feature(value) |-| ''Getter''|| get_feature()      |}If {{Span|true}}, the transmission effect is enabled.=== transmission_texture ===*  [[Texture2D GD|Texture2D]] '''transmission_texture'''{| class="wikitable | ''Setter''|| set_texture(value) |-| ''Getter''|| get_texture()      |}Texture used to control the transmission effect per-pixel. Added to [[#transmission|transmission]].=== transparency ===*  [[#Transparency|Transparency]] '''transparency'''{| class="wikitable | ''Default''|| {{Span|0}}                   |-| ''Setter''|| set_transparency(value) |-| ''Getter''|| get_transparency()      |}If {{Span|true}}, transparency is enabled on the body. See also [[#blend_mode|blend_mode]].=== use_point_size ===*  bool '''use_point_size'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, render point size can be changed.'''Note:''' this is only effective for objects whose geometry is point-based rather than triangle-based. See also [[#point_size|point_size]].=== uv1_offset ===*  [[Vector3 GD|Vector3]] '''uv1_offset'''{| class="wikitable | ''Default''|| {{Span|Vector3( 0, 0, 0 )}} |-| ''Setter''|| set_uv1_offset(value)  |-| ''Getter''|| get_uv1_offset()       |}How much to offset the {{Span|UV}} coordinates. This amount will be added to {{Span|UV}} in the vertex function. This can be used to offset a texture.=== uv1_scale ===*  [[Vector3 GD|Vector3]] '''uv1_scale'''{| class="wikitable | ''Default''|| {{Span|Vector3( 1, 1, 1 )}} |-| ''Setter''|| set_uv1_scale(value)   |-| ''Getter''|| get_uv1_scale()        |}How much to scale the {{Span|UV}} coordinates. This is multiplied by {{Span|UV}} in the vertex function.=== uv1_triplanar ===*  bool '''uv1_triplanar'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, instead of using {{Span|UV}} textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.=== uv1_triplanar_sharpness ===*  float '''uv1_triplanar_sharpness'''{| class="wikitable | ''Default''|| {{Span|1.0}}                                  |-| ''Setter''|| set_uv1_triplanar_blend_sharpness(value) |-| ''Getter''|| get_uv1_triplanar_blend_sharpness()      |}A lower number blends the texture more softly while a higher number blends the texture more sharply.=== uv1_world_triplanar ===*  bool '''uv1_world_triplanar'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, triplanar mapping for {{Span|UV}} is calculated in world space rather than object local space. See also [[#uv1_triplanar|uv1_triplanar]].=== uv2_offset ===*  [[Vector3 GD|Vector3]] '''uv2_offset'''{| class="wikitable | ''Default''|| {{Span|Vector3( 0, 0, 0 )}} |-| ''Setter''|| set_uv2_offset(value)  |-| ''Getter''|| get_uv2_offset()       |}How much to offset the {{Span|UV2}} coordinates. This amount will be added to {{Span|UV2}} in the vertex function. This can be used to offset a texture.=== uv2_scale ===*  [[Vector3 GD|Vector3]] '''uv2_scale'''{| class="wikitable | ''Default''|| {{Span|Vector3( 1, 1, 1 )}} |-| ''Setter''|| set_uv2_scale(value)   |-| ''Getter''|| get_uv2_scale()        |}How much to scale the {{Span|UV2}} coordinates. This is multiplied by {{Span|UV2}} in the vertex function.=== uv2_triplanar ===*  bool '''uv2_triplanar'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, instead of using {{Span|UV2}} textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.=== uv2_triplanar_sharpness ===*  float '''uv2_triplanar_sharpness'''{| class="wikitable | ''Default''|| {{Span|1.0}}                                  |-| ''Setter''|| set_uv2_triplanar_blend_sharpness(value) |-| ''Getter''|| get_uv2_triplanar_blend_sharpness()      |}A lower number blends the texture more softly while a higher number blends the texture more sharply.=== uv2_world_triplanar ===*  bool '''uv2_world_triplanar'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, triplanar mapping for {{Span|UV2}} is calculated in world space rather than object local space. See also [[#uv2_triplanar|uv2_triplanar]].=== vertex_color_is_srgb ===*  bool '''vertex_color_is_srgb'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, the model's vertex colors are processed as sRGB mode.=== vertex_color_use_as_albedo ===*  bool '''vertex_color_use_as_albedo'''{| class="wikitable | ''Default''|| {{Span|false}}       |-| ''Setter''|| set_flag(value) |-| ''Getter''|| get_flag()      |}If {{Span|true}}, the vertex color is used as albedo color.== Method Descriptions ===== get_feature ===*  bool '''get_feature''' '''(''' [[#Feature|Feature]] feature ''')''' constReturns {{Span|true}}, if the specified [[#Feature|Feature]] is enabled.=== get_flag ===*  bool '''get_flag''' '''(''' [[#Flags|Flags]] flag ''')''' constReturns {{Span|true}}, if the specified flag is enabled. See [[#Flags|Flags]] enumerator for options.=== get_texture ===*  [[Texture2D GD|Texture2D]] '''get_texture''' '''(''' [[#TextureParam|TextureParam]] param ''')''' constReturns the [[Texture GD|Texture]] associated with the specified [[#TextureParam|TextureParam]].=== set_feature ===*  void '''set_feature''' '''(''' [[#Feature|Feature]] feature, bool enable ''')'''If {{Span|true}}, enables the specified [[#Feature|Feature]]. Many features that are available in {{Span|BaseMaterial3D}}\ s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to {{Span|true}}.=== set_flag ===*  void '''set_flag''' '''(''' [[#Flags|Flags]] flag, bool enable ''')'''If {{Span|true}}, enables the specified flag. Flags are optional behavior that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to {{Span|true}}. See [[#Flags|Flags]] enumerator for options.=== set_texture ===*  void '''set_texture''' '''(''' [[#TextureParam|TextureParam]] param, [[Texture2D GD|Texture2D]] texture ''')'''Sets the texture for the slot specified by {{Span|param}}. See [[#TextureParam|TextureParam]] for available slots.