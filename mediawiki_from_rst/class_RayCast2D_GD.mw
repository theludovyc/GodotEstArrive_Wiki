__NOTOC__'''Inherits:''' [[Node2D GD|Node2D]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Query the closest object intersecting a ray.== Description ==A RayCast represents a line from its origin to its destination position, {{Span|cast_to}}. It is used to query the 2D space in order to find the closest object along the path of the ray.RayCast2D can ignore some objects by adding them to the exception list via {{Span|add_exception}}, by setting proper filtering with collision layers, or by filtering object types with type masks.RayCast2D can be configured to report collisions with [[Area2D GD|Area2D]]\ s ([[#collide_with_areas|collide_with_areas]]) and/or [[PhysicsBody2D GD|PhysicsBody2D]]\ s ([[#collide_with_bodies|collide_with_bodies]]).Only enabled raycasts will be able to query the space and report collisions.RayCast2D calculates intersection every physics frame (see [[Node GD|Node]]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [[#force_raycast_update|force_raycast_update]] after adjusting the raycast.== Tutorials ==*  :doc:`../tutorials/physics/ray-casting`== Properties =={| class="wikitable | [[Vector2 GD|Vector2]]|| [[#cast_to|cast_to]]|| {{Span|Vector2( 0, 50 )}} |-| bool|| [[#collide_with_areas|collide_with_areas]]|| {{Span|false}}            |-| bool|| [[#collide_with_bodies|collide_with_bodies]]|| {{Span|true}}             |-| int|| [[#collision_mask|collision_mask]]|| {{Span|1}}                |-| bool|| [[#enabled|enabled]]|| {{Span|false}}            |-| bool|| [[#exclude_parent|exclude_parent]]|| {{Span|true}}             |}== Methods =={| class="wikitable | void|| [[#add_exception|add_exception]] '''(''' [[Object GD|Object]] node ''')'''                                           |-| void|| [[#add_exception_rid|add_exception_rid]] '''(''' [[RID GD|RID]] rid ''')'''                                          |-| void|| [[#clear_exceptions|clear_exceptions]] '''(''' ''')'''                                                                      |-| void|| [[#force_raycast_update|force_raycast_update]] '''(''' ''')'''                                                              |-| [[Object GD|Object]]|| [[#get_collider|get_collider]] '''(''' ''')''' const                                                                        |-| int|| [[#get_collider_shape|get_collider_shape]] '''(''' ''')''' const                                                            |-| bool|| [[#get_collision_mask_bit|get_collision_mask_bit]] '''(''' int bit ''')''' const                          |-| [[Vector2 GD|Vector2]]|| [[#get_collision_normal|get_collision_normal]] '''(''' ''')''' const                                                        |-| [[Vector2 GD|Vector2]]|| [[#get_collision_point|get_collision_point]] '''(''' ''')''' const                                                          |-| bool|| [[#is_colliding|is_colliding]] '''(''' ''')''' const                                                                        |-| void|| [[#remove_exception|remove_exception]] '''(''' [[Object GD|Object]] node ''')'''                                     |-| void|| [[#remove_exception_rid|remove_exception_rid]] '''(''' [[RID GD|RID]] rid ''')'''                                    |-| void|| [[#set_collision_mask_bit|set_collision_mask_bit]] '''(''' int bit, bool value ''')''' |}== Property Descriptions ===== cast_to ===*  [[Vector2 GD|Vector2]] '''cast_to'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 50 )}} |-| ''Setter''|| set_cast_to(value)   |-| ''Getter''|| get_cast_to()        |}The ray's destination point, relative to the RayCast's {{Span|position}}.=== collide_with_areas ===*  bool '''collide_with_areas'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| set_collide_with_areas(value)   |-| ''Getter''|| is_collide_with_areas_enabled() |}If {{Span|true}}, collision with [[Area2D GD|Area2D]]\ s will be reported.=== collide_with_bodies ===*  bool '''collide_with_bodies'''{| class="wikitable | ''Default''|| {{Span|true}}                         |-| ''Setter''|| set_collide_with_bodies(value)   |-| ''Getter''|| is_collide_with_bodies_enabled() |}If {{Span|true}}, collision with [[PhysicsBody2D GD|PhysicsBody2D]]\ s will be reported.=== collision_mask ===*  int '''collision_mask'''{| class="wikitable | ''Default''|| {{Span|1}}                     |-| ''Setter''|| set_collision_mask(value) |-| ''Getter''|| get_collision_mask()      |}The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.=== enabled ===*  bool '''enabled'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_enabled(value) |-| ''Getter''|| is_enabled()       |}If {{Span|true}}, collisions will be reported.=== exclude_parent ===*  bool '''exclude_parent'''{| class="wikitable | ''Default''|| {{Span|true}}                       |-| ''Setter''|| set_exclude_parent_body(value) |-| ''Getter''|| get_exclude_parent_body()      |}If {{Span|true}}, the parent node will be excluded from collision detection.== Method Descriptions ===== add_exception ===*  void '''add_exception''' '''(''' [[Object GD|Object]] node ''')'''Adds a collision exception so the ray does not report collisions with the specified node.=== add_exception_rid ===*  void '''add_exception_rid''' '''(''' [[RID GD|RID]] rid ''')'''Adds a collision exception so the ray does not report collisions with the specified [[RID GD|RID]].=== clear_exceptions ===*  void '''clear_exceptions ( )'''Removes all collision exceptions for this ray.=== force_raycast_update ===*  void '''force_raycast_update ( )'''Updates the collision information for the ray. Use this method to update the collision information immediately instead of waiting for the next {{Span|_physics_process}} call, for example if the ray or its parent has changed state.'''Note:''' {{Span|enabled == true}} is not required for this to work.=== get_collider ===*  [[Object GD|Object]] '''get_collider ( )''' constReturns the first object that the ray intersects, or {{Span|null}} if no object is intersecting the ray (i.e. [[#is_colliding|is_colliding]] returns {{Span|false}}).=== get_collider_shape ===*  int '''get_collider_shape ( )''' constReturns the shape ID of the first object that the ray intersects, or {{Span|0}} if no object is intersecting the ray (i.e. [[#is_colliding|is_colliding]] returns {{Span|false}}).=== get_collision_mask_bit ===*  bool '''get_collision_mask_bit''' '''(''' int bit ''')''' constReturns an individual bit on the collision mask.=== get_collision_normal ===*  [[Vector2 GD|Vector2]] '''get_collision_normal ( )''' constReturns the normal of the intersecting object's shape at the collision point.=== get_collision_point ===*  [[Vector2 GD|Vector2]] '''get_collision_point ( )''' constReturns the collision point at which the ray intersects the closest object.'''Note:''' this point is in the '''global''' coordinate system.=== is_colliding ===*  bool '''is_colliding ( )''' constReturns whether any object is intersecting with the ray's vector (considering the vector length).=== remove_exception ===*  void '''remove_exception''' '''(''' [[Object GD|Object]] node ''')'''Removes a collision exception so the ray does report collisions with the specified node.=== remove_exception_rid ===*  void '''remove_exception_rid''' '''(''' [[RID GD|RID]] rid ''')'''Removes a collision exception so the ray does report collisions with the specified [[RID GD|RID]].=== set_collision_mask_bit ===*  void '''set_collision_mask_bit''' '''(''' int bit, bool value ''')'''Sets or clears individual bits on the collision mask. This makes selecting the areas scanned easier.