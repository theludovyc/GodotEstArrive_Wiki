__NOTOC__'''Inherits:''' [[Object GD|Object]]'''Inherited By:''' [[InputDefault GD|InputDefault]]A singleton that deals with inputs.== Description ==A singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the '''Input Map''' tab in the '''Project > Project Settings''', or with the [[InputMap GD|InputMap]] class.== Tutorials ==*  :doc:`../tutorials/inputs/index`== Methods =={| class="wikitable | void|| [[#action_press|action_press]] '''(''' [[StringName GD|StringName]] action, float strength=1.0 ''')'''                                                                                     |-| void|| [[#action_release|action_release]] '''(''' [[StringName GD|StringName]] action ''')'''                                                                                                                         |-| void|| [[#add_joy_mapping|add_joy_mapping]] '''(''' [[String GD|String]] mapping, bool update_existing=false ''')'''                                                                               |-| [[Vector3 GD|Vector3]]|| [[#get_accelerometer|get_accelerometer]] '''(''' ''')''' const                                                                                                                                                        |-| float|| [[#get_action_strength|get_action_strength]] '''(''' [[StringName GD|StringName]] action ''')''' const                                                                                                         |-| [[Array GD|Array]]|| [[#get_connected_joypads|get_connected_joypads]] '''(''' ''')'''                                                                                                                                                      |-| [[#CursorShape|CursorShape]]|| [[#get_current_cursor_shape|get_current_cursor_shape]] '''(''' ''')''' const                                                                                                                                          |-| [[Vector3 GD|Vector3]]|| [[#get_gravity|get_gravity]] '''(''' ''')''' const                                                                                                                                                                    |-| [[Vector3 GD|Vector3]]|| [[#get_gyroscope|get_gyroscope]] '''(''' ''')''' const                                                                                                                                                                |-| float|| [[#get_joy_axis|get_joy_axis]] '''(''' int device, int axis ''')''' const                                                                                                         |-| int|| [[#get_joy_axis_index_from_string|get_joy_axis_index_from_string]] '''(''' [[String GD|String]] axis ''')'''                                                                                                   |-| [[String GD|String]]|| [[#get_joy_axis_string|get_joy_axis_string]] '''(''' int axis_index ''')'''                                                                                                                         |-| int|| [[#get_joy_button_index_from_string|get_joy_button_index_from_string]] '''(''' [[String GD|String]] button ''')'''                                                                                             |-| [[String GD|String]]|| [[#get_joy_button_string|get_joy_button_string]] '''(''' int button_index ''')'''                                                                                                                   |-| [[String GD|String]]|| [[#get_joy_guid|get_joy_guid]] '''(''' int device ''')''' const                                                                                                                                     |-| [[String GD|String]]|| [[#get_joy_name|get_joy_name]] '''(''' int device ''')'''                                                                                                                                           |-| float|| [[#get_joy_vibration_duration|get_joy_vibration_duration]] '''(''' int device ''')'''                                                                                                               |-| [[Vector2 GD|Vector2]]|| [[#get_joy_vibration_strength|get_joy_vibration_strength]] '''(''' int device ''')'''                                                                                                               |-| [[Vector2 GD|Vector2]]|| [[#get_last_mouse_speed|get_last_mouse_speed]] '''(''' ''')''' const                                                                                                                                                  |-| [[Vector3 GD|Vector3]]|| [[#get_magnetometer|get_magnetometer]] '''(''' ''')''' const                                                                                                                                                          |-| int|| [[#get_mouse_button_mask|get_mouse_button_mask]] '''(''' ''')''' const                                                                                                                                                |-| [[#MouseMode|MouseMode]]|| [[#get_mouse_mode|get_mouse_mode]] '''(''' ''')''' const                                                                                                                                                              |-| bool|| [[#is_action_just_pressed|is_action_just_pressed]] '''(''' [[StringName GD|StringName]] action ''')''' const                                                                                                   |-| bool|| [[#is_action_just_released|is_action_just_released]] '''(''' [[StringName GD|StringName]] action ''')''' const                                                                                                 |-| bool|| [[#is_action_pressed|is_action_pressed]] '''(''' [[StringName GD|StringName]] action ''')''' const                                                                                                             |-| bool|| [[#is_joy_button_pressed|is_joy_button_pressed]] '''(''' int device, int button ''')''' const                                                                                     |-| bool|| [[#is_joy_known|is_joy_known]] '''(''' int device ''')'''                                                                                                                                           |-| bool|| [[#is_key_pressed|is_key_pressed]] '''(''' int keycode ''')''' const                                                                                                                                |-| bool|| [[#is_mouse_button_pressed|is_mouse_button_pressed]] '''(''' int button ''')''' const                                                                                                               |-| void|| [[#joy_connection_changed|joy_connection_changed]] '''(''' int device, bool connected, [[String GD|String]] name, [[String GD|String]] guid ''')'''                |-| void|| [[#parse_input_event|parse_input_event]] '''(''' [[InputEvent GD|InputEvent]] event ''')'''                                                                                                                    |-| void|| [[#remove_joy_mapping|remove_joy_mapping]] '''(''' [[String GD|String]] guid ''')'''                                                                                                                           |-| void|| [[#set_custom_mouse_cursor|set_custom_mouse_cursor]] '''(''' [[Resource GD|Resource]] image, [[#CursorShape|CursorShape]] shape=0, [[Vector2 GD|Vector2]] hotspot=Vector2( 0, 0 ) ''')''' |-| void|| [[#set_default_cursor_shape|set_default_cursor_shape]] '''(''' [[#CursorShape|CursorShape]] shape=0 ''')'''                                                                                             |-| void|| [[#set_mouse_mode|set_mouse_mode]] '''(''' [[#MouseMode|MouseMode]] mode ''')'''                                                                                                                        |-| void|| [[#set_use_accumulated_input|set_use_accumulated_input]] '''(''' bool enable ''')'''                                                                                                               |-| void|| [[#start_joy_vibration|start_joy_vibration]] '''(''' int device, float weak_magnitude, float strong_magnitude, float duration=0 ''')''' |-| void|| [[#stop_joy_vibration|stop_joy_vibration]] '''(''' int device ''')'''                                                                                                                               |-| void|| [[#vibrate_handheld|vibrate_handheld]] '''(''' int duration_ms=500 ''')'''                                                                                                                          |-| void|| [[#warp_mouse_position|warp_mouse_position]] '''(''' [[Vector2 GD|Vector2]] to ''')'''                                                                                                                         |}== Signals ===== joy_connection_changed ===*  '''joy_connection_changed''' '''(''' int device, bool connected ''')'''Emitted when a joypad device has been connected or disconnected.== Enumerations ===== MouseMode ====== MOUSE_MODE_VISIBLE ====== MOUSE_MODE_HIDDEN ====== MOUSE_MODE_CAPTURED ====== MOUSE_MODE_CONFINED ===enum '''MouseMode''':*  '''MOUSE_MODE_VISIBLE''' = '''0'''  Makes the mouse cursor visible if it is hidden.*  '''MOUSE_MODE_HIDDEN''' = '''1'''  Makes the mouse cursor hidden if it is visible.*  '''MOUSE_MODE_CAPTURED''' = '''2'''  Captures the mouse. The mouse will be hidden and unable to leave the game window, but it will still register movement and mouse button presses. On Windows and Linux, the mouse will use raw input mode, which means the reported movement will be unaffected by the OS' mouse acceleration settings.*  '''MOUSE_MODE_CONFINED''' = '''3'''  Makes the mouse cursor visible but confines it to the game window.=== CursorShape ====== CURSOR_ARROW ====== CURSOR_IBEAM ====== CURSOR_POINTING_HAND ====== CURSOR_CROSS ====== CURSOR_WAIT ====== CURSOR_BUSY ====== CURSOR_DRAG ====== CURSOR_CAN_DROP ====== CURSOR_FORBIDDEN ====== CURSOR_VSIZE ====== CURSOR_HSIZE ====== CURSOR_BDIAGSIZE ====== CURSOR_FDIAGSIZE ====== CURSOR_MOVE ====== CURSOR_VSPLIT ====== CURSOR_HSPLIT ====== CURSOR_HELP ===enum '''CursorShape''':*  '''CURSOR_ARROW''' = '''0'''  Arrow cursor. Standard, default pointing cursor.*  '''CURSOR_IBEAM''' = '''1'''  I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked.*  '''CURSOR_POINTING_HAND''' = '''2'''  Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item.*  '''CURSOR_CROSS''' = '''3'''  Cross cursor. Typically appears over regions in which a drawing operation can be performed or for selections.*  '''CURSOR_WAIT''' = '''4'''  Wait cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application is still usable during the operation.*  '''CURSOR_BUSY''' = '''5'''  Busy cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application isn't usable during the operation (e.g. something is blocking its main thread).*  '''CURSOR_DRAG''' = '''6'''  Drag cursor. Usually displayed when dragging something.*  '''CURSOR_CAN_DROP''' = '''7'''  Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position.*  '''CURSOR_FORBIDDEN''' = '''8'''  Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled.*  '''CURSOR_VSIZE''' = '''9'''  Vertical resize mouse cursor. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically.*  '''CURSOR_HSIZE''' = '''10'''  Horizontal resize mouse cursor. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.*  '''CURSOR_BDIAGSIZE''' = '''11'''  Window resize mouse cursor. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.*  '''CURSOR_FDIAGSIZE''' = '''12'''  Window resize mouse cursor. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of [[Input GD#CURSOR_BDIAGSIZE|CURSOR_BDIAGSIZE]]. It tells the user they can resize the window or the panel both horizontally and vertically.*  '''CURSOR_MOVE''' = '''13'''  Move cursor. Indicates that something can be moved.*  '''CURSOR_VSPLIT''' = '''14'''  Vertical split mouse cursor. On Windows, it's the same as [[Input GD#CURSOR_VSIZE|CURSOR_VSIZE]].*  '''CURSOR_HSPLIT''' = '''15'''  Horizontal split mouse cursor. On Windows, it's the same as [[Input GD#CURSOR_HSIZE|CURSOR_HSIZE]].*  '''CURSOR_HELP''' = '''16'''  Help cursor. Usually a question mark.== Method Descriptions ===== action_press ===*  void '''action_press''' '''(''' [[StringName GD|StringName]] action, float strength=1.0 ''')'''This will simulate pressing the specified action.The strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.'''Note:''' This method will not cause any [[Node GD#_input|_input]] calls. It is intended to be used with [[#is_action_pressed|is_action_pressed]] and [[#is_action_just_pressed|is_action_just_pressed]]. If you want to simulate {{Span|_input}}, use [[#parse_input_event|parse_input_event]] instead.=== action_release ===*  void '''action_release''' '''(''' [[StringName GD|StringName]] action ''')'''If the specified action is already pressed, this will release it.=== add_joy_mapping ===*  void '''add_joy_mapping''' '''(''' [[String GD|String]] mapping, bool update_existing=false ''')'''Adds a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.=== get_accelerometer ===*  [[Vector3 GD|Vector3]] '''get_accelerometer ( )''' constIf the device has an accelerometer, this will return the acceleration. Otherwise, it returns an empty [[Vector3 GD|Vector3]].Note this method returns an empty [[Vector3 GD|Vector3]] when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer.=== get_action_strength ===*  float '''get_action_strength''' '''(''' [[StringName GD|StringName]] action ''')''' constReturns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis as the keyboard, the value returned will be 0 or 1.=== get_connected_joypads ===*  [[Array GD|Array]] '''get_connected_joypads ( )'''Returns an [[Array GD|Array]] containing the device IDs of all currently connected joypads.=== get_current_cursor_shape ===*  [[#CursorShape|CursorShape]] '''get_current_cursor_shape ( )''' constReturns the currently assigned cursor shape (see [[#CursorShape|CursorShape]]).=== get_gravity ===*  [[Vector3 GD|Vector3]] '''get_gravity ( )''' constIf the device has an accelerometer, this will return the gravity. Otherwise, it returns an empty [[Vector3 GD|Vector3]].=== get_gyroscope ===*  [[Vector3 GD|Vector3]] '''get_gyroscope ( )''' constIf the device has a gyroscope, this will return the rate of rotation in rad/s around a device's X, Y, and Z axes. Otherwise, it returns an empty [[Vector3 GD|Vector3]].=== get_joy_axis ===*  float '''get_joy_axis''' '''(''' int device, int axis ''')''' constReturns the current value of the joypad axis at given index (see [[@GlobalScope GD#JoystickList|JoystickList]]).=== get_joy_axis_index_from_string ===*  int '''get_joy_axis_index_from_string''' '''(''' [[String GD|String]] axis ''')'''Returns the index of the provided axis name.=== get_joy_axis_string ===*  [[String GD|String]] '''get_joy_axis_string''' '''(''' int axis_index ''')'''Receives a [[@GlobalScope GD#JoystickList|JoystickList]] axis and returns its equivalent name as a string.=== get_joy_button_index_from_string ===*  int '''get_joy_button_index_from_string''' '''(''' [[String GD|String]] button ''')'''Returns the index of the provided button name.=== get_joy_button_string ===*  [[String GD|String]] '''get_joy_button_string''' '''(''' int button_index ''')'''Receives a gamepad button from [[@GlobalScope GD#JoystickList|JoystickList]] and returns its equivalent name as a string.=== get_joy_guid ===*  [[String GD|String]] '''get_joy_guid''' '''(''' int device ''')''' constReturns a SDL2-compatible device GUID on platforms that use gamepad remapping. Returns {{Span|"Default Gamepad"}} otherwise.=== get_joy_name ===*  [[String GD|String]] '''get_joy_name''' '''(''' int device ''')'''Returns the name of the joypad at the specified device index.=== get_joy_vibration_duration ===*  float '''get_joy_vibration_duration''' '''(''' int device ''')'''Returns the duration of the current vibration effect in seconds.=== get_joy_vibration_strength ===*  [[Vector2 GD|Vector2]] '''get_joy_vibration_strength''' '''(''' int device ''')'''Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.=== get_last_mouse_speed ===*  [[Vector2 GD|Vector2]] '''get_last_mouse_speed ( )''' constReturns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.=== get_magnetometer ===*  [[Vector3 GD|Vector3]] '''get_magnetometer ( )''' constIf the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.=== get_mouse_button_mask ===*  int '''get_mouse_button_mask ( )''' constReturns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together.=== get_mouse_mode ===*  [[#MouseMode|MouseMode]] '''get_mouse_mode ( )''' constReturns the mouse mode. See the constants for more information.=== is_action_just_pressed ===*  bool '''is_action_just_pressed''' '''(''' [[StringName GD|StringName]] action ''')''' constReturns {{Span|true}} when the user starts pressing the action event, meaning it's {{Span|true}} only on the frame that the user pressed down the button.This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.=== is_action_just_released ===*  bool '''is_action_just_released''' '''(''' [[StringName GD|StringName]] action ''')''' constReturns {{Span|true}} when the user stops pressing the action event, meaning it's {{Span|true}} only on the frame that the user released the button.=== is_action_pressed ===*  bool '''is_action_pressed''' '''(''' [[StringName GD|StringName]] action ''')''' constReturns {{Span|true}} if you are pressing the action event. Note that if an action has multiple buttons assigned and more than one of them is pressed, releasing one button will release the action, even if some other button assigned to this action is still pressed.=== is_joy_button_pressed ===*  bool '''is_joy_button_pressed''' '''(''' int device, int button ''')''' constReturns {{Span|true}} if you are pressing the joypad button (see [[@GlobalScope GD#JoystickList|JoystickList]]).=== is_joy_known ===*  bool '''is_joy_known''' '''(''' int device ''')'''Returns {{Span|true}} if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in [[@GlobalScope GD#JoystickList|JoystickList]]. Unknown joypads are not expected to match these constants, but you can still retrieve events from them.=== is_key_pressed ===*  bool '''is_key_pressed''' '''(''' int keycode ''')''' constReturns {{Span|true}} if you are pressing the key in the current keyboard layout. You can pass a [[@GlobalScope GD#KeyList|KeyList]] constant.=== is_mouse_button_pressed ===*  bool '''is_mouse_button_pressed''' '''(''' int button ''')''' constReturns {{Span|true}} if you are pressing the mouse button specified with [[@GlobalScope GD#ButtonList|ButtonList]].=== joy_connection_changed ===*  void '''joy_connection_changed''' '''(''' int device, bool connected, [[String GD|String]] name, [[String GD|String]] guid ''')'''Notifies the {{Span|Input}} singleton that a connection has changed, to update the state for the {{Span|device}} index.This is used internally and should not have to be called from user scripts. See [[#joy_connection_changed|joy_connection_changed]] for the signal emitted when this is triggered internally.=== parse_input_event ===*  void '''parse_input_event''' '''(''' [[InputEvent GD|InputEvent]] event ''')'''Feeds an [[InputEvent GD|InputEvent]] to the game. Can be used to artificially trigger input events from code. Also generates [[Node GD#_input|_input]] calls.Example:::    var a = InputEventAction.new()    a.action = "ui_cancel"    a.pressed = true    Input.parse_input_event(a)=== remove_joy_mapping ===*  void '''remove_joy_mapping''' '''(''' [[String GD|String]] guid ''')'''Removes all mappings from the internal database that match the given GUID.=== set_custom_mouse_cursor ===*  void '''set_custom_mouse_cursor''' '''(''' [[Resource GD|Resource]] image, [[#CursorShape|CursorShape]] shape=0, [[Vector2 GD|Vector2]] hotspot=Vector2( 0, 0 ) ''')'''Sets a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing {{Span|null}} to the image parameter resets to the system cursor. See [[#CursorShape|CursorShape]] for the list of shapes.{{Span|image}}'s size must be lower than 256×256.{{Span|hotspot}} must be within {{Span|image}}'s size.'''Note:''' [[AnimatedTexture GD|AnimatedTexture]]\ s aren't supported as custom mouse cursors. If using an [[AnimatedTexture GD|AnimatedTexture]], only the first frame will be displayed.'''Note:''' Only images imported with the '''Lossless''', '''Lossy''' or '''Uncompressed''' compression modes are supported. The '''Video RAM''' compression mode can't be used for custom cursors.=== set_default_cursor_shape ===*  void '''set_default_cursor_shape''' '''(''' [[#CursorShape|CursorShape]] shape=0 ''')'''Sets the default cursor shape to be used in the viewport instead of [[Input GD#CURSOR_ARROW|CURSOR_ARROW]].'''Note:''' If you want to change the default cursor shape for [[Control GD|Control]]'s nodes, use [[Control GD#mouse_default_cursor_shape|Control.mouse_default_cursor_shape()]] instead.'''Note:''' This method generates an [[InputEventMouseMotion GD|InputEventMouseMotion]] to update cursor immediately.=== set_mouse_mode ===*  void '''set_mouse_mode''' '''(''' [[#MouseMode|MouseMode]] mode ''')'''Sets the mouse mode. See the constants for more information.=== set_use_accumulated_input ===*  void '''set_use_accumulated_input''' '''(''' bool enable ''')'''Enables or disables the accumulation of similar input events sent by the operating system. When input accumulation is enabled, all input events generated during a frame will be merged and emitted when the frame is done rendering. Therefore, this limits the number of input method calls per second to the rendering FPS.Input accumulation is enabled by default. It can be disabled to get slightly more precise/reactive input at the cost of increased CPU usage. In applications where drawing freehand lines is required, input accumulation should generally be disabled while the user is drawing the line to get results that closely follow the actual input.=== start_joy_vibration ===*  void '''start_joy_vibration''' '''(''' int device, float weak_magnitude, float strong_magnitude, float duration=0 ''')'''Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. {{Span|weak_magnitude}} is the strength of the weak motor (between 0 and 1) and {{Span|strong_magnitude}} is the strength of the strong motor (between 0 and 1). {{Span|duration}} is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).'''Note:''' Not every hardware is compatible with long effect durations; it is recommended to restart an effect if it has to be played for more than a few seconds.=== stop_joy_vibration ===*  void '''stop_joy_vibration''' '''(''' int device ''')'''Stops the vibration of the joypad.=== vibrate_handheld ===*  void '''vibrate_handheld''' '''(''' int duration_ms=500 ''')'''Vibrate Android and iOS devices.'''Note:''' It needs VIBRATE permission for Android at export settings. iOS does not support duration.=== warp_mouse_position ===*  void '''warp_mouse_position''' '''(''' [[Vector2 GD|Vector2]] to ''')'''Sets the mouse position to the specified vector.