__NOTOC__'''Inherits:''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]An external library containing functions or script classes to use in Godot.== Description ==A GDNative library can implement [[NativeScript GD|NativeScript]]\ s, global functions to call with the [[GDNative GD|GDNative]] class, or low-level engine extensions through interfaces such as [[ARVRInterfaceGDNative GD|ARVRInterfaceGDNative]]. The library must be compiled for each platform and architecture that the project will run on.== Tutorials ==*  :doc:`../tutorials/plugins/gdnative/gdnative-c-example`*  :doc:`../tutorials/plugins/gdnative/gdnative-cpp-example`== Properties =={| class="wikitable | [[ConfigFile GD|ConfigFile]]|| [[#config_file|config_file]]||              |-| bool|| [[#load_once|load_once]]|| {{Span|true}}     |-| bool|| [[#reloadable|reloadable]]|| {{Span|true}}     |-| bool|| [[#singleton|singleton]]|| {{Span|false}}    |-| [[String GD|String]]|| [[#symbol_prefix|symbol_prefix]]|| {{Span|"godot_"}} |}== Methods =={| class="wikitable | [[PackedStringArray GD|PackedStringArray]]|| [[#get_current_dependencies|get_current_dependencies]] '''(''' ''')''' const |-| [[String GD|String]]|| [[#get_current_library_path|get_current_library_path]] '''(''' ''')''' const |}== Property Descriptions ===== config_file ===*  [[ConfigFile GD|ConfigFile]] '''config_file'''{| class="wikitable | ''Setter''|| set_config_file(value) |-| ''Getter''|| get_config_file()      |}This resource in INI-style [[ConfigFile GD|ConfigFile]] format, as in {{Span|.gdnlib}} files.=== load_once ===*  bool '''load_once'''{| class="wikitable | ''Default''|| {{Span|true}}             |-| ''Setter''|| set_load_once(value) |-| ''Getter''|| should_load_once()   |}If {{Span|true}}, Godot loads only one copy of the library and each script that references the library will share static data like static or global variables.If {{Span|false}}, Godot loads a separate copy of the library into memory for each script that references it.=== reloadable ===*  bool '''reloadable'''{| class="wikitable | ''Default''|| {{Span|true}}              |-| ''Setter''|| set_reloadable(value) |-| ''Getter''|| is_reloadable()       |}If {{Span|true}}, the editor will temporarily unload the library whenever the user switches away from the editor window, allowing the user to recompile the library without restarting Godot.'''Note:''' If the library defines tool scripts that run inside the editor, {{Span|reloadable}} must be {{Span|false}}. Otherwise, the editor will attempt to unload the tool scripts while they're in use and crash.=== singleton ===*  bool '''singleton'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| set_singleton(value) |-| ''Getter''|| is_singleton()       |}If {{Span|true}}, Godot loads the library at startup rather than the first time a script uses the library, calling {{Span|{prefix}gdnative_singleton}} after initializing the library (where {{Span|{prefix}}} is the value of [[#symbol_prefix|symbol_prefix]]). The library remains loaded as long as Godot is running.'''Note:''' A singleton library cannot be [[#reloadable|reloadable]].=== symbol_prefix ===*  [[String GD|String]] '''symbol_prefix'''{| class="wikitable | ''Default''|| {{Span|"godot_"}}             |-| ''Setter''|| set_symbol_prefix(value) |-| ''Getter''|| get_symbol_prefix()      |}The prefix this library's entry point functions begin with. For example, a GDNativeLibrary would declare its {{Span|gdnative_init}} function as {{Span|godot_gdnative_init}} by default.On platforms that require statically linking libraries (currently only iOS), each library must have a different {{Span|symbol_prefix}}.== Method Descriptions ===== get_current_dependencies ===*  [[PackedStringArray GD|PackedStringArray]] '''get_current_dependencies ( )''' constReturns paths to all dependency libraries for the current platform and architecture.=== get_current_library_path ===*  [[String GD|String]] '''get_current_library_path ( )''' constReturns the path to the dynamic library file for the current platform and architecture.