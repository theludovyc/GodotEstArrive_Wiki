__NOTOC__'''Inherits:''' [[Object GD|Object]]Access to basic engine properties.== Description ==The {{Span|Engine}} class allows you to query and modify the project's run-time parameters, such as frames per second, time scale, and others.== Properties =={| class="wikitable | bool|| [[#editor_hint|editor_hint]]|| {{Span|true}} |-| int|| [[#iterations_per_second|iterations_per_second]]|| {{Span|60}}   |-| float|| [[#physics_jitter_fix|physics_jitter_fix]]|| {{Span|0.5}}  |-| int|| [[#target_fps|target_fps]]|| {{Span|0}}    |-| float|| [[#time_scale|time_scale]]|| {{Span|1.0}}  |}== Methods =={| class="wikitable | [[Dictionary GD|Dictionary]]|| [[#get_author_info|get_author_info]] '''(''' ''')''' const                                       |-| [[Array GD|Array]]|| [[#get_copyright_info|get_copyright_info]] '''(''' ''')''' const                                 |-| [[Dictionary GD|Dictionary]]|| [[#get_donor_info|get_donor_info]] '''(''' ''')''' const                                         |-| int|| [[#get_frames_drawn|get_frames_drawn]] '''(''' ''')'''                                           |-| float|| [[#get_frames_per_second|get_frames_per_second]] '''(''' ''')''' const                           |-| int|| [[#get_idle_frames|get_idle_frames]] '''(''' ''')''' const                                       |-| [[Dictionary GD|Dictionary]]|| [[#get_license_info|get_license_info]] '''(''' ''')''' const                                     |-| [[String GD|String]]|| [[#get_license_text|get_license_text]] '''(''' ''')''' const                                     |-| [[MainLoop GD|MainLoop]]|| [[#get_main_loop|get_main_loop]] '''(''' ''')''' const                                           |-| int|| [[#get_physics_frames|get_physics_frames]] '''(''' ''')''' const                                 |-| float|| [[#get_physics_interpolation_fraction|get_physics_interpolation_fraction]] '''(''' ''')''' const |-| [[Object GD|Object]]|| [[#get_singleton|get_singleton]] '''(''' [[String GD|String]] name ''')''' const          |-| [[Dictionary GD|Dictionary]]|| [[#get_version_info|get_version_info]] '''(''' ''')''' const                                     |-| bool|| [[#has_singleton|has_singleton]] '''(''' [[String GD|String]] name ''')''' const          |-| bool|| [[#is_in_physics_frame|is_in_physics_frame]] '''(''' ''')''' const                               |}== Property Descriptions ===== editor_hint ===*  bool '''editor_hint'''{| class="wikitable | ''Default''|| {{Span|true}}               |-| ''Setter''|| set_editor_hint(value) |-| ''Getter''|| is_editor_hint()       |}If {{Span|true}}, it is running inside the editor. Useful for tool scripts.=== iterations_per_second ===*  int '''iterations_per_second'''{| class="wikitable | ''Default''|| {{Span|60}}                           |-| ''Setter''|| set_iterations_per_second(value) |-| ''Getter''|| get_iterations_per_second()      |}The number of fixed iterations per second. This controls how often physics simulation and [[Node GD#_physics_process|_physics_process]] methods are run. This value should generally always be set to {{Span|60}} or above, as Godot doesn't interpolate the physics step. As a result, values lower than {{Span|60}} will look stuttery. This value can be increased to make input more reactive or work around tunneling issues, but keep in mind doing so will increase CPU usage.=== physics_jitter_fix ===*  float '''physics_jitter_fix'''{| class="wikitable | ''Default''|| {{Span|0.5}}                       |-| ''Setter''|| set_physics_jitter_fix(value) |-| ''Getter''|| get_physics_jitter_fix()      |}Controls how much physics ticks are synchronized with real time. For 0 or less, the ticks are synchronized. Such values are recommended for network games, where clock synchronization matters. Higher values cause higher deviation of in-game clock and real clock, but allows to smooth out framerate jitters. The default value of 0.5 should be fine for most; values above 2 could cause the game to react to dropped frames with a noticeable delay and are not recommended.=== target_fps ===*  int '''target_fps'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_target_fps(value) |-| ''Getter''|| get_target_fps()      |}The desired frames per second. If the hardware cannot keep up, this setting may not be respected. A value of 0 means no limit.=== time_scale ===*  float '''time_scale'''{| class="wikitable | ''Default''|| {{Span|1.0}}               |-| ''Setter''|| set_time_scale(value) |-| ''Getter''|| get_time_scale()      |}Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.== Method Descriptions ===== get_author_info ===*  [[Dictionary GD|Dictionary]] '''get_author_info ( )''' constReturns engine author information in a Dictionary.{{Span|lead_developers}}    - Array of Strings, lead developer names{{Span|founders}}           - Array of Strings, founder names{{Span|project_managers}}   - Array of Strings, project manager names{{Span|developers}}         - Array of Strings, developer names=== get_copyright_info ===*  [[Array GD|Array]] '''get_copyright_info ( )''' constReturns an Array of copyright information Dictionaries.{{Span|name}}    - String, component name{{Span|parts}}   - Array of Dictionaries {{{Span|files}}, {{Span|copyright}}, {{Span|license}}} describing subsections of the component=== get_donor_info ===*  [[Dictionary GD|Dictionary]] '''get_donor_info ( )''' constReturns a Dictionary of Arrays of donor names.{{{Span|platinum_sponsors}}, {{Span|gold_sponsors}}, {{Span|mini_sponsors}}, {{Span|gold_donors}}, {{Span|silver_donors}}, {{Span|bronze_donors}}}=== get_frames_drawn ===*  int '''get_frames_drawn ( )'''Returns the total number of frames drawn. If the render loop is disabled with {{Span|--disable-render-loop}} via command line, this returns {{Span|0}}. See also [[#get_idle_frames|get_idle_frames]].=== get_frames_per_second ===*  float '''get_frames_per_second ( )''' constReturns the frames per second of the running game.=== get_idle_frames ===*  int '''get_idle_frames ( )''' constReturns the total number of frames passed since engine initialization which is advanced on each '''idle frame''', regardless of whether the render loop is enabled. See also [[#get_frames_drawn|get_frames_drawn]].=== get_license_info ===*  [[Dictionary GD|Dictionary]] '''get_license_info ( )''' constReturns Dictionary of licenses used by Godot and included third party components.=== get_license_text ===*  [[String GD|String]] '''get_license_text ( )''' constReturns Godot license text.=== get_main_loop ===*  [[MainLoop GD|MainLoop]] '''get_main_loop ( )''' constReturns the main loop object (see [[MainLoop GD|MainLoop]] and [[SceneTree GD|SceneTree]]).=== get_physics_frames ===*  int '''get_physics_frames ( )''' constReturns the total number of frames passed since engine initialization which is advanced on each '''physics frame'''.=== get_physics_interpolation_fraction ===*  float '''get_physics_interpolation_fraction ( )''' constReturns the fraction through the current physics tick we are at the time of rendering the frame. This can be used to implement fixed timestep interpolation.=== get_singleton ===*  [[Object GD|Object]] '''get_singleton''' '''(''' [[String GD|String]] name ''')''' constReturns a global singleton with given {{Span|name}}. Often used for plugins, e.g. GodotPayments.=== get_version_info ===*  [[Dictionary GD|Dictionary]] '''get_version_info ( )''' constReturns the current engine version information in a Dictionary.{{Span|major}}    - Holds the major version number as an int{{Span|minor}}    - Holds the minor version number as an int{{Span|patch}}    - Holds the patch version number as an int{{Span|hex}}      - Holds the full version number encoded as a hexadecimal int with one byte (2 places) per number (see example below){{Span|status}}   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String{{Span|build}}    - Holds the build name (e.g. "custom_build") as a String{{Span|hash}}     - Holds the full Git commit hash as a String{{Span|year}}     - Holds the year the version was released in as an int{{Span|string}}   - {{Span|major}} + {{Span|minor}} + {{Span|patch}} + {{Span|status}} + {{Span|build}} in a single StringThe {{Span|hex}} value is encoded as follows, from left to right: one byte for the major, one byte for the minor, one byte for the patch version. For example, "3.1.12" would be {{Span|0x03010C}}. '''Note:''' It's still an int internally, and printing it will give you its decimal representation, which is not particularly meaningful. Use hexadecimal literals for easy version comparisons from code:::    if Engine.get_version_info().hex >= 0x030200:        # Do things specific to version 3.2 or later    else:        # Do things specific to versions before 3.2=== has_singleton ===*  bool '''has_singleton''' '''(''' [[String GD|String]] name ''')''' constReturns {{Span|true}} if a singleton with given {{Span|name}} exists in global scope.=== is_in_physics_frame ===*  bool '''is_in_physics_frame ( )''' constReturns {{Span|true}} if the game is inside the fixed process and physics phase of the game loop.