__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Context to compute cryptographic hashes over multiple iterations.== Description ==The HashingContext class provides an interface for computing cryptographic hashes over multiple iterations. This is useful for example when computing hashes of big files (so you don't have to load them all in memory), network streams, and data streams in general (so you don't have to hold buffers).The [[#HashType|HashType]] enum shows the supported hashing algorithms.::    const CHUNK_SIZE = 1024        func hash_file(path):        var ctx = HashingContext.new()        var file = File.new()        # Start a SHA-256 context.        ctx.start(HashingContext.HASH_SHA256)        # Check that file exists.        if not file.file_exists(path):            return        # Open the file to hash.        file.open(path, File.READ)        # Update the context after reading each chunk.        while not file.eof_reached():            ctx.update(file.get_buffer(CHUNK_SIZE))        # Get the computed hash.        var res = ctx.finish()        # Print the result as hex string and array.        printt(res.hex_encode(), Array(res))'''Note:''' Not available in HTML5 exports.== Methods =={| class="wikitable | [[PackedByteArray GD|PackedByteArray]]|| [[#finish|finish]] '''(''' ''')'''                                                     |-| [[@GlobalScope GD#Error|Error]]|| [[#start|start]] '''(''' [[#HashType|HashType]] type ''')'''    |-| [[@GlobalScope GD#Error|Error]]|| [[#update|update]] '''(''' [[PackedByteArray GD|PackedByteArray]] chunk ''')''' |}== Enumerations ===== HashType ====== HASH_MD5 ====== HASH_SHA1 ====== HASH_SHA256 ===enum '''HashType''':*  '''HASH_MD5''' = '''0'''  Hashing algorithm: MD5.*  '''HASH_SHA1''' = '''1'''  Hashing algorithm: SHA-1.*  '''HASH_SHA256''' = '''2'''  Hashing algorithm: SHA-256.== Method Descriptions ===== finish ===*  [[PackedByteArray GD|PackedByteArray]] '''finish ( )'''Closes the current context, and return the computed hash.=== start ===*  [[@GlobalScope GD#Error|Error]] '''start''' '''(''' [[#HashType|HashType]] type ''')'''Starts a new hash computation of the given {{Span|type}} (e.g. [[HashingContext GD#HASH_SHA256|HASH_SHA256]] to start computation of a SHA-256).=== update ===*  [[@GlobalScope GD#Error|Error]] '''update''' '''(''' [[PackedByteArray GD|PackedByteArray]] chunk ''')'''Updates the computation with the given {{Span|chunk}} of data.