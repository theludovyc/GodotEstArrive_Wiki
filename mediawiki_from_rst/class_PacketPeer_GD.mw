__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]], [[PacketPeerDTLS GD|PacketPeerDTLS]], [[PacketPeerGDNative GD|PacketPeerGDNative]], [[PacketPeerStream GD|PacketPeerStream]], [[PacketPeerUDP GD|PacketPeerUDP]], [[WebRTCDataChannel GD|WebRTCDataChannel]], [[WebSocketPeer GD|WebSocketPeer]]Abstraction and base class for packet-based protocols.== Description ==PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering.== Properties =={| class="wikitable | int|| [[#encode_buffer_max_size|encode_buffer_max_size]]|| {{Span|8388608}} |}== Methods =={| class="wikitable | int|| [[#get_available_packet_count|get_available_packet_count]] '''(''' ''')''' const                                   |-| [[PackedByteArray GD|PackedByteArray]]|| [[#get_packet|get_packet]] '''(''' ''')'''                                                                         |-| [[@GlobalScope GD#Error|Error]]|| [[#get_packet_error|get_packet_error]] '''(''' ''')''' const                                                       |-| [[Variant GD|Variant]]|| [[#get_var|get_var]] '''(''' bool allow_objects=false ''')'''                                   |-| [[@GlobalScope GD#Error|Error]]|| [[#put_packet|put_packet]] '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''                    |-| [[@GlobalScope GD#Error|Error]]|| [[#put_var|put_var]] '''(''' [[Variant GD|Variant]] var, bool full_objects=false ''')''' |}== Property Descriptions ===== encode_buffer_max_size ===*  int '''encode_buffer_max_size'''{| class="wikitable | ''Default''|| {{Span|8388608}}                       |-| ''Setter''|| set_encode_buffer_max_size(value) |-| ''Getter''|| get_encode_buffer_max_size()      |}Maximum buffer size allowed when encoding [[Variant GD|Variant]]\ s. Raise this value to support heavier memory allocations.The [[#put_var|put_var]] method allocates memory on the stack, and the buffer used will grow automatically to the closest power of two to match the size of the [[Variant GD|Variant]]. If the [[Variant GD|Variant]] is bigger than {{Span|encode_buffer_max_size}}, the method will error out with [[@GlobalScope GD#ERR_OUT_OF_MEMORY|@GlobalScope.ERR_OUT_OF_MEMORY()]].== Method Descriptions ===== get_available_packet_count ===*  int '''get_available_packet_count ( )''' constReturns the number of packets currently available in the ring-buffer.=== get_packet ===*  [[PackedByteArray GD|PackedByteArray]] '''get_packet ( )'''Gets a raw packet.=== get_packet_error ===*  [[@GlobalScope GD#Error|Error]] '''get_packet_error ( )''' constReturns the error state of the last packet received (via [[#get_packet|get_packet]] and [[#get_var|get_var]]).=== get_var ===*  [[Variant GD|Variant]] '''get_var''' '''(''' bool allow_objects=false ''')'''Gets a Variant. If {{Span|allow_objects}} is {{Span|true}}, decoding objects is allowed.'''Warning:''' Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.=== put_packet ===*  [[@GlobalScope GD#Error|Error]] '''put_packet''' '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''Sends a raw packet.=== put_var ===*  [[@GlobalScope GD#Error|Error]] '''put_var''' '''(''' [[Variant GD|Variant]] var, bool full_objects=false ''')'''Sends a [[Variant GD|Variant]] as a packet. If {{Span|full_objects}} is {{Span|true}}, encoding objects is allowed (and can potentially include code).