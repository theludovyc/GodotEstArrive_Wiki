__NOTOC__'''Inherits:''' [[PhysicsBody2D GD|PhysicsBody2D]] '''<''' [[CollisionObject2D GD|CollisionObject2D]] '''<''' [[Node2D GD|Node2D]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]A body that is controlled by the 2D physics engine.== Description ==This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.A RigidBody2D has 4 behavior [[#mode|mode]]\ s: Rigid, Static, Character, and Kinematic.'''Note:''' You should not change a RigidBody2D's {{Span|position}} or {{Span|linear_velocity}} every frame or even very often. If you need to directly affect the body's state, use [[RigidBody2D GD#_integrate_forces|_integrate_forces]], which allows you to directly access the physics state.Please also keep in mind that physics bodies manage their own transform which overwrites the ones you set. So any direct or indirect transformation (including scaling of the node or its parent) will be visible in the editor only, and immediately reset at runtime.If you need to override the default physics behavior or add a transformation at runtime, you can write a custom force integration. See [[#custom_integrator|custom_integrator]].== Properties =={| class="wikitable | float|| [[#angular_damp|angular_damp]]|| {{Span|-1.0}}            |-| float|| [[#angular_velocity|angular_velocity]]|| {{Span|0.0}}             |-| [[Vector2 GD|Vector2]]|| [[#applied_force|applied_force]]|| {{Span|Vector2( 0, 0 )}} |-| float|| [[#applied_torque|applied_torque]]|| {{Span|0.0}}             |-| bool|| [[#can_sleep|can_sleep]]|| {{Span|true}}            |-| bool|| [[#contact_monitor|contact_monitor]]|| {{Span|false}}           |-| int|| [[#contacts_reported|contacts_reported]]|| {{Span|0}}               |-| [[#CCDMode|CCDMode]]|| [[#continuous_cd|continuous_cd]]|| {{Span|0}}               |-| bool|| [[#custom_integrator|custom_integrator]]|| {{Span|false}}           |-| float|| [[#gravity_scale|gravity_scale]]|| {{Span|1.0}}             |-| float|| [[#inertia|inertia]]||                     |-| float|| [[#linear_damp|linear_damp]]|| {{Span|-1.0}}            |-| [[Vector2 GD|Vector2]]|| [[#linear_velocity|linear_velocity]]|| {{Span|Vector2( 0, 0 )}} |-| float|| [[#mass|mass]]|| {{Span|1.0}}             |-| [[#Mode|Mode]]|| [[#mode|mode]]|| {{Span|0}}               |-| [[PhysicsMaterial GD|PhysicsMaterial]]|| [[#physics_material_override|physics_material_override]]||                     |-| bool|| [[#sleeping|sleeping]]|| {{Span|false}}           |-| float|| [[#weight|weight]]|| {{Span|9.8}}             |}== Methods =={| class="wikitable | void|| [[RigidBody2D GD#_integrate_forces|_integrate_forces]] '''(''' [[Physics2DDirectBodyState GD|Physics2DDirectBodyState]] state ''')''' virtual                                                                                                                 |-| void|| [[#add_central_force|add_central_force]] '''(''' [[Vector2 GD|Vector2]] force ''')'''                                                                                                                                                           |-| void|| [[#add_force|add_force]] '''(''' [[Vector2 GD|Vector2]] offset, [[Vector2 GD|Vector2]] force ''')'''                                                                                                                                     |-| void|| [[#add_torque|add_torque]] '''(''' float torque ''')'''                                                                                                                                                                            |-| void|| [[#apply_central_impulse|apply_central_impulse]] '''(''' [[Vector2 GD|Vector2]] impulse ''')'''                                                                                                                                                 |-| void|| [[#apply_impulse|apply_impulse]] '''(''' [[Vector2 GD|Vector2]] offset, [[Vector2 GD|Vector2]] impulse ''')'''                                                                                                                           |-| void|| [[#apply_torque_impulse|apply_torque_impulse]] '''(''' float torque ''')'''                                                                                                                                                        |-| [[Array GD|Array]]|| [[#get_colliding_bodies|get_colliding_bodies]] '''(''' ''')''' const                                                                                                                                                                                   |-| void|| [[#set_axis_velocity|set_axis_velocity]] '''(''' [[Vector2 GD|Vector2]] axis_velocity ''')'''                                                                                                                                                   |-| bool|| [[#test_motion|test_motion]] '''(''' [[Vector2 GD|Vector2]] motion, bool infinite_inertia=true, float margin=0.08, [[Physics2DTestMotionResult GD|Physics2DTestMotionResult]] result=null ''')''' |}== Signals ===== body_entered ===*  '''body_entered''' '''(''' [[Node GD|Node]] body ''')'''Emitted when a body enters into contact with this one. [[#contact_monitor|contact_monitor]] must be {{Span|true}} and [[#contacts_reported|contacts_reported]] greater than {{Span|0}}.=== body_exited ===*  '''body_exited''' '''(''' [[Node GD|Node]] body ''')'''Emitted when a body exits contact with this one. [[#contact_monitor|contact_monitor]] must be {{Span|true}} and [[#contacts_reported|contacts_reported]] greater than {{Span|0}}.=== body_shape_entered ===*  '''body_shape_entered''' '''(''' int body_id, [[Node GD|Node]] body, int body_shape, int local_shape ''')'''Emitted when a body enters into contact with this one. Reports colliding shape information. See [[CollisionObject2D GD|CollisionObject2D]] for shape index information. [[#contact_monitor|contact_monitor]] must be {{Span|true}} and [[#contacts_reported|contacts_reported]] greater than {{Span|0}}.=== body_shape_exited ===*  '''body_shape_exited''' '''(''' int body_id, [[Node GD|Node]] body, int body_shape, int local_shape ''')'''Emitted when a body shape exits contact with this one. Reports colliding shape information. See [[CollisionObject2D GD|CollisionObject2D]] for shape index information. [[#contact_monitor|contact_monitor]] must be {{Span|true}} and [[#contacts_reported|contacts_reported]] greater than {{Span|0}}.=== sleeping_state_changed ===*  '''sleeping_state_changed ( )'''Emitted when [[#sleeping|sleeping]] changes.== Enumerations ===== Mode ====== MODE_RIGID ====== MODE_STATIC ====== MODE_CHARACTER ====== MODE_KINEMATIC ===enum '''Mode''':*  '''MODE_RIGID''' = '''0'''  Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode.*  '''MODE_STATIC''' = '''1'''  Static mode. The body behaves like a [[StaticBody2D GD|StaticBody2D]] and does not move.*  '''MODE_CHARACTER''' = '''2'''  Character mode. Similar to [[RigidBody2D GD#MODE_RIGID|MODE_RIGID]], but the body can not rotate.*  '''MODE_KINEMATIC''' = '''3'''  Kinematic mode. The body behaves like a [[KinematicBody2D GD|KinematicBody2D]], and must be moved by code.=== CCDMode ====== CCD_MODE_DISABLED ====== CCD_MODE_CAST_RAY ====== CCD_MODE_CAST_SHAPE ===enum '''CCDMode''':*  '''CCD_MODE_DISABLED''' = '''0'''  Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.*  '''CCD_MODE_CAST_RAY''' = '''1'''  Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.*  '''CCD_MODE_CAST_SHAPE''' = '''2'''  Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.== Property Descriptions ===== angular_damp ===*  float '''angular_damp'''{| class="wikitable | ''Default''|| {{Span|-1.0}}                |-| ''Setter''|| set_angular_damp(value) |-| ''Getter''|| get_angular_damp()      |}Damps the body's [[#angular_velocity|angular_velocity]]. If {{Span|-1}}, the body will use the '''Default Angular Damp''' defined in '''Project > Project Settings > Physics > 2d'''.=== angular_velocity ===*  float '''angular_velocity'''{| class="wikitable | ''Default''|| {{Span|0.0}}                     |-| ''Setter''|| set_angular_velocity(value) |-| ''Getter''|| get_angular_velocity()      |}The body's rotational velocity.=== applied_force ===*  [[Vector2 GD|Vector2]] '''applied_force'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}      |-| ''Setter''|| set_applied_force(value) |-| ''Getter''|| get_applied_force()      |}The body's total applied force.=== applied_torque ===*  float '''applied_torque'''{| class="wikitable | ''Default''|| {{Span|0.0}}                   |-| ''Setter''|| set_applied_torque(value) |-| ''Getter''|| get_applied_torque()      |}The body's total applied torque.=== can_sleep ===*  bool '''can_sleep'''{| class="wikitable | ''Default''|| {{Span|true}}             |-| ''Setter''|| set_can_sleep(value) |-| ''Getter''|| is_able_to_sleep()   |}If {{Span|true}}, the body will not calculate forces and will act as a static body if there is no movement. The body will wake up when other forces are applied via collisions or by using [[#apply_impulse|apply_impulse]] or [[#add_force|add_force]].=== contact_monitor ===*  bool '''contact_monitor'''{| class="wikitable | ''Default''|| {{Span|false}}                    |-| ''Setter''|| set_contact_monitor(value)   |-| ''Getter''|| is_contact_monitor_enabled() |}If {{Span|true}}, the body will emit signals when it collides with another RigidBody2D. See also [[#contacts_reported|contacts_reported]].=== contacts_reported ===*  int '''contacts_reported'''{| class="wikitable | ''Default''|| {{Span|0}}                            |-| ''Setter''|| set_max_contacts_reported(value) |-| ''Getter''|| get_max_contacts_reported()      |}The maximum number of contacts to report.=== continuous_cd ===*  [[#CCDMode|CCDMode]] '''continuous_cd'''{| class="wikitable | ''Default''|| {{Span|0}}                                          |-| ''Setter''|| set_continuous_collision_detection_mode(value) |-| ''Getter''|| get_continuous_collision_detection_mode()      |}Continuous collision detection mode.Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [[#CCDMode|CCDMode]] for details.=== custom_integrator ===*  bool '''custom_integrator'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_use_custom_integrator(value) |-| ''Getter''|| is_using_custom_integrator()     |}If {{Span|true}}, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [[RigidBody2D GD#_integrate_forces|_integrate_forces]] function.=== gravity_scale ===*  float '''gravity_scale'''{| class="wikitable | ''Default''|| {{Span|1.0}}                  |-| ''Setter''|| set_gravity_scale(value) |-| ''Getter''|| get_gravity_scale()      |}Multiplies the gravity applied to the body. The body's gravity is calculated from the '''Default Gravity''' value in '''Project > Project Settings > Physics > 2d''' and/or any additional gravity vector applied by [[Area2D GD|Area2D]]\ s.=== inertia ===*  float '''inertia'''{| class="wikitable | ''Setter''|| set_inertia(value) |-| ''Getter''|| get_inertia()      |}The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 inertia to return to automatically computing it.=== linear_damp ===*  float '''linear_damp'''{| class="wikitable | ''Default''|| {{Span|-1.0}}               |-| ''Setter''|| set_linear_damp(value) |-| ''Getter''|| get_linear_damp()      |}Damps the body's [[#linear_velocity|linear_velocity]]. If {{Span|-1}}, the body will use the '''Default Linear Damp''' in '''Project > Project Settings > Physics > 2d'''.=== linear_velocity ===*  [[Vector2 GD|Vector2]] '''linear_velocity'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}        |-| ''Setter''|| set_linear_velocity(value) |-| ''Getter''|| get_linear_velocity()      |}The body's linear velocity.=== mass ===*  float '''mass'''{| class="wikitable | ''Default''|| {{Span|1.0}}         |-| ''Setter''|| set_mass(value) |-| ''Getter''|| get_mass()      |}The body's mass.=== mode ===*  [[#Mode|Mode]] '''mode'''{| class="wikitable | ''Default''|| {{Span|0}}           |-| ''Setter''|| set_mode(value) |-| ''Getter''|| get_mode()      |}The body's mode. See [[#Mode|Mode]] for possible values.=== physics_material_override ===*  [[PhysicsMaterial GD|PhysicsMaterial]] '''physics_material_override'''{| class="wikitable | ''Setter''|| set_physics_material_override(value) |-| ''Getter''|| get_physics_material_override()      |}The physics material override for the body.If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.=== sleeping ===*  bool '''sleeping'''{| class="wikitable | ''Default''|| {{Span|false}}           |-| ''Setter''|| set_sleeping(value) |-| ''Getter''|| is_sleeping()       |}If {{Span|true}}, the body is sleeping and will not calculate forces until woken up by a collision or by using [[#apply_impulse|apply_impulse]] or [[#add_force|add_force]].=== weight ===*  float '''weight'''{| class="wikitable | ''Default''|| {{Span|9.8}}           |-| ''Setter''|| set_weight(value) |-| ''Getter''|| get_weight()      |}The body's weight based on its mass and the '''Default Gravity''' value in '''Project > Project Settings > Physics > 2d'''.== Method Descriptions ===== _integrate_forces ===*  void '''_integrate_forces''' '''(''' [[Physics2DDirectBodyState GD|Physics2DDirectBodyState]] state ''')''' virtualAllows you to read and safely modify the simulation state for the object. Use this instead of [[Node GD#_physics_process|_physics_process]] if you need to directly change the body's {{Span|position}} or other physics properties. By default, it works in addition to the usual physics behavior, but [[#custom_integrator|custom_integrator]] allows you to disable the default behavior and write custom force integration for a body.=== add_central_force ===*  void '''add_central_force''' '''(''' [[Vector2 GD|Vector2]] force ''')'''Adds a constant directional force without affecting rotation.=== add_force ===*  void '''add_force''' '''(''' [[Vector2 GD|Vector2]] offset, [[Vector2 GD|Vector2]] force ''')'''Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.=== add_torque ===*  void '''add_torque''' '''(''' float torque ''')'''Adds a constant rotational force.=== apply_central_impulse ===*  void '''apply_central_impulse''' '''(''' [[Vector2 GD|Vector2]] impulse ''')'''Applies a directional impulse without affecting rotation.=== apply_impulse ===*  void '''apply_impulse''' '''(''' [[Vector2 GD|Vector2]] offset, [[Vector2 GD|Vector2]] impulse ''')'''Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin.=== apply_torque_impulse ===*  void '''apply_torque_impulse''' '''(''' float torque ''')'''Applies a rotational impulse to the body.=== get_colliding_bodies ===*  [[Array GD|Array]] '''get_colliding_bodies ( )''' constReturns a list of the bodies colliding with this one. Use [[#contacts_reported|contacts_reported]] to set the maximum number reported. You must also set [[#contact_monitor|contact_monitor]] to {{Span|true}}.'''Note:''' The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.=== set_axis_velocity ===*  void '''set_axis_velocity''' '''(''' [[Vector2 GD|Vector2]] axis_velocity ''')'''Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.=== test_motion ===*  bool '''test_motion''' '''(''' [[Vector2 GD|Vector2]] motion, bool infinite_inertia=true, float margin=0.08, [[Physics2DTestMotionResult GD|Physics2DTestMotionResult]] result=null ''')'''Returns {{Span|true}} if a collision would result from moving in the given vector. {{Span|margin}} increases the size of the shapes involved in the collision detection, and {{Span|result}} is an object of type [[Physics2DTestMotionResult GD|Physics2DTestMotionResult]], which contains additional information about the collision (should there be one).