__NOTOC__'''Inherits:''' [[Node GD|Node]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[ARVRAnchor GD|ARVRAnchor]], [[ARVRController GD|ARVRController]], [[ARVROrigin GD|ARVROrigin]], [[AudioStreamPlayer3D GD|AudioStreamPlayer3D]], [[BoneAttachment GD|BoneAttachment]], [[Camera GD|Camera]], [[CollisionObject GD|CollisionObject]], [[CollisionPolygon GD|CollisionPolygon]], [[CollisionShape GD|CollisionShape]], [[GridMap GD|GridMap]], [[Joint GD|Joint]], [[Listener GD|Listener]], [[Navigation GD|Navigation]], [[NavigationRegion GD|NavigationRegion]], [[Path GD|Path]], [[PathFollow GD|PathFollow]], [[Position3D GD|Position3D]], [[ProximityGroup GD|ProximityGroup]], [[RayCast GD|RayCast]], [[RemoteTransform GD|RemoteTransform]], [[Skeleton GD|Skeleton]], [[SpringArm GD|SpringArm]], [[VehicleWheel GD|VehicleWheel]], [[VisibilityNotifier GD|VisibilityNotifier]], [[VisualInstance GD|VisualInstance]]Most basic 3D game object, parent of all 3D-related nodes.== Description ==Most basic 3D game object, with a 3D [[Transform GD|Transform]] and visibility settings. All other 3D game objects inherit from Spatial. Use {{Span|Spatial}} as a parent node to move, scale, rotate and show/hide children in a 3D project.Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the {{Span|Spatial}} object is set as top-level. Affine operations in this coordinate system correspond to direct affine operations on the {{Span|Spatial}}'s transform. The word local below refers to this coordinate system. The coordinate system that is attached to the {{Span|Spatial}} object itself is referred to as object-local coordinate system.== Tutorials ==*  :doc:`../tutorials/3d/introduction_to_3d`== Properties =={| class="wikitable | [[SpatialGizmo GD|SpatialGizmo]]|| [[#gizmo|gizmo]]||                                                     |-| [[Transform GD|Transform]]|| [[#global_transform|global_transform]]||                                                     |-| [[Vector3 GD|Vector3]]|| [[#rotation|rotation]]||                                                     |-| [[Vector3 GD|Vector3]]|| [[#rotation_degrees|rotation_degrees]]|| {{Span|Vector3( 0, 0, 0 )}}                              |-| [[Vector3 GD|Vector3]]|| [[#scale|scale]]|| {{Span|Vector3( 1, 1, 1 )}}                              |-| [[Transform GD|Transform]]|| [[#transform|transform]]|| {{Span|Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )}} |-| [[Vector3 GD|Vector3]]|| [[#translation|translation]]|| {{Span|Vector3( 0, 0, 0 )}}                              |-| bool|| [[#visible|visible]]|| {{Span|true}}                                            |}== Methods =={| class="wikitable | void|| [[#force_update_transform|force_update_transform]] '''(''' ''')'''                                                                                                              |-| [[Spatial GD|Spatial]]|| [[#get_parent_spatial|get_parent_spatial]] '''(''' ''')''' const                                                                                                                |-| [[World GD|World]]|| [[#get_world|get_world]] '''(''' ''')''' const                                                                                                                                  |-| void|| [[#global_rotate|global_rotate]] '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''                                                            |-| void|| [[#global_scale|global_scale]] '''(''' [[Vector3 GD|Vector3]] scale ''')'''                                                                                              |-| void|| [[#global_translate|global_translate]] '''(''' [[Vector3 GD|Vector3]] offset ''')'''                                                                                     |-| void|| [[#hide|hide]] '''(''' ''')'''                                                                                                                                                  |-| bool|| [[#is_local_transform_notification_enabled|is_local_transform_notification_enabled]] '''(''' ''')''' const                                                                      |-| bool|| [[#is_scale_disabled|is_scale_disabled]] '''(''' ''')''' const                                                                                                                  |-| bool|| [[#is_set_as_toplevel|is_set_as_toplevel]] '''(''' ''')''' const                                                                                                                |-| bool|| [[#is_transform_notification_enabled|is_transform_notification_enabled]] '''(''' ''')''' const                                                                                  |-| bool|| [[#is_visible_in_tree|is_visible_in_tree]] '''(''' ''')''' const                                                                                                                |-| void|| [[#look_at|look_at]] '''(''' [[Vector3 GD|Vector3]] target, [[Vector3 GD|Vector3]] up ''')'''                                                                     |-| void|| [[#look_at_from_position|look_at_from_position]] '''(''' [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] target, [[Vector3 GD|Vector3]] up ''')''' |-| void|| [[#orthonormalize|orthonormalize]] '''(''' ''')'''                                                                                                                              |-| void|| [[#rotate|rotate]] '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''                                                                          |-| void|| [[#rotate_object_local|rotate_object_local]] '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''                                                |-| void|| [[#rotate_x|rotate_x]] '''(''' float angle ''')'''                                                                                                          |-| void|| [[#rotate_y|rotate_y]] '''(''' float angle ''')'''                                                                                                          |-| void|| [[#rotate_z|rotate_z]] '''(''' float angle ''')'''                                                                                                          |-| void|| [[#scale_object_local|scale_object_local]] '''(''' [[Vector3 GD|Vector3]] scale ''')'''                                                                                  |-| void|| [[#set_as_toplevel|set_as_toplevel]] '''(''' bool enable ''')'''                                                                                             |-| void|| [[#set_disable_scale|set_disable_scale]] '''(''' bool disable ''')'''                                                                                        |-| void|| [[#set_identity|set_identity]] '''(''' ''')'''                                                                                                                                  |-| void|| [[#set_ignore_transform_notification|set_ignore_transform_notification]] '''(''' bool enabled ''')'''                                                        |-| void|| [[#set_notify_local_transform|set_notify_local_transform]] '''(''' bool enable ''')'''                                                                       |-| void|| [[#set_notify_transform|set_notify_transform]] '''(''' bool enable ''')'''                                                                                   |-| void|| [[#show|show]] '''(''' ''')'''                                                                                                                                                  |-| [[Vector3 GD|Vector3]]|| [[#to_global|to_global]] '''(''' [[Vector3 GD|Vector3]] local_point ''')''' const                                                                                        |-| [[Vector3 GD|Vector3]]|| [[#to_local|to_local]] '''(''' [[Vector3 GD|Vector3]] global_point ''')''' const                                                                                         |-| void|| [[#translate|translate]] '''(''' [[Vector3 GD|Vector3]] offset ''')'''                                                                                                   |-| void|| [[#translate_object_local|translate_object_local]] '''(''' [[Vector3 GD|Vector3]] offset ''')'''                                                                         |-| void|| [[#update_gizmo|update_gizmo]] '''(''' ''')'''                                                                                                                                  |}== Signals ===== visibility_changed ===*  '''visibility_changed ( )'''Emitted when node visibility changes.== Constants ===== NOTIFICATION_TRANSFORM_CHANGED ====== NOTIFICATION_ENTER_WORLD ====== NOTIFICATION_EXIT_WORLD ====== NOTIFICATION_VISIBILITY_CHANGED ===*  '''NOTIFICATION_TRANSFORM_CHANGED''' = '''2000'''  Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.In order for [[Spatial GD#NOTIFICATION_TRANSFORM_CHANGED|NOTIFICATION_TRANSFORM_CHANGED]] to work, users first need to ask for it, with [[#set_notify_transform|set_notify_transform]].*  '''NOTIFICATION_ENTER_WORLD''' = '''41'''  Spatial nodes receives this notification when they are registered to new [[World GD|World]] resource.*  '''NOTIFICATION_EXIT_WORLD''' = '''42'''  Spatial nodes receives this notification when they are unregistered from current [[World GD|World]] resource.*  '''NOTIFICATION_VISIBILITY_CHANGED''' = '''43'''  Spatial nodes receives this notification when their visibility changes.== Property Descriptions ===== gizmo ===*  [[SpatialGizmo GD|SpatialGizmo]] '''gizmo'''{| class="wikitable | ''Setter''|| set_gizmo(value) |-| ''Getter''|| get_gizmo()      |}The [[SpatialGizmo GD|SpatialGizmo]] for this node. Used for example in [[EditorSpatialGizmo GD|EditorSpatialGizmo]] as custom visualization and editing handles in Editor.=== global_transform ===*  [[Transform GD|Transform]] '''global_transform'''{| class="wikitable | ''Setter''|| set_global_transform(value) |-| ''Getter''|| get_global_transform()      |}World space (global) [[Transform GD|Transform]] of this node.=== rotation ===*  [[Vector3 GD|Vector3]] '''rotation'''{| class="wikitable | ''Setter''|| set_rotation(value) |-| ''Getter''|| get_rotation()      |}Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).'''Note:''' In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [[Vector3 GD|Vector3]] data structure not because the rotation is a vector, but only because [[Vector3 GD|Vector3]] exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.=== rotation_degrees ===*  [[Vector3 GD|Vector3]] '''rotation_degrees'''{| class="wikitable | ''Default''|| {{Span|Vector3( 0, 0, 0 )}}      |-| ''Setter''|| set_rotation_degrees(value) |-| ''Getter''|| get_rotation_degrees()      |}Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).=== scale ===*  [[Vector3 GD|Vector3]] '''scale'''{| class="wikitable | ''Default''|| {{Span|Vector3( 1, 1, 1 )}} |-| ''Setter''|| set_scale(value)       |-| ''Getter''|| get_scale()            |}Scale part of the local transformation.=== transform ===*  [[Transform GD|Transform]] '''transform'''{| class="wikitable | ''Default''|| {{Span|Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )}} |-| ''Setter''|| set_transform(value)                                |-| ''Getter''|| get_transform()                                     |}Local space [[Transform GD|Transform]] of this node, with respect to the parent node.=== translation ===*  [[Vector3 GD|Vector3]] '''translation'''{| class="wikitable | ''Default''|| {{Span|Vector3( 0, 0, 0 )}} |-| ''Setter''|| set_translation(value) |-| ''Getter''|| get_translation()      |}Local translation of this node.=== visible ===*  bool '''visible'''{| class="wikitable | ''Default''|| {{Span|true}}           |-| ''Setter''|| set_visible(value) |-| ''Getter''|| is_visible()       |}If {{Span|true}}, this node is drawn.== Method Descriptions ===== force_update_transform ===*  void '''force_update_transform ( )'''Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.=== get_parent_spatial ===*  [[Spatial GD|Spatial]] '''get_parent_spatial ( )''' constReturns the parent {{Span|Spatial}}, or an empty [[Object GD|Object]] if no parent exists or parent is not of type {{Span|Spatial}}.=== get_world ===*  [[World GD|World]] '''get_world ( )''' constReturns the current [[World GD|World]] resource this {{Span|Spatial}} node is registered to.=== global_rotate ===*  void '''global_rotate''' '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''Rotates the global (world) transformation around axis, a unit [[Vector3 GD|Vector3]], by specified angle in radians. The rotation axis is in global coordinate system.=== global_scale ===*  void '''global_scale''' '''(''' [[Vector3 GD|Vector3]] scale ''')'''Scales the global (world) transformation by the given [[Vector3 GD|Vector3]] scale factors.=== global_translate ===*  void '''global_translate''' '''(''' [[Vector3 GD|Vector3]] offset ''')'''Moves the global (world) transformation by [[Vector3 GD|Vector3]] offset. The offset is in global coordinate system.=== hide ===*  void '''hide ( )'''Disables rendering of this node. Changes [[#visible|visible]] to {{Span|false}}.=== is_local_transform_notification_enabled ===*  bool '''is_local_transform_notification_enabled ( )''' constReturns whether node notifies about its local transformation changes. {{Span|Spatial}} will not propagate this by default.=== is_scale_disabled ===*  bool '''is_scale_disabled ( )''' constReturns whether this node uses a scale of {{Span|(1, 1, 1)}} or its local transformation scale.=== is_set_as_toplevel ===*  bool '''is_set_as_toplevel ( )''' constReturns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.=== is_transform_notification_enabled ===*  bool '''is_transform_notification_enabled ( )''' constReturns whether the node notifies about its global and local transformation changes. {{Span|Spatial}} will not propagate this by default.=== is_visible_in_tree ===*  bool '''is_visible_in_tree ( )''' constReturns whether the node is visible, taking into consideration that its parents visibility.=== look_at ===*  void '''look_at''' '''(''' [[Vector3 GD|Vector3]] target, [[Vector3 GD|Vector3]] up ''')'''Rotates itself so that the local -Z axis points towards the {{Span|target}} position.The transform will first be rotated around the given {{Span|up}} vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the {{Span|target}} and {{Span|up}} vectors.Operations take place in global space.=== look_at_from_position ===*  void '''look_at_from_position''' '''(''' [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] target, [[Vector3 GD|Vector3]] up ''')'''Moves the node to the specified {{Span|position}}, and then rotates itself to point toward the {{Span|target}} as per [[#look_at|look_at]]. Operations take place in global space.=== orthonormalize ===*  void '''orthonormalize ( )'''Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's [[Transform GD|Transform]].=== rotate ===*  void '''rotate''' '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''Rotates the local transformation around axis, a unit [[Vector3 GD|Vector3]], by specified angle in radians.=== rotate_object_local ===*  void '''rotate_object_local''' '''(''' [[Vector3 GD|Vector3]] axis, float angle ''')'''Rotates the local transformation around axis, a unit [[Vector3 GD|Vector3]], by specified angle in radians. The rotation axis is in object-local coordinate system.=== rotate_x ===*  void '''rotate_x''' '''(''' float angle ''')'''Rotates the local transformation around the X axis by angle in radians.=== rotate_y ===*  void '''rotate_y''' '''(''' float angle ''')'''Rotates the local transformation around the Y axis by angle in radians.=== rotate_z ===*  void '''rotate_z''' '''(''' float angle ''')'''Rotates the local transformation around the Z axis by angle in radians.=== scale_object_local ===*  void '''scale_object_local''' '''(''' [[Vector3 GD|Vector3]] scale ''')'''Scales the local transformation by given 3D scale factors in object-local coordinate system.=== set_as_toplevel ===*  void '''set_as_toplevel''' '''(''' bool enable ''')'''Makes the node ignore its parents transformations. Node transformations are only in global space.=== set_disable_scale ===*  void '''set_disable_scale''' '''(''' bool disable ''')'''Sets whether the node uses a scale of {{Span|(1, 1, 1)}} or its local transformation scale. Changes to the local transformation scale are preserved.=== set_identity ===*  void '''set_identity ( )'''Reset all transformations for this node (sets its [[Transform GD|Transform]] to the identity matrix).=== set_ignore_transform_notification ===*  void '''set_ignore_transform_notification''' '''(''' bool enabled ''')'''Sets whether the node ignores notification that its transformation (global or local) changed.=== set_notify_local_transform ===*  void '''set_notify_local_transform''' '''(''' bool enable ''')'''Sets whether the node notifies about its local transformation changes. {{Span|Spatial}} will not propagate this by default.=== set_notify_transform ===*  void '''set_notify_transform''' '''(''' bool enable ''')'''Sets whether the node notifies about its global and local transformation changes. {{Span|Spatial}} will not propagate this by default.=== show ===*  void '''show ( )'''Enables rendering of this node. Changes [[#visible|visible]] to {{Span|true}}.=== to_global ===*  [[Vector3 GD|Vector3]] '''to_global''' '''(''' [[Vector3 GD|Vector3]] local_point ''')''' constTransforms {{Span|local_point}} from this node's local space to world space.=== to_local ===*  [[Vector3 GD|Vector3]] '''to_local''' '''(''' [[Vector3 GD|Vector3]] global_point ''')''' constTransforms {{Span|global_point}} from world space to this node's local space.=== translate ===*  void '''translate''' '''(''' [[Vector3 GD|Vector3]] offset ''')'''Changes the node's position by the given offset [[Vector3 GD|Vector3]].Note that the translation {{Span|offset}} is affected by the node's scale, so if scaled by e.g. {{Span|(10, 1, 1)}}, a translation by an offset of {{Span|(2, 0, 0)}} would actually add 20 ({{Span|2 * 10}}) to the X coordinate.=== translate_object_local ===*  void '''translate_object_local''' '''(''' [[Vector3 GD|Vector3]] offset ''')'''Changes the node's position by the given offset [[Vector3 GD|Vector3]] in local space.=== update_gizmo ===*  void '''update_gizmo ( )'''Updates the [[SpatialGizmo GD|SpatialGizmo]] of this node.