__NOTOC__'''Inherits:''' [[Shader GD|Shader]] '''<''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]A custom shader program with a visual editor.== Description ==This class allows you to define a custom shader program that can be used for various materials to render objects.The visual shader editor creates the shader.== Properties =={| class="wikitable | [[String GD|String]]|| code|| {{Span|"shader_type spatial;void vertex() {// Output:0}void fragment() {// Output:0}void light() {// Output:0}"}} (parent override) |-| [[Vector2 GD|Vector2]]|| [[#graph_offset|graph_offset]]|| {{Span|Vector2( 0, 0 )}}                                                                                                 |-| [[String GD|String]]|| [[#version|version]]|| {{Span|""}}                                                                                                              |}== Methods =={| class="wikitable | void|| [[#add_node|add_node]] '''(''' [[#Type|Type]] type, [[VisualShaderNode GD|VisualShaderNode]] node, [[Vector2 GD|Vector2]] position, int id ''')'''                                   |-| bool|| [[#can_connect_nodes|can_connect_nodes]] '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')''' const   |-| [[@GlobalScope GD#Error|Error]]|| [[#connect_nodes|connect_nodes]] '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')'''                 |-| void|| [[#connect_nodes_forced|connect_nodes_forced]] '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')'''   |-| void|| [[#disconnect_nodes|disconnect_nodes]] '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')'''           |-| [[VisualShaderNode GD|VisualShaderNode]]|| [[#get_node|get_node]] '''(''' [[#Type|Type]] type, int id ''')''' const                                                                                                                           |-| [[Array GD|Array]]|| [[#get_node_connections|get_node_connections]] '''(''' [[#Type|Type]] type ''')''' const                                                                                                                             |-| [[PackedInt32Array GD|PackedInt32Array]]|| [[#get_node_list|get_node_list]] '''(''' [[#Type|Type]] type ''')''' const                                                                                                                                           |-| [[Vector2 GD|Vector2]]|| [[#get_node_position|get_node_position]] '''(''' [[#Type|Type]] type, int id ''')''' const                                                                                                         |-| int|| [[#get_valid_node_id|get_valid_node_id]] '''(''' [[#Type|Type]] type ''')''' const                                                                                                                                   |-| bool|| [[#is_node_connection|is_node_connection]] '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')''' const |-| void|| [[#remove_node|remove_node]] '''(''' [[#Type|Type]] type, int id ''')'''                                                                                                                           |-| void|| [[#set_mode|set_mode]] '''(''' [[#Mode|Mode]] mode ''')'''                                                                                                                                                                 |-| void|| [[#set_node_position|set_node_position]] '''(''' [[#Type|Type]] type, int id, [[Vector2 GD|Vector2]] position ''')'''                                                                       |}== Enumerations ===== Type ====== TYPE_VERTEX ====== TYPE_FRAGMENT ====== TYPE_LIGHT ====== TYPE_MAX ===enum '''Type''':*  '''TYPE_VERTEX''' = '''0'''  A vertex shader, operating on vertices.*  '''TYPE_FRAGMENT''' = '''1'''  A fragment shader, operating on fragments (pixels).*  '''TYPE_LIGHT''' = '''2'''  A shader for light calculations.*  '''TYPE_MAX''' = '''3'''  Represents the size of the [[#Type|Type]] enum.== Constants ===== NODE_ID_INVALID ====== NODE_ID_OUTPUT ===*  '''NODE_ID_INVALID''' = '''-1'''*  '''NODE_ID_OUTPUT''' = '''0'''== Property Descriptions ===== graph_offset ===*  [[Vector2 GD|Vector2]] '''graph_offset'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}     |-| ''Setter''|| set_graph_offset(value) |-| ''Getter''|| get_graph_offset()      |}The offset vector of the whole graph.=== version ===*  [[String GD|String]] '''version'''{| class="wikitable | ''Default''|| {{Span|""}}             |-| ''Setter''|| set_version(value) |-| ''Getter''|| get_version()      |}== Method Descriptions ===== add_node ===*  void '''add_node''' '''(''' [[#Type|Type]] type, [[VisualShaderNode GD|VisualShaderNode]] node, [[Vector2 GD|Vector2]] position, int id ''')'''Adds the specified node to the shader.=== can_connect_nodes ===*  bool '''can_connect_nodes''' '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')''' constReturns {{Span|true}} if the specified nodes and ports can be connected together.=== connect_nodes ===*  [[@GlobalScope GD#Error|Error]] '''connect_nodes''' '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')'''Connects the specified nodes and ports.=== connect_nodes_forced ===*  void '''connect_nodes_forced''' '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')'''Connects the specified nodes and ports, even if they can't be connected. Such connection is invalid and will not function properly.=== disconnect_nodes ===*  void '''disconnect_nodes''' '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')'''Connects the specified nodes and ports.=== get_node ===*  [[VisualShaderNode GD|VisualShaderNode]] '''get_node''' '''(''' [[#Type|Type]] type, int id ''')''' constReturns the shader node instance with specified {{Span|type}} and {{Span|id}}.=== get_node_connections ===*  [[Array GD|Array]] '''get_node_connections''' '''(''' [[#Type|Type]] type ''')''' constReturns the list of connected nodes with the specified type.=== get_node_list ===*  [[PackedInt32Array GD|PackedInt32Array]] '''get_node_list''' '''(''' [[#Type|Type]] type ''')''' constReturns the list of all nodes in the shader with the specified type.=== get_node_position ===*  [[Vector2 GD|Vector2]] '''get_node_position''' '''(''' [[#Type|Type]] type, int id ''')''' constReturns the position of the specified node within the shader graph.=== get_valid_node_id ===*  int '''get_valid_node_id''' '''(''' [[#Type|Type]] type ''')''' const=== is_node_connection ===*  bool '''is_node_connection''' '''(''' [[#Type|Type]] type, int from_node, int from_port, int to_node, int to_port ''')''' constReturns {{Span|true}} if the specified node and port connection exist.=== remove_node ===*  void '''remove_node''' '''(''' [[#Type|Type]] type, int id ''')'''Removes the specified node from the shader.=== set_mode ===*  void '''set_mode''' '''(''' [[#Mode|Mode]] mode ''')'''Sets the mode of this shader.=== set_node_position ===*  void '''set_node_position''' '''(''' [[#Type|Type]] type, int id, [[Vector2 GD|Vector2]] position ''')'''Sets the position of the specified node.