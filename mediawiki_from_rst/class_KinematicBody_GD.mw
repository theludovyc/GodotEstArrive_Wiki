__NOTOC__'''Inherits:''' [[PhysicsBody GD|PhysicsBody]] '''<''' [[CollisionObject GD|CollisionObject]] '''<''' [[Spatial GD|Spatial]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Kinematic body 3D node.== Description ==Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:'''Simulated motion:''' When these bodies are moved manually, either from code or from an [[AnimationPlayer GD|AnimationPlayer]] (with [[AnimationPlayer GD#playback_process_mode|AnimationPlayer.playback_process_mode()]] set to "physics"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).'''Kinematic characters:''' KinematicBody also has an API for moving objects (the [[#move_and_collide|move_and_collide]] and [[#move_and_slide|move_and_slide]] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.== Tutorials ==*  :doc:`../tutorials/physics/kinematic_character_2d`== Properties =={| class="wikitable | float|| [[#collision/safe_margin|collision/safe_margin]]|| {{Span|0.001}} |-| bool|| [[#move_lock_x|move_lock_x]]|| {{Span|false}} |-| bool|| [[#move_lock_y|move_lock_y]]|| {{Span|false}} |-| bool|| [[#move_lock_z|move_lock_z]]|| {{Span|false}} |}== Methods =={| class="wikitable | bool|| [[#get_axis_lock|get_axis_lock]] '''(''' [[#BodyAxis|BodyAxis]] axis ''')''' const                                                                                                                                                                                                                                                                                                    |-| [[Vector3 GD|Vector3]]|| [[#get_floor_normal|get_floor_normal]] '''(''' ''')''' const                                                                                                                                                                                                                                                                                                                                                |-| [[Vector3 GD|Vector3]]|| [[#get_floor_velocity|get_floor_velocity]] '''(''' ''')''' const                                                                                                                                                                                                                                                                                                                                            |-| [[KinematicCollision GD|KinematicCollision]]|| [[#get_slide_collision|get_slide_collision]] '''(''' int slide_idx ''')'''                                                                                                                                                                                                                                                                                                                |-| int|| [[#get_slide_count|get_slide_count]] '''(''' ''')''' const                                                                                                                                                                                                                                                                                                                                                  |-| bool|| [[#is_on_ceiling|is_on_ceiling]] '''(''' ''')''' const                                                                                                                                                                                                                                                                                                                                                      |-| bool|| [[#is_on_floor|is_on_floor]] '''(''' ''')''' const                                                                                                                                                                                                                                                                                                                                                          |-| bool|| [[#is_on_wall|is_on_wall]] '''(''' ''')''' const                                                                                                                                                                                                                                                                                                                                                            |-| [[KinematicCollision GD|KinematicCollision]]|| [[#move_and_collide|move_and_collide]] '''(''' [[Vector3 GD|Vector3]] rel_vec, bool infinite_inertia=true, bool exclude_raycast_shapes=true, bool test_only=false ''')'''                                                                                                                                                                   |-| [[Vector3 GD|Vector3]]|| [[#move_and_slide|move_and_slide]] '''(''' [[Vector3 GD|Vector3]] linear_velocity, [[Vector3 GD|Vector3]] up_direction=Vector3( 0, 0, 0 ), bool stop_on_slope=false, int max_slides=4, float floor_max_angle=0.785398, bool infinite_inertia=true ''')'''                                                         |-| [[Vector3 GD|Vector3]]|| [[#move_and_slide_with_snap|move_and_slide_with_snap]] '''(''' [[Vector3 GD|Vector3]] linear_velocity, [[Vector3 GD|Vector3]] snap, [[Vector3 GD|Vector3]] up_direction=Vector3( 0, 0, 0 ), bool stop_on_slope=false, int max_slides=4, float floor_max_angle=0.785398, bool infinite_inertia=true ''')''' |-| void|| [[#set_axis_lock|set_axis_lock]] '''(''' [[#BodyAxis|BodyAxis]] axis, bool lock ''')'''                                                                                                                                                                                                                                                                            |-| bool|| [[#test_move|test_move]] '''(''' [[Transform GD|Transform]] from, [[Vector3 GD|Vector3]] rel_vec, bool infinite_inertia=true ''')'''                                                                                                                                                                                                                                       |}== Property Descriptions ===== collision/safe_margin ===*  float '''collision/safe_margin'''{| class="wikitable | ''Default''|| {{Span|0.001}}              |-| ''Setter''|| set_safe_margin(value) |-| ''Getter''|| get_safe_margin()      |}If the body is at least this close to another body, this body will consider them to be colliding.=== move_lock_x ===*  bool '''move_lock_x'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| set_axis_lock(value) |-| ''Getter''|| get_axis_lock()      |}Lock the body's X axis movement.=== move_lock_y ===*  bool '''move_lock_y'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| set_axis_lock(value) |-| ''Getter''|| get_axis_lock()      |}Lock the body's Y axis movement.=== move_lock_z ===*  bool '''move_lock_z'''{| class="wikitable | ''Default''|| {{Span|false}}            |-| ''Setter''|| set_axis_lock(value) |-| ''Getter''|| get_axis_lock()      |}Lock the body's Z axis movement.== Method Descriptions ===== get_axis_lock ===*  bool '''get_axis_lock''' '''(''' [[#BodyAxis|BodyAxis]] axis ''')''' constReturns {{Span|true}} if the specified {{Span|axis}} is locked. See also [[#move_lock_x|move_lock_x]], [[#move_lock_y|move_lock_y]] and [[#move_lock_z|move_lock_z]].=== get_floor_normal ===*  [[Vector3 GD|Vector3]] '''get_floor_normal ( )''' constReturns the surface normal of the floor at the last collision point. Only valid after calling [[#move_and_slide|move_and_slide]] or [[#move_and_slide_with_snap|move_and_slide_with_snap]] and when [[#is_on_floor|is_on_floor]] returns {{Span|true}}.=== get_floor_velocity ===*  [[Vector3 GD|Vector3]] '''get_floor_velocity ( )''' constReturns the linear velocity of the floor at the last collision point. Only valid after calling [[#move_and_slide|move_and_slide]] or [[#move_and_slide_with_snap|move_and_slide_with_snap]] and when [[#is_on_floor|is_on_floor]] returns {{Span|true}}.=== get_slide_collision ===*  [[KinematicCollision GD|KinematicCollision]] '''get_slide_collision''' '''(''' int slide_idx ''')'''Returns a [[KinematicCollision GD|KinematicCollision]], which contains information about a collision that occurred during the last [[#move_and_slide|move_and_slide]] call. Since the body can collide several times in a single call to [[#move_and_slide|move_and_slide]], you must specify the index of the collision in the range 0 to ([[#get_slide_count|get_slide_count]] - 1).=== get_slide_count ===*  int '''get_slide_count ( )''' constReturns the number of times the body collided and changed direction during the last call to [[#move_and_slide|move_and_slide]].=== is_on_ceiling ===*  bool '''is_on_ceiling ( )''' constReturns {{Span|true}} if the body is on the ceiling. Only updates when calling [[#move_and_slide|move_and_slide]].=== is_on_floor ===*  bool '''is_on_floor ( )''' constReturns {{Span|true}} if the body is on the floor. Only updates when calling [[#move_and_slide|move_and_slide]].=== is_on_wall ===*  bool '''is_on_wall ( )''' constReturns {{Span|true}} if the body is on a wall. Only updates when calling [[#move_and_slide|move_and_slide]].=== move_and_collide ===*  [[KinematicCollision GD|KinematicCollision]] '''move_and_collide''' '''(''' [[Vector3 GD|Vector3]] rel_vec, bool infinite_inertia=true, bool exclude_raycast_shapes=true, bool test_only=false ''')'''Moves the body along the vector {{Span|rel_vec}}. The body will stop if it collides. Returns a [[KinematicCollision GD|KinematicCollision]], which contains information about the collision.If {{Span|test_only}} is {{Span|true}}, the body does not move but the would-be collision information is given.=== move_and_slide ===*  [[Vector3 GD|Vector3]] '''move_and_slide''' '''(''' [[Vector3 GD|Vector3]] linear_velocity, [[Vector3 GD|Vector3]] up_direction=Vector3( 0, 0, 0 ), bool stop_on_slope=false, int max_slides=4, float floor_max_angle=0.785398, bool infinite_inertia=true ''')'''Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a {{Span|KinematicBody}} or [[RigidBody GD|RigidBody]], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.This method should be used in [[Node GD#_physics_process|_physics_process]] (or in a method called by [[Node GD#_physics_process|_physics_process]]), as it uses the physics step's {{Span|delta}} value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.{{Span|linear_velocity}} is the velocity vector (typically meters per second). Unlike in [[#move_and_collide|move_and_collide]], you should ''not'' multiply it by {{Span|delta}} — the physics engine handles applying the velocity. {{Span|up_direction}} is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of {{Span|Vector3(0, 0, 0)}}, everything is considered a wall.If {{Span|stop_on_slope}} is {{Span|true}}, body will not slide on slopes if you include gravity in {{Span|linear_velocity}}.If the body collides, it will change direction a maximum of {{Span|max_slides}} times before it stops.{{Span|floor_max_angle}} is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.If {{Span|infinite_inertia}} is {{Span|true}}, body will be able to push [[RigidBody GD|RigidBody]] nodes, but it won't also detect any collisions with them. If {{Span|false}}, it will interact with [[RigidBody GD|RigidBody]] nodes like with [[StaticBody GD|StaticBody]].Returns the {{Span|linear_velocity}} vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use [[#get_slide_collision|get_slide_collision]].=== move_and_slide_with_snap ===*  [[Vector3 GD|Vector3]] '''move_and_slide_with_snap''' '''(''' [[Vector3 GD|Vector3]] linear_velocity, [[Vector3 GD|Vector3]] snap, [[Vector3 GD|Vector3]] up_direction=Vector3( 0, 0, 0 ), bool stop_on_slope=false, int max_slides=4, float floor_max_angle=0.785398, bool infinite_inertia=true ''')'''Moves the body while keeping it attached to slopes. Similar to [[#move_and_slide|move_and_slide]].As long as the {{Span|snap}} vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting {{Span|snap}} to {{Span|(0, 0, 0)}} or by using [[#move_and_slide|move_and_slide]] instead.=== set_axis_lock ===*  void '''set_axis_lock''' '''(''' [[#BodyAxis|BodyAxis]] axis, bool lock ''')'''Locks or unlocks the specified {{Span|axis}} depending on the value of {{Span|lock}}. See also [[#move_lock_x|move_lock_x]], [[#move_lock_y|move_lock_y]] and [[#move_lock_z|move_lock_z]].=== test_move ===*  bool '''test_move''' '''(''' [[Transform GD|Transform]] from, [[Vector3 GD|Vector3]] rel_vec, bool infinite_inertia=true ''')'''Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [[Transform GD|Transform]], then tries to move the body along the vector {{Span|rel_vec}}. Returns {{Span|true}} if a collision would occur.