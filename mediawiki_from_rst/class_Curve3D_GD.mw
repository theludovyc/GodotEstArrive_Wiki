__NOTOC__'''Inherits:''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Describes a Bézier curve in 3D space.== Description ==This class describes a Bézier curve in 3D space. It is mainly used to give a shape to a [[Path GD|Path]], but can be manually sampled for other purposes.It keeps a cache of precalculated points along the curve, to speed up further calculations.== Properties =={| class="wikitable | float|| [[#bake_interval|bake_interval]]|| {{Span|0.2}}  |-| bool|| [[#up_vector_enabled|up_vector_enabled]]|| {{Span|true}} |}== Methods =={| class="wikitable | void|| [[#add_point|add_point]] '''(''' [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] in=Vector3( 0, 0, 0 ), [[Vector3 GD|Vector3]] out=Vector3( 0, 0, 0 ), int at_position=-1 ''')''' |-| void|| [[#clear_points|clear_points]] '''(''' ''')'''                                                                                                                                                                                   |-| float|| [[#get_baked_length|get_baked_length]] '''(''' ''')''' const                                                                                                                                                                     |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#get_baked_points|get_baked_points]] '''(''' ''')''' const                                                                                                                                                                     |-| [[PackedFloat32Array GD|PackedFloat32Array]]|| [[#get_baked_tilts|get_baked_tilts]] '''(''' ''')''' const                                                                                                                                                                       |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#get_baked_up_vectors|get_baked_up_vectors]] '''(''' ''')''' const                                                                                                                                                             |-| float|| [[#get_closest_offset|get_closest_offset]] '''(''' [[Vector3 GD|Vector3]] to_point ''')''' const                                                                                                                          |-| [[Vector3 GD|Vector3]]|| [[#get_closest_point|get_closest_point]] '''(''' [[Vector3 GD|Vector3]] to_point ''')''' const                                                                                                                            |-| int|| [[#get_point_count|get_point_count]] '''(''' ''')''' const                                                                                                                                                                       |-| [[Vector3 GD|Vector3]]|| [[#get_point_in|get_point_in]] '''(''' int idx ''')''' const                                                                                                                                                   |-| [[Vector3 GD|Vector3]]|| [[#get_point_out|get_point_out]] '''(''' int idx ''')''' const                                                                                                                                                 |-| [[Vector3 GD|Vector3]]|| [[#get_point_position|get_point_position]] '''(''' int idx ''')''' const                                                                                                                                       |-| float|| [[#get_point_tilt|get_point_tilt]] '''(''' int idx ''')''' const                                                                                                                                               |-| [[Vector3 GD|Vector3]]|| [[#interpolate|interpolate]] '''(''' int idx, float t ''')''' const                                                                                                                        |-| [[Vector3 GD|Vector3]]|| [[#interpolate_baked|interpolate_baked]] '''(''' float offset, bool cubic=false ''')''' const                                                                                             |-| [[Vector3 GD|Vector3]]|| [[#interpolate_baked_up_vector|interpolate_baked_up_vector]] '''(''' float offset, bool apply_tilt=false ''')''' const                                                                    |-| [[Vector3 GD|Vector3]]|| [[#interpolatef|interpolatef]] '''(''' float fofs ''')''' const                                                                                                                                              |-| void|| [[#remove_point|remove_point]] '''(''' int idx ''')'''                                                                                                                                                         |-| void|| [[#set_point_in|set_point_in]] '''(''' int idx, [[Vector3 GD|Vector3]] position ''')'''                                                                                                                 |-| void|| [[#set_point_out|set_point_out]] '''(''' int idx, [[Vector3 GD|Vector3]] position ''')'''                                                                                                               |-| void|| [[#set_point_position|set_point_position]] '''(''' int idx, [[Vector3 GD|Vector3]] position ''')'''                                                                                                     |-| void|| [[#set_point_tilt|set_point_tilt]] '''(''' int idx, float tilt ''')'''                                                                                                                     |-| [[PackedVector3Array GD|PackedVector3Array]]|| [[#tessellate|tessellate]] '''(''' int max_stages=5, float tolerance_degrees=4 ''')''' const                                                                                               |}== Property Descriptions ===== bake_interval ===*  float '''bake_interval'''{| class="wikitable | ''Default''|| {{Span|0.2}}                  |-| ''Setter''|| set_bake_interval(value) |-| ''Getter''|| get_bake_interval()      |}The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [[#get_baked_points|get_baked_points]] or [[#get_baked_length|get_baked_length]] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.=== up_vector_enabled ===*  bool '''up_vector_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                     |-| ''Setter''|| set_up_vector_enabled(value) |-| ''Getter''|| is_up_vector_enabled()       |}If {{Span|true}}, the curve will bake up vectors used for orientation. This is used when [[PathFollow GD#rotation_mode|PathFollow.rotation_mode()]] is set to [[PathFollow GD#ROTATION_ORIENTED|PathFollow.ROTATION_ORIENTED()]]. Changing it forces the cache to be recomputed.== Method Descriptions ===== add_point ===*  void '''add_point''' '''(''' [[Vector3 GD|Vector3]] position, [[Vector3 GD|Vector3]] in=Vector3( 0, 0, 0 ), [[Vector3 GD|Vector3]] out=Vector3( 0, 0, 0 ), int at_position=-1 ''')'''Adds a point to a curve at {{Span|position}}, with control points {{Span|in}} and {{Span|out}}.If {{Span|at_position}} is given, the point is inserted before the point number {{Span|at_position}}, moving that point (and every point after) after the inserted point. If {{Span|at_position}} is not given, or is an illegal value ({{Span|at_position <0}} or {{Span|at_position >= [method get_point_count]}}), the point will be appended at the end of the point list.=== clear_points ===*  void '''clear_points ( )'''Removes all points from the curve.=== get_baked_length ===*  float '''get_baked_length ( )''' constReturns the total length of the curve, based on the cached points. Given enough density (see [[#bake_interval|bake_interval]]), it should be approximate enough.=== get_baked_points ===*  [[PackedVector3Array GD|PackedVector3Array]] '''get_baked_points ( )''' constReturns the cache of points as a [[PackedVector3Array GD|PackedVector3Array]].=== get_baked_tilts ===*  [[PackedFloat32Array GD|PackedFloat32Array]] '''get_baked_tilts ( )''' constReturns the cache of tilts as a [[PackedFloat32Array GD|PackedFloat32Array]].=== get_baked_up_vectors ===*  [[PackedVector3Array GD|PackedVector3Array]] '''get_baked_up_vectors ( )''' constReturns the cache of up vectors as a [[PackedVector3Array GD|PackedVector3Array]].If [[#up_vector_enabled|up_vector_enabled]] is {{Span|false}}, the cache will be empty.=== get_closest_offset ===*  float '''get_closest_offset''' '''(''' [[Vector3 GD|Vector3]] to_point ''')''' constReturns the closest offset to {{Span|to_point}}. This offset is meant to be used in [[#interpolate_baked|interpolate_baked]] or [[#interpolate_baked_up_vector|interpolate_baked_up_vector]].{{Span|to_point}} must be in this curve's local space.=== get_closest_point ===*  [[Vector3 GD|Vector3]] '''get_closest_point''' '''(''' [[Vector3 GD|Vector3]] to_point ''')''' constReturns the closest point (in curve's local space) to {{Span|to_point}}.{{Span|to_point}} must be in this curve's local space.=== get_point_count ===*  int '''get_point_count ( )''' constReturns the number of points describing the curve.=== get_point_in ===*  [[Vector3 GD|Vector3]] '''get_point_in''' '''(''' int idx ''')''' constReturns the position of the control point leading to the vertex {{Span|idx}}. If the index is out of bounds, the function sends an error to the console, and returns {{Span|(0, 0, 0)}}.=== get_point_out ===*  [[Vector3 GD|Vector3]] '''get_point_out''' '''(''' int idx ''')''' constReturns the position of the control point leading out of the vertex {{Span|idx}}. If the index is out of bounds, the function sends an error to the console, and returns {{Span|(0, 0, 0)}}.=== get_point_position ===*  [[Vector3 GD|Vector3]] '''get_point_position''' '''(''' int idx ''')''' constReturns the position of the vertex {{Span|idx}}. If the index is out of bounds, the function sends an error to the console, and returns {{Span|(0, 0, 0)}}.=== get_point_tilt ===*  float '''get_point_tilt''' '''(''' int idx ''')''' constReturns the tilt angle in radians for the point {{Span|idx}}. If the index is out of bounds, the function sends an error to the console, and returns {{Span|0}}.=== interpolate ===*  [[Vector3 GD|Vector3]] '''interpolate''' '''(''' int idx, float t ''')''' constReturns the position between the vertex {{Span|idx}} and the vertex {{Span|idx + 1}}, where {{Span|t}} controls if the point is the first vertex ({{Span|t = 0.0}}), the last vertex ({{Span|t = 1.0}}), or in between. Values of {{Span|t}} outside the range ({{Span|0.0 >= t <=1}}) give strange, but predictable results.If {{Span|idx}} is out of bounds it is truncated to the first or last vertex, and {{Span|t}} is ignored. If the curve has no points, the function sends an error to the console, and returns {{Span|(0, 0, 0)}}.=== interpolate_baked ===*  [[Vector3 GD|Vector3]] '''interpolate_baked''' '''(''' float offset, bool cubic=false ''')''' constReturns a point within the curve at position {{Span|offset}}, where {{Span|offset}} is measured as a pixel distance along the curve.To do that, it finds the two cached points where the {{Span|offset}} lies between, then interpolates the values. This interpolation is cubic if {{Span|cubic}} is set to {{Span|true}}, or linear if set to {{Span|false}}.Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).=== interpolate_baked_up_vector ===*  [[Vector3 GD|Vector3]] '''interpolate_baked_up_vector''' '''(''' float offset, bool apply_tilt=false ''')''' constReturns an up vector within the curve at position {{Span|offset}}, where {{Span|offset}} is measured as a distance in 3D units along the curve.To do that, it finds the two cached up vectors where the {{Span|offset}} lies between, then interpolates the values. If {{Span|apply_tilt}} is {{Span|true}}, an interpolated tilt is applied to the interpolated up vector.If the curve has no up vectors, the function sends an error to the console, and returns {{Span|(0, 1, 0)}}.=== interpolatef ===*  [[Vector3 GD|Vector3]] '''interpolatef''' '''(''' float fofs ''')''' constReturns the position at the vertex {{Span|fofs}}. It calls [[#interpolate|interpolate]] using the integer part of {{Span|fofs}} as {{Span|idx}}, and its fractional part as {{Span|t}}.=== remove_point ===*  void '''remove_point''' '''(''' int idx ''')'''Deletes the point {{Span|idx}} from the curve. Sends an error to the console if {{Span|idx}} is out of bounds.=== set_point_in ===*  void '''set_point_in''' '''(''' int idx, [[Vector3 GD|Vector3]] position ''')'''Sets the position of the control point leading to the vertex {{Span|idx}}. If the index is out of bounds, the function sends an error to the console.=== set_point_out ===*  void '''set_point_out''' '''(''' int idx, [[Vector3 GD|Vector3]] position ''')'''Sets the position of the control point leading out of the vertex {{Span|idx}}. If the index is out of bounds, the function sends an error to the console.=== set_point_position ===*  void '''set_point_position''' '''(''' int idx, [[Vector3 GD|Vector3]] position ''')'''Sets the position for the vertex {{Span|idx}}. If the index is out of bounds, the function sends an error to the console.=== set_point_tilt ===*  void '''set_point_tilt''' '''(''' int idx, float tilt ''')'''Sets the tilt angle in radians for the point {{Span|idx}}. If the index is out of bounds, the function sends an error to the console.The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [[PathFollow GD|PathFollow]], this tilt is an offset over the natural tilt the [[PathFollow GD|PathFollow]] calculates.=== tessellate ===*  [[PackedVector3Array GD|PackedVector3Array]] '''tessellate''' '''(''' int max_stages=5, float tolerance_degrees=4 ''')''' constReturns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.{{Span|max_stages}} controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!{{Span|tolerance_degrees}} controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.