__NOTOC__'''Inherits:''' [[ResourceImporter GD|ResourceImporter]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.== Description ==EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [[EditorPlugin GD|EditorPlugin]] with [[EditorPlugin GD#add_import_plugin|EditorPlugin.add_import_plugin()]].EditorImportPlugins work by associating with specific file extensions and a resource type. See [[#get_recognized_extensions|get_recognized_extensions]] and [[#get_resource_type|get_resource_type]]. They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the {{Span|.import}} directory.Below is an example EditorImportPlugin that imports a [[Mesh GD|Mesh]] from a file with the extension ".special" or ".spec":::    tool    extends EditorImportPlugin        func get_importer_name():        return "my.special.plugin"        func get_visible_name():        return "Special Mesh Importer"        func get_recognized_extensions():        return ["special", "spec"]        func get_save_extension():        return "mesh"        func get_resource_type():        return "Mesh"        func get_preset_count():        return 1        func get_preset_name(i):        return "Default"        func get_import_options(i):        return [{"name": "my_option", "default_value": false}]        func import(source_file, save_path, options, platform_variants, gen_files):        var file = File.new()        if file.open(source_file, File.READ) != OK:            return FAILED            var mesh = Mesh.new()        # Fill the Mesh with data read in "file", left as an exercise to the reader            var filename = save_path + "." + get_save_extension()        ResourceSaver.save(filename, mesh)        return OK== Tutorials ==*  :doc:`../tutorials/plugins/editor/import_plugins`== Methods =={| class="wikitable | [[Array GD|Array]]|| [[#get_import_options|get_import_options]] '''(''' int preset ''')''' virtual                                                                                                                                                          |-| int|| [[#get_import_order|get_import_order]] '''(''' ''')''' virtual                                                                                                                                                                                           |-| [[String GD|String]]|| [[#get_importer_name|get_importer_name]] '''(''' ''')''' virtual                                                                                                                                                                                         |-| bool|| [[#get_option_visibility|get_option_visibility]] '''(''' [[String GD|String]] option, [[Dictionary GD|Dictionary]] options ''')''' virtual                                                                                                 |-| int|| [[#get_preset_count|get_preset_count]] '''(''' ''')''' virtual                                                                                                                                                                                           |-| [[String GD|String]]|| [[#get_preset_name|get_preset_name]] '''(''' int preset ''')''' virtual                                                                                                                                                                |-| float|| [[#get_priority|get_priority]] '''(''' ''')''' virtual                                                                                                                                                                                                   |-| [[Array GD|Array]]|| [[#get_recognized_extensions|get_recognized_extensions]] '''(''' ''')''' virtual                                                                                                                                                                         |-| [[String GD|String]]|| [[#get_resource_type|get_resource_type]] '''(''' ''')''' virtual                                                                                                                                                                                         |-| [[String GD|String]]|| [[#get_save_extension|get_save_extension]] '''(''' ''')''' virtual                                                                                                                                                                                       |-| [[String GD|String]]|| [[#get_visible_name|get_visible_name]] '''(''' ''')''' virtual                                                                                                                                                                                           |-| int|| [[#import|import]] '''(''' [[String GD|String]] source_file, [[String GD|String]] save_path, [[Dictionary GD|Dictionary]] options, [[Array GD|Array]] platform_variants, [[Array GD|Array]] gen_files ''')''' virtual |}== Method Descriptions ===== get_import_options ===*  [[Array GD|Array]] '''get_import_options''' '''(''' int preset ''')''' virtualGets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: {{Span|name}}, {{Span|default_value}}, {{Span|property_hint}} (optional), {{Span|hint_string}} (optional), {{Span|usage}} (optional).=== get_import_order ===*  int '''get_import_order ( )''' virtualGets the order of this importer to be run when importing resources. Higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported.=== get_importer_name ===*  [[String GD|String]] '''get_importer_name ( )''' virtualGets the unique name of the importer.=== get_option_visibility ===*  bool '''get_option_visibility''' '''(''' [[String GD|String]] option, [[Dictionary GD|Dictionary]] options ''')''' virtual=== get_preset_count ===*  int '''get_preset_count ( )''' virtualGets the number of initial presets defined by the plugin. Use [[#get_import_options|get_import_options]] to get the default options for the preset and [[#get_preset_name|get_preset_name]] to get the name of the preset.=== get_preset_name ===*  [[String GD|String]] '''get_preset_name''' '''(''' int preset ''')''' virtualGets the name of the options preset at this index.=== get_priority ===*  float '''get_priority ( )''' virtualGets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is {{Span|1.0}}.=== get_recognized_extensions ===*  [[Array GD|Array]] '''get_recognized_extensions ( )''' virtualGets the list of file extensions to associate with this loader (case-insensitive). e.g. {{Span|["obj"]}}.=== get_resource_type ===*  [[String GD|String]] '''get_resource_type ( )''' virtualGets the Godot resource type associated with this loader. e.g. {{Span|"Mesh"}} or {{Span|"Animation"}}.=== get_save_extension ===*  [[String GD|String]] '''get_save_extension ( )''' virtualGets the extension used to save this resource in the {{Span|.import}} directory.=== get_visible_name ===*  [[String GD|String]] '''get_visible_name ( )''' virtualGets the name to display in the import window.=== import ===*  int '''import''' '''(''' [[String GD|String]] source_file, [[String GD|String]] save_path, [[Dictionary GD|Dictionary]] options, [[Array GD|Array]] platform_variants, [[Array GD|Array]] gen_files ''')''' virtual