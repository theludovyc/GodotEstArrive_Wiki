__NOTOC__'''Inherits:''' [[Node2D GD|Node2D]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Node for 2D tile-based maps.== Description ==Node for 2D tile-based maps. Tilemaps use a [[TileSet GD|TileSet]] which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.== Tutorials ==*  :doc:`../tutorials/2d/using_tilemaps`== Properties =={| class="wikitable | bool|| [[#cell_clip_uv|cell_clip_uv]]|| {{Span|false}}                             |-| [[Transform2D GD|Transform2D]]|| [[#cell_custom_transform|cell_custom_transform]]|| {{Span|Transform2D( 64, 0, 0, 64, 0, 0 )}} |-| [[#HalfOffset|HalfOffset]]|| [[#cell_half_offset|cell_half_offset]]|| {{Span|2}}                                 |-| int|| [[#cell_quadrant_size|cell_quadrant_size]]|| {{Span|16}}                                |-| [[Vector2 GD|Vector2]]|| [[#cell_size|cell_size]]|| {{Span|Vector2( 64, 64 )}}                 |-| [[#TileOrigin|TileOrigin]]|| [[#cell_tile_origin|cell_tile_origin]]|| {{Span|0}}                                 |-| bool|| [[#cell_y_sort|cell_y_sort]]|| {{Span|false}}                             |-| bool|| [[#centered_textures|centered_textures]]|| {{Span|false}}                             |-| float|| [[#collision_bounce|collision_bounce]]|| {{Span|0.0}}                               |-| float|| [[#collision_friction|collision_friction]]|| {{Span|1.0}}                               |-| int|| [[#collision_layer|collision_layer]]|| {{Span|1}}                                 |-| int|| [[#collision_mask|collision_mask]]|| {{Span|1}}                                 |-| bool|| [[#collision_use_kinematic|collision_use_kinematic]]|| {{Span|false}}                             |-| bool|| [[#collision_use_parent|collision_use_parent]]|| {{Span|false}}                             |-| bool|| [[#compatibility_mode|compatibility_mode]]|| {{Span|false}}                             |-| [[#Mode|Mode]]|| [[#mode|mode]]|| {{Span|0}}                                 |-| int|| [[#occluder_light_mask|occluder_light_mask]]|| {{Span|1}}                                 |-| [[TileSet GD|TileSet]]|| [[#tile_set|tile_set]]||                                       |}== Methods =={| class="wikitable | void|| [[#clear|clear]] '''(''' ''')'''                                                                                                                                                                                                                                                                       |-| void|| [[#fix_invalid_tiles|fix_invalid_tiles]] '''(''' ''')'''                                                                                                                                                                                                                                               |-| int|| [[#get_cell|get_cell]] '''(''' int x, int y ''')''' const                                                                                                                                                                                                          |-| [[Vector2 GD|Vector2]]|| [[#get_cell_autotile_coord|get_cell_autotile_coord]] '''(''' int x, int y ''')''' const                                                                                                                                                                            |-| int|| [[#get_cellv|get_cellv]] '''(''' [[Vector2 GD|Vector2]] position ''')''' const                                                                                                                                                                                                                  |-| bool|| [[#get_collision_layer_bit|get_collision_layer_bit]] '''(''' int bit ''')''' const                                                                                                                                                                                                   |-| bool|| [[#get_collision_mask_bit|get_collision_mask_bit]] '''(''' int bit ''')''' const                                                                                                                                                                                                     |-| [[Array GD|Array]]|| [[#get_used_cells|get_used_cells]] '''(''' ''')''' const                                                                                                                                                                                                                                               |-| [[Array GD|Array]]|| [[#get_used_cells_by_id|get_used_cells_by_id]] '''(''' int id ''')''' const                                                                                                                                                                                                          |-| [[Rect2 GD|Rect2]]|| [[#get_used_rect|get_used_rect]] '''(''' ''')'''                                                                                                                                                                                                                                                       |-| bool|| [[#is_cell_transposed|is_cell_transposed]] '''(''' int x, int y ''')''' const                                                                                                                                                                                      |-| bool|| [[#is_cell_x_flipped|is_cell_x_flipped]] '''(''' int x, int y ''')''' const                                                                                                                                                                                        |-| bool|| [[#is_cell_y_flipped|is_cell_y_flipped]] '''(''' int x, int y ''')''' const                                                                                                                                                                                        |-| [[Vector2 GD|Vector2]]|| [[#map_to_world|map_to_world]] '''(''' [[Vector2 GD|Vector2]] map_position, bool ignore_half_ofs=false ''')''' const                                                                                                                                                         |-| void|| [[#set_cell|set_cell]] '''(''' int x, int y, int tile, bool flip_x=false, bool flip_y=false, bool transpose=false, [[Vector2 GD|Vector2]] autotile_coord=Vector2( 0, 0 ) ''')''' |-| void|| [[#set_cellv|set_cellv]] '''(''' [[Vector2 GD|Vector2]] position, int tile, bool flip_x=false, bool flip_y=false, bool transpose=false ''')'''                                                                       |-| void|| [[#set_collision_layer_bit|set_collision_layer_bit]] '''(''' int bit, bool value ''')'''                                                                                                                                                                          |-| void|| [[#set_collision_mask_bit|set_collision_mask_bit]] '''(''' int bit, bool value ''')'''                                                                                                                                                                            |-| void|| [[#update_bitmask_area|update_bitmask_area]] '''(''' [[Vector2 GD|Vector2]] position ''')'''                                                                                                                                                                                                    |-| void|| [[#update_bitmask_region|update_bitmask_region]] '''(''' [[Vector2 GD|Vector2]] start=Vector2( 0, 0 ), [[Vector2 GD|Vector2]] end=Vector2( 0, 0 ) ''')'''                                                                                                                                |-| void|| [[#update_dirty_quadrants|update_dirty_quadrants]] '''(''' ''')'''                                                                                                                                                                                                                                     |-| [[Vector2 GD|Vector2]]|| [[#world_to_map|world_to_map]] '''(''' [[Vector2 GD|Vector2]] world_position ''')''' const                                                                                                                                                                                                      |}== Signals ===== settings_changed ===*  '''settings_changed ( )'''Emitted when a tilemap setting has changed.== Enumerations ===== Mode ====== MODE_SQUARE ====== MODE_ISOMETRIC ====== MODE_CUSTOM ===enum '''Mode''':*  '''MODE_SQUARE''' = '''0'''  Orthogonal orientation mode.*  '''MODE_ISOMETRIC''' = '''1'''  Isometric orientation mode.*  '''MODE_CUSTOM''' = '''2'''  Custom orientation mode.=== HalfOffset ====== HALF_OFFSET_X ====== HALF_OFFSET_Y ====== HALF_OFFSET_DISABLED ====== HALF_OFFSET_NEGATIVE_X ====== HALF_OFFSET_NEGATIVE_Y ===enum '''HalfOffset''':*  '''HALF_OFFSET_X''' = '''0'''  Half offset on the X coordinate.*  '''HALF_OFFSET_Y''' = '''1'''  Half offset on the Y coordinate.*  '''HALF_OFFSET_DISABLED''' = '''2'''  Half offset disabled.*  '''HALF_OFFSET_NEGATIVE_X''' = '''3'''  Half offset on the X coordinate (negative).*  '''HALF_OFFSET_NEGATIVE_Y''' = '''4'''  Half offset on the Y coordinate (negative).=== TileOrigin ====== TILE_ORIGIN_TOP_LEFT ====== TILE_ORIGIN_CENTER ====== TILE_ORIGIN_BOTTOM_LEFT ===enum '''TileOrigin''':*  '''TILE_ORIGIN_TOP_LEFT''' = '''0'''  Tile origin at its top-left corner.*  '''TILE_ORIGIN_CENTER''' = '''1'''  Tile origin at its center.*  '''TILE_ORIGIN_BOTTOM_LEFT''' = '''2'''  Tile origin at its bottom-left corner.== Constants ===== INVALID_CELL ===*  '''INVALID_CELL''' = '''-1'''  Returned when a cell doesn't exist.== Property Descriptions ===== cell_clip_uv ===*  bool '''cell_clip_uv'''{| class="wikitable | ''Default''|| {{Span|false}}          |-| ''Setter''|| set_clip_uv(value) |-| ''Getter''|| get_clip_uv()      |}If {{Span|true}}, the cell's UVs will be clipped.=== cell_custom_transform ===*  [[Transform2D GD|Transform2D]] '''cell_custom_transform'''{| class="wikitable | ''Default''|| {{Span|Transform2D( 64, 0, 0, 64, 0, 0 )}} |-| ''Setter''|| set_custom_transform(value)           |-| ''Getter''|| get_custom_transform()                |}The custom [[Transform2D GD|Transform2D]] to be applied to the TileMap's cells.=== cell_half_offset ===*  [[#HalfOffset|HalfOffset]] '''cell_half_offset'''{| class="wikitable | ''Default''|| {{Span|2}}                  |-| ''Setter''|| set_half_offset(value) |-| ''Getter''|| get_half_offset()      |}Amount to offset alternating tiles. See [[#HalfOffset|HalfOffset]] for possible values.=== cell_quadrant_size ===*  int '''cell_quadrant_size'''{| class="wikitable | ''Default''|| {{Span|16}}                   |-| ''Setter''|| set_quadrant_size(value) |-| ''Getter''|| get_quadrant_size()      |}The TileMap's quadrant size. Optimizes drawing by batching, using chunks of this size.=== cell_size ===*  [[Vector2 GD|Vector2]] '''cell_size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 64, 64 )}} |-| ''Setter''|| set_cell_size(value)  |-| ''Getter''|| get_cell_size()       |}The TileMap's cell size.=== cell_tile_origin ===*  [[#TileOrigin|TileOrigin]] '''cell_tile_origin'''{| class="wikitable | ''Default''|| {{Span|0}}                  |-| ''Setter''|| set_tile_origin(value) |-| ''Getter''|| get_tile_origin()      |}Position for tile origin. See [[#TileOrigin|TileOrigin]] for possible values.=== cell_y_sort ===*  bool '''cell_y_sort'''{| class="wikitable | ''Default''|| {{Span|false}}                |-| ''Setter''|| set_y_sort_mode(value)   |-| ''Getter''|| is_y_sort_mode_enabled() |}If {{Span|true}}, the TileMap's children will be drawn in order of their Y coordinate.=== centered_textures ===*  bool '''centered_textures'''{| class="wikitable | ''Default''|| {{Span|false}}                      |-| ''Setter''|| set_centered_textures(value)   |-| ''Getter''|| is_centered_textures_enabled() |}If {{Span|true}}, the textures will be centered in the middle of each tile. This is useful for certain isometric or top-down modes when textures are made larger or smaller than the tiles (e.g. to avoid flickering on tile edges). The offset is still applied, but from the center of the tile. If used, [[#compatibility_mode|compatibility_mode]] is ignored.If {{Span|false}}, the texture position start in the top-left corner unless [[#compatibility_mode|compatibility_mode]] is enabled.=== collision_bounce ===*  float '''collision_bounce'''{| class="wikitable | ''Default''|| {{Span|0.0}}                     |-| ''Setter''|| set_collision_bounce(value) |-| ''Getter''|| get_collision_bounce()      |}Bounce value for static body collisions (see {{Span|collision_use_kinematic}}).=== collision_friction ===*  float '''collision_friction'''{| class="wikitable | ''Default''|| {{Span|1.0}}                       |-| ''Setter''|| set_collision_friction(value) |-| ''Getter''|| get_collision_friction()      |}Friction value for static body collisions (see {{Span|collision_use_kinematic}}).=== collision_layer ===*  int '''collision_layer'''{| class="wikitable | ''Default''|| {{Span|1}}                      |-| ''Setter''|| set_collision_layer(value) |-| ''Getter''|| get_collision_layer()      |}The collision layer(s) for all colliders in the TileMap.=== collision_mask ===*  int '''collision_mask'''{| class="wikitable | ''Default''|| {{Span|1}}                     |-| ''Setter''|| set_collision_mask(value) |-| ''Getter''|| get_collision_mask()      |}The collision mask(s) for all colliders in the TileMap.=== collision_use_kinematic ===*  bool '''collision_use_kinematic'''{| class="wikitable | ''Default''|| {{Span|false}}                          |-| ''Setter''|| set_collision_use_kinematic(value) |-| ''Getter''|| get_collision_use_kinematic()      |}If {{Span|true}}, TileMap collisions will be handled as a kinematic body. If {{Span|false}}, collisions will be handled as static body.=== collision_use_parent ===*  bool '''collision_use_parent'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| set_collision_use_parent(value) |-| ''Getter''|| get_collision_use_parent()      |}If {{Span|true}}, this tilemap's collision shape will be added to the collision shape of the parent. The parent has to be a [[CollisionObject2D GD|CollisionObject2D]].=== compatibility_mode ===*  bool '''compatibility_mode'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| set_compatibility_mode(value)   |-| ''Getter''|| is_compatibility_mode_enabled() |}If {{Span|true}}, the compatibility with the tilemaps made in Godot 3.1 or earlier is maintained (textures move when the tile origin changes and rotate if the texture size is not homogeneous). This mode presents problems when doing {{Span|flip_h}}, {{Span|flip_v}} and {{Span|transpose}} tile operations on non-homogeneous isometric tiles (e.g. 2:1), in which the texture could not coincide with the collision, thus it is not recommended for isometric or non-square tiles.If {{Span|false}}, the textures do not move when doing {{Span|flip_h}}, {{Span|flip_v}} operations if no offset is used, nor when changing the tile origin.The compatibility mode doesn't work with the [[#centered_textures|centered_textures]] option, because displacing textures with the [[#cell_tile_origin|cell_tile_origin]] option or in irregular tiles is not relevant when centering those textures.=== mode ===*  [[#Mode|Mode]] '''mode'''{| class="wikitable | ''Default''|| {{Span|0}}           |-| ''Setter''|| set_mode(value) |-| ''Getter''|| get_mode()      |}The TileMap orientation mode. See [[#Mode|Mode]] for possible values.=== occluder_light_mask ===*  int '''occluder_light_mask'''{| class="wikitable | ''Default''|| {{Span|1}}                          |-| ''Setter''|| set_occluder_light_mask(value) |-| ''Getter''|| get_occluder_light_mask()      |}The light mask assigned to all light occluders in the TileMap. The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s).=== tile_set ===*  [[TileSet GD|TileSet]] '''tile_set'''{| class="wikitable | ''Setter''|| set_tileset(value) |-| ''Getter''|| get_tileset()      |}The assigned [[TileSet GD|TileSet]].== Method Descriptions ===== clear ===*  void '''clear ( )'''Clears all cells.=== fix_invalid_tiles ===*  void '''fix_invalid_tiles ( )'''Clears cells that do not exist in the tileset.=== get_cell ===*  int '''get_cell''' '''(''' int x, int y ''')''' constReturns the tile index of the given cell. If no tile exists in the cell, returns [[TileMap GD#INVALID_CELL|INVALID_CELL]].=== get_cell_autotile_coord ===*  [[Vector2 GD|Vector2]] '''get_cell_autotile_coord''' '''(''' int x, int y ''')''' constReturns the coordinate of the autotile variation in the tileset. Returns a zero vector if the cell doesn't have autotiling.=== get_cellv ===*  int '''get_cellv''' '''(''' [[Vector2 GD|Vector2]] position ''')''' constReturns the tile index of the cell given by a Vector2. If no tile exists in the cell, returns [[TileMap GD#INVALID_CELL|INVALID_CELL]].=== get_collision_layer_bit ===*  bool '''get_collision_layer_bit''' '''(''' int bit ''')''' constReturns {{Span|true}} if the given collision layer bit is set.=== get_collision_mask_bit ===*  bool '''get_collision_mask_bit''' '''(''' int bit ''')''' constReturns {{Span|true}} if the given collision mask bit is set.=== get_used_cells ===*  [[Array GD|Array]] '''get_used_cells ( )''' constReturns a [[Vector2 GD|Vector2]] array with the positions of all cells containing a tile from the tileset (i.e. a tile index different from {{Span|-1}}).=== get_used_cells_by_id ===*  [[Array GD|Array]] '''get_used_cells_by_id''' '''(''' int id ''')''' constReturns an array of all cells with the given tile {{Span|id}}.=== get_used_rect ===*  [[Rect2 GD|Rect2]] '''get_used_rect ( )'''Returns a rectangle enclosing the used (non-empty) tiles of the map.=== is_cell_transposed ===*  bool '''is_cell_transposed''' '''(''' int x, int y ''')''' constReturns {{Span|true}} if the given cell is transposed, i.e. the X and Y axes are swapped.=== is_cell_x_flipped ===*  bool '''is_cell_x_flipped''' '''(''' int x, int y ''')''' constReturns {{Span|true}} if the given cell is flipped in the X axis.=== is_cell_y_flipped ===*  bool '''is_cell_y_flipped''' '''(''' int x, int y ''')''' constReturns {{Span|true}} if the given cell is flipped in the Y axis.=== map_to_world ===*  [[Vector2 GD|Vector2]] '''map_to_world''' '''(''' [[Vector2 GD|Vector2]] map_position, bool ignore_half_ofs=false ''')''' constReturns the global position corresponding to the given tilemap (grid-based) coordinates.Optionally, the tilemap's half offset can be ignored.=== set_cell ===*  void '''set_cell''' '''(''' int x, int y, int tile, bool flip_x=false, bool flip_y=false, bool transpose=false, [[Vector2 GD|Vector2]] autotile_coord=Vector2( 0, 0 ) ''')'''Sets the tile index for the cell given by a Vector2.An index of {{Span|-1}} clears the cell.Optionally, the tile can also be flipped, transposed, or given autotile coordinates.'''Note:''' Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.If you need these to be immediately updated, you can call [[#update_dirty_quadrants|update_dirty_quadrants]].Overriding this method also overrides it internally, allowing custom logic to be implemented when tiles are placed/removed:::    func set_cell(x, y, tile, flip_x, flip_y, transpose, autotile_coord)        # Write your custom logic here.        # To call the default method:        .set_cell(x, y, tile, flip_x, flip_y, transpose, autotile_coord)=== set_cellv ===*  void '''set_cellv''' '''(''' [[Vector2 GD|Vector2]] position, int tile, bool flip_x=false, bool flip_y=false, bool transpose=false ''')'''Sets the tile index for the given cell.An index of {{Span|-1}} clears the cell.Optionally, the tile can also be flipped or transposed.'''Note:''' Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.If you need these to be immediately updated, you can call [[#update_dirty_quadrants|update_dirty_quadrants]].=== set_collision_layer_bit ===*  void '''set_collision_layer_bit''' '''(''' int bit, bool value ''')'''Sets the given collision layer bit.=== set_collision_mask_bit ===*  void '''set_collision_mask_bit''' '''(''' int bit, bool value ''')'''Sets the given collision mask bit.=== update_bitmask_area ===*  void '''update_bitmask_area''' '''(''' [[Vector2 GD|Vector2]] position ''')'''Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based X and Y coordinates.=== update_bitmask_region ===*  void '''update_bitmask_region''' '''(''' [[Vector2 GD|Vector2]] start=Vector2( 0, 0 ), [[Vector2 GD|Vector2]] end=Vector2( 0, 0 ) ''')'''Applies autotiling rules to the cells in the given region (specified by grid-based X and Y coordinates).Calling with invalid (or missing) parameters applies autotiling rules for the entire tilemap.=== update_dirty_quadrants ===*  void '''update_dirty_quadrants ( )'''Updates the tile map's quadrants, allowing things such as navigation and collision shapes to be immediately used if modified.=== world_to_map ===*  [[Vector2 GD|Vector2]] '''world_to_map''' '''(''' [[Vector2 GD|Vector2]] world_position ''')''' constReturns the tilemap (grid-based) coordinates corresponding to the given local position.