__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]A class that stores an expression you can execute.== Description ==An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call.An example expression text using the built-in math functions could be {{Span|sqrt(pow(3,2) + pow(4,2))}}.In the following example we use a [[LineEdit GD|LineEdit]] node to write our expression and show the result.::    onready var expression = Expression.new()        func _ready():        $LineEdit.connect("text_entered", self, "_on_text_entered")        func _on_text_entered(command):        var error = expression.parse(command, [])        if error != OK:            print(expression.get_error_text())            return        var result = expression.execute([], null, true)        if not expression.has_execute_failed():            $LineEdit.text = str(result)== Methods =={| class="wikitable | [[Variant GD|Variant]]|| [[#execute|execute]] '''(''' [[Array GD|Array]] inputs=[  ], [[Object GD|Object]] base_instance=null, bool show_error=true ''')''' |-| [[String GD|String]]|| [[#get_error_text|get_error_text]] '''(''' ''')''' const                                                                                                            |-| bool|| [[#has_execute_failed|has_execute_failed]] '''(''' ''')''' const                                                                                                    |-| [[@GlobalScope GD#Error|Error]]|| [[#parse|parse]] '''(''' [[String GD|String]] expression, [[PackedStringArray GD|PackedStringArray]] input_names=PackedStringArray(  ) ''')'''        |}== Method Descriptions ===== execute ===*  [[Variant GD|Variant]] '''execute''' '''(''' [[Array GD|Array]] inputs=[  ], [[Object GD|Object]] base_instance=null, bool show_error=true ''')'''Executes the expression that was previously parsed by [[#parse|parse]] and returns the result. Before you use the returned object, you should check if the method failed by calling [[#has_execute_failed|has_execute_failed]].If you defined input variables in [[#parse|parse]], you can specify their values in the inputs array, in the same order.=== get_error_text ===*  [[String GD|String]] '''get_error_text ( )''' constReturns the error text if [[#parse|parse]] has failed.=== has_execute_failed ===*  bool '''has_execute_failed ( )''' constReturns {{Span|true}} if [[#execute|execute]] has failed.=== parse ===*  [[@GlobalScope GD#Error|Error]] '''parse''' '''(''' [[String GD|String]] expression, [[PackedStringArray GD|PackedStringArray]] input_names=PackedStringArray(  ) ''')'''Parses the expression and returns an [[@GlobalScope GD#Error|Error]] code.You can optionally specify names of variables that may appear in the expression with {{Span|input_names}}, so that you can bind them when it gets executed.