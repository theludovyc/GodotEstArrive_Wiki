__NOTOC__Built-in string class.== Description ==This is the built-in string class (and the one used by GDScript). It supports Unicode and provides all necessary means for string handling. Strings are reference counted and use a copy-on-write approach, so passing them around is cheap in resources.== Tutorials ==*  :doc:`../getting_started/scripting/gdscript/gdscript_format_string`== Methods =={| class="wikitable | [[String GD|String]]|| [[String GD#String|String]] '''(''' bool from ''')'''                                                                                      |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' int from ''')'''                                                                                        |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' float from ''')'''                                                                                    |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Vector2 GD|Vector2]] from ''')'''                                                                                |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Vector2i GD|Vector2i]] from ''')'''                                                                              |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Rect2 GD|Rect2]] from ''')'''                                                                                    |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Rect2i GD|Rect2i]] from ''')'''                                                                                  |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Vector3 GD|Vector3]] from ''')'''                                                                                |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Vector3i GD|Vector3i]] from ''')'''                                                                              |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Transform2D GD|Transform2D]] from ''')'''                                                                        |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Plane GD|Plane]] from ''')'''                                                                                    |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Quat GD|Quat]] from ''')'''                                                                                      |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[AABB GD|AABB]] from ''')'''                                                                                      |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Basis GD|Basis]] from ''')'''                                                                                    |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Transform GD|Transform]] from ''')'''                                                                            |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Color GD|Color]] from ''')'''                                                                                    |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[StringName GD|StringName]] from ''')'''                                                                          |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[NodePath GD|NodePath]] from ''')'''                                                                              |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[RID GD|RID]] from ''')'''                                                                                        |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Callable GD|Callable]] from ''')'''                                                                              |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Signal GD|Signal]] from ''')'''                                                                                  |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Dictionary GD|Dictionary]] from ''')'''                                                                          |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[Array GD|Array]] from ''')'''                                                                                    |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedByteArray GD|PackedByteArray]] from ''')'''                                                                |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedInt32Array GD|PackedInt32Array]] from ''')'''                                                              |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedInt64Array GD|PackedInt64Array]] from ''')'''                                                              |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedFloat32Array GD|PackedFloat32Array]] from ''')'''                                                          |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedFloat64Array GD|PackedFloat64Array]] from ''')'''                                                          |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedStringArray GD|PackedStringArray]] from ''')'''                                                            |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedVector2Array GD|PackedVector2Array]] from ''')'''                                                          |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedVector3Array GD|PackedVector3Array]] from ''')'''                                                          |-| [[String GD|String]]|| [[String GD#String|String]] '''(''' [[PackedColorArray GD|PackedColorArray]] from ''')'''                                                              |-| bool|| [[#begins_with|begins_with]] '''(''' [[String GD|String]] text ''')'''                                                                        |-| [[PackedStringArray GD|PackedStringArray]]|| [[#bigrams|bigrams]] '''(''' ''')'''                                                                                                                 |-| [[String GD|String]]|| [[#c_escape|c_escape]] '''(''' ''')'''                                                                                                               |-| [[String GD|String]]|| [[#c_unescape|c_unescape]] '''(''' ''')'''                                                                                                           |-| [[String GD|String]]|| [[#capitalize|capitalize]] '''(''' ''')'''                                                                                                           |-| int|| [[#casecmp_to|casecmp_to]] '''(''' [[String GD|String]] to ''')'''                                                                            |-| int|| [[#count|count]] '''(''' [[String GD|String]] what, int from=0, int to=0 ''')'''                          |-| int|| [[#countn|countn]] '''(''' [[String GD|String]] what, int from=0, int to=0 ''')'''                        |-| [[String GD|String]]|| [[#dedent|dedent]] '''(''' ''')'''                                                                                                                   |-| bool|| [[#empty|empty]] '''(''' ''')'''                                                                                                                     |-| bool|| [[#ends_with|ends_with]] '''(''' [[String GD|String]] text ''')'''                                                                            |-| void|| [[#erase|erase]] '''(''' int position, int chars ''')'''                                                         |-| int|| [[#find|find]] '''(''' [[String GD|String]] what, int from=0 ''')'''                                                        |-| int|| [[#find_last|find_last]] '''(''' [[String GD|String]] what ''')'''                                                                            |-| int|| [[#findn|findn]] '''(''' [[String GD|String]] what, int from=0 ''')'''                                                      |-| [[String GD|String]]|| [[#format|format]] '''(''' [[Variant GD|Variant]] values, [[String GD|String]] placeholder="{_}" ''')'''                               |-| [[String GD|String]]|| [[#get_base_dir|get_base_dir]] '''(''' ''')'''                                                                                                       |-| [[String GD|String]]|| [[#get_basename|get_basename]] '''(''' ''')'''                                                                                                       |-| [[String GD|String]]|| [[#get_extension|get_extension]] '''(''' ''')'''                                                                                                     |-| [[String GD|String]]|| [[#get_file|get_file]] '''(''' ''')'''                                                                                                               |-| int|| [[#hash|hash]] '''(''' ''')'''                                                                                                                       |-| int|| [[#hex_to_int|hex_to_int]] '''(''' ''')'''                                                                                                           |-| [[String GD|String]]|| [[#http_escape|http_escape]] '''(''' ''')'''                                                                                                         |-| [[String GD|String]]|| [[#http_unescape|http_unescape]] '''(''' ''')'''                                                                                                     |-| [[String GD|String]]|| [[#humanize_size|humanize_size]] '''(''' int size ''')'''                                                                          |-| [[String GD|String]]|| [[#insert|insert]] '''(''' int position, [[String GD|String]] what ''')'''                                                  |-| bool|| [[#is_abs_path|is_abs_path]] '''(''' ''')'''                                                                                                         |-| bool|| [[#is_rel_path|is_rel_path]] '''(''' ''')'''                                                                                                         |-| bool|| [[#is_subsequence_of|is_subsequence_of]] '''(''' [[String GD|String]] text ''')'''                                                            |-| bool|| [[#is_subsequence_ofi|is_subsequence_ofi]] '''(''' [[String GD|String]] text ''')'''                                                          |-| bool|| [[#is_valid_filename|is_valid_filename]] '''(''' ''')'''                                                                                             |-| bool|| [[#is_valid_float|is_valid_float]] '''(''' ''')'''                                                                                                   |-| bool|| [[#is_valid_hex_number|is_valid_hex_number]] '''(''' bool with_prefix=false ''')'''                                               |-| bool|| [[#is_valid_html_color|is_valid_html_color]] '''(''' ''')'''                                                                                         |-| bool|| [[#is_valid_identifier|is_valid_identifier]] '''(''' ''')'''                                                                                         |-| bool|| [[#is_valid_integer|is_valid_integer]] '''(''' ''')'''                                                                                               |-| bool|| [[#is_valid_ip_address|is_valid_ip_address]] '''(''' ''')'''                                                                                         |-| [[String GD|String]]|| [[#json_escape|json_escape]] '''(''' ''')'''                                                                                                         |-| [[String GD|String]]|| [[#left|left]] '''(''' int position ''')'''                                                                                        |-| int|| [[#length|length]] '''(''' ''')'''                                                                                                                   |-| [[String GD|String]]|| [[#lstrip|lstrip]] '''(''' [[String GD|String]] chars ''')'''                                                                                 |-| bool|| [[#match|match]] '''(''' [[String GD|String]] expr ''')'''                                                                                    |-| bool|| [[#matchn|matchn]] '''(''' [[String GD|String]] expr ''')'''                                                                                  |-| [[PackedByteArray GD|PackedByteArray]]|| [[#md5_buffer|md5_buffer]] '''(''' ''')'''                                                                                                           |-| [[String GD|String]]|| [[#md5_text|md5_text]] '''(''' ''')'''                                                                                                               |-| int|| [[#nocasecmp_to|nocasecmp_to]] '''(''' [[String GD|String]] to ''')'''                                                                        |-| int|| [[#ord_at|ord_at]] '''(''' int at ''')'''                                                                                          |-| [[String GD|String]]|| [[#pad_decimals|pad_decimals]] '''(''' int digits ''')'''                                                                          |-| [[String GD|String]]|| [[#pad_zeros|pad_zeros]] '''(''' int digits ''')'''                                                                                |-| [[String GD|String]]|| [[#percent_decode|percent_decode]] '''(''' ''')'''                                                                                                   |-| [[String GD|String]]|| [[#percent_encode|percent_encode]] '''(''' ''')'''                                                                                                   |-| [[String GD|String]]|| [[#plus_file|plus_file]] '''(''' [[String GD|String]] file ''')'''                                                                            |-| [[String GD|String]]|| [[#repeat|repeat]] '''(''' int count ''')'''                                                                                       |-| [[String GD|String]]|| [[#replace|replace]] '''(''' [[String GD|String]] what, [[String GD|String]] forwhat ''')'''                                           |-| [[String GD|String]]|| [[#replacen|replacen]] '''(''' [[String GD|String]] what, [[String GD|String]] forwhat ''')'''                                         |-| int|| [[#rfind|rfind]] '''(''' [[String GD|String]] what, int from=-1 ''')'''                                                     |-| int|| [[#rfindn|rfindn]] '''(''' [[String GD|String]] what, int from=-1 ''')'''                                                   |-| [[String GD|String]]|| [[#right|right]] '''(''' int position ''')'''                                                                                      |-| [[PackedStringArray GD|PackedStringArray]]|| [[#rsplit|rsplit]] '''(''' [[String GD|String]] delimiter, bool allow_empty=true, int maxsplit=0 ''')''' |-| [[String GD|String]]|| [[#rstrip|rstrip]] '''(''' [[String GD|String]] chars ''')'''                                                                                 |-| [[PackedByteArray GD|PackedByteArray]]|| [[#sha1_buffer|sha1_buffer]] '''(''' ''')'''                                                                                                         |-| [[String GD|String]]|| [[#sha1_text|sha1_text]] '''(''' ''')'''                                                                                                             |-| [[PackedByteArray GD|PackedByteArray]]|| [[#sha256_buffer|sha256_buffer]] '''(''' ''')'''                                                                                                     |-| [[String GD|String]]|| [[#sha256_text|sha256_text]] '''(''' ''')'''                                                                                                         |-| float|| [[#similarity|similarity]] '''(''' [[String GD|String]] text ''')'''                                                                          |-| [[PackedStringArray GD|PackedStringArray]]|| [[#split|split]] '''(''' [[String GD|String]] delimiter, bool allow_empty=true, int maxsplit=0 ''')'''   |-| [[PackedFloat32Array GD|PackedFloat32Array]]|| [[#split_floats|split_floats]] '''(''' [[String GD|String]] delimiter, bool allow_empty=true ''')'''                       |-| [[String GD|String]]|| [[#strip_edges|strip_edges]] '''(''' bool left=true, bool right=true ''')'''                                   |-| [[String GD|String]]|| [[#strip_escapes|strip_escapes]] '''(''' ''')'''                                                                                                     |-| [[String GD|String]]|| [[#substr|substr]] '''(''' int from, int len=-1 ''')'''                                                          |-| [[PackedByteArray GD|PackedByteArray]]|| [[#to_ascii|to_ascii]] '''(''' ''')'''                                                                                                               |-| float|| [[#to_float|to_float]] '''(''' ''')'''                                                                                                               |-| int|| [[#to_int|to_int]] '''(''' ''')'''                                                                                                                   |-| [[String GD|String]]|| [[#to_lower|to_lower]] '''(''' ''')'''                                                                                                               |-| [[String GD|String]]|| [[#to_upper|to_upper]] '''(''' ''')'''                                                                                                               |-| [[PackedByteArray GD|PackedByteArray]]|| [[#to_utf8|to_utf8]] '''(''' ''')'''                                                                                                                 |-| [[String GD|String]]|| [[#trim_prefix|trim_prefix]] '''(''' [[String GD|String]] prefix ''')'''                                                                      |-| [[String GD|String]]|| [[#trim_suffix|trim_suffix]] '''(''' [[String GD|String]] suffix ''')'''                                                                      |-| [[String GD|String]]|| [[#xml_escape|xml_escape]] '''(''' ''')'''                                                                                                           |-| [[String GD|String]]|| [[#xml_unescape|xml_unescape]] '''(''' ''')'''                                                                                                       |}== Method Descriptions ===== String ===*  [[String GD|String]] '''String''' '''(''' bool from ''')'''Constructs a new String from the given bool.*  [[String GD|String]] '''String''' '''(''' int from ''')'''Constructs a new String from the given int.*  [[String GD|String]] '''String''' '''(''' float from ''')'''Constructs a new String from the given float.*  [[String GD|String]] '''String''' '''(''' [[Vector2 GD|Vector2]] from ''')'''Constructs a new String from the given [[Vector2 GD|Vector2]].*  [[String GD|String]] '''String''' '''(''' [[Vector2i GD|Vector2i]] from ''')'''Constructs a new String from the given [[Vector2i GD|Vector2i]].*  [[String GD|String]] '''String''' '''(''' [[Rect2 GD|Rect2]] from ''')'''Constructs a new String from the given [[Rect2 GD|Rect2]].*  [[String GD|String]] '''String''' '''(''' [[Rect2i GD|Rect2i]] from ''')'''Constructs a new String from the given [[Rect2i GD|Rect2i]].*  [[String GD|String]] '''String''' '''(''' [[Vector3 GD|Vector3]] from ''')'''Constructs a new String from the given [[Vector3 GD|Vector3]].*  [[String GD|String]] '''String''' '''(''' [[Vector3i GD|Vector3i]] from ''')'''Constructs a new String from the given [[Vector3i GD|Vector3i]].*  [[String GD|String]] '''String''' '''(''' [[Transform2D GD|Transform2D]] from ''')'''Constructs a new String from the given [[Transform2D GD|Transform2D]].*  [[String GD|String]] '''String''' '''(''' [[Plane GD|Plane]] from ''')'''Constructs a new String from the given [[Plane GD|Plane]].*  [[String GD|String]] '''String''' '''(''' [[Quat GD|Quat]] from ''')'''Constructs a new String from the given [[Quat GD|Quat]].*  [[String GD|String]] '''String''' '''(''' [[AABB GD|AABB]] from ''')'''Constructs a new String from the given [[AABB GD|AABB]].*  [[String GD|String]] '''String''' '''(''' [[Basis GD|Basis]] from ''')'''Constructs a new String from the given [[Basis GD|Basis]].*  [[String GD|String]] '''String''' '''(''' [[Transform GD|Transform]] from ''')'''Constructs a new String from the given [[Transform GD|Transform]].*  [[String GD|String]] '''String''' '''(''' [[Color GD|Color]] from ''')'''Constructs a new String from the given [[Color GD|Color]].*  [[String GD|String]] '''String''' '''(''' [[StringName GD|StringName]] from ''')'''Constructs a new String from the given [[StringName GD|StringName]].*  [[String GD|String]] '''String''' '''(''' [[NodePath GD|NodePath]] from ''')'''Constructs a new String from the given [[NodePath GD|NodePath]].*  [[String GD|String]] '''String''' '''(''' [[RID GD|RID]] from ''')'''Constructs a new String from the given [[RID GD|RID]].*  [[String GD|String]] '''String''' '''(''' [[Callable GD|Callable]] from ''')'''Constructs a new String from the given [[Callable GD|Callable]].*  [[String GD|String]] '''String''' '''(''' [[Signal GD|Signal]] from ''')'''Constructs a new String from the given [[Signal GD|Signal]].*  [[String GD|String]] '''String''' '''(''' [[Dictionary GD|Dictionary]] from ''')'''Constructs a new String from the given [[Dictionary GD|Dictionary]].*  [[String GD|String]] '''String''' '''(''' [[Array GD|Array]] from ''')'''Constructs a new String from the given [[Array GD|Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedByteArray GD|PackedByteArray]] from ''')'''Constructs a new String from the given [[PackedByteArray GD|PackedByteArray]].*  [[String GD|String]] '''String''' '''(''' [[PackedInt32Array GD|PackedInt32Array]] from ''')'''Constructs a new String from the given [[PackedInt32Array GD|PackedInt32Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedInt64Array GD|PackedInt64Array]] from ''')'''Constructs a new String from the given [[PackedInt64Array GD|PackedInt64Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedFloat32Array GD|PackedFloat32Array]] from ''')'''Constructs a new String from the given [[PackedFloat32Array GD|PackedFloat32Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedFloat64Array GD|PackedFloat64Array]] from ''')'''Constructs a new String from the given [[PackedFloat64Array GD|PackedFloat64Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedStringArray GD|PackedStringArray]] from ''')'''Constructs a new String from the given [[PackedStringArray GD|PackedStringArray]].*  [[String GD|String]] '''String''' '''(''' [[PackedVector2Array GD|PackedVector2Array]] from ''')'''Constructs a new String from the given [[PackedVector2Array GD|PackedVector2Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedVector3Array GD|PackedVector3Array]] from ''')'''Constructs a new String from the given [[PackedVector3Array GD|PackedVector3Array]].*  [[String GD|String]] '''String''' '''(''' [[PackedColorArray GD|PackedColorArray]] from ''')'''Constructs a new String from the given [[PackedColorArray GD|PackedColorArray]].=== begins_with ===*  bool '''begins_with''' '''(''' [[String GD|String]] text ''')'''Returns {{Span|true}} if the string begins with the given string.=== bigrams ===*  [[PackedStringArray GD|PackedStringArray]] '''bigrams ( )'''Returns the bigrams (pairs of consecutive letters) of this string.=== c_escape ===*  [[String GD|String]] '''c_escape ( )'''Returns a copy of the string with special characters escaped using the C language standard.=== c_unescape ===*  [[String GD|String]] '''c_unescape ( )'''Returns a copy of the string with escaped characters replaced by their meanings according to the C language standard.=== capitalize ===*  [[String GD|String]] '''capitalize ( )'''Changes the case of some letters. Replaces underscores with spaces, converts all letters to lowercase, then capitalizes first and every letter following the space character. For {{Span|capitalize camelCase mixed_with_underscores}}, it will return {{Span|Capitalize Camelcase Mixed With Underscores}}.=== casecmp_to ===*  int '''casecmp_to''' '''(''' [[String GD|String]] to ''')'''Performs a case-sensitive comparison to another string. Returns {{Span|-1}} if less than, {{Span|+1}} if greater than, or {{Span|0}} if equal.=== count ===*  int '''count''' '''(''' [[String GD|String]] what, int from=0, int to=0 ''')'''Returns the number of occurrences of substring {{Span|what}} between {{Span|from}} and {{Span|to}} positions. If {{Span|from}} and {{Span|to}} equals 0 the whole string will be used. If only {{Span|to}} equals 0 the remained substring will be used.=== countn ===*  int '''countn''' '''(''' [[String GD|String]] what, int from=0, int to=0 ''')'''Returns the number of occurrences of substring {{Span|what}} (ignoring case) between {{Span|from}} and {{Span|to}} positions. If {{Span|from}} and {{Span|to}} equals 0 the whole string will be used. If only {{Span|to}} equals 0 the remained substring will be used.=== dedent ===*  [[String GD|String]] '''dedent ( )'''Returns a copy of the string with indentation (leading tabs and spaces) removed.=== empty ===*  bool '''empty ( )'''Returns {{Span|true}} if the string is empty.=== ends_with ===*  bool '''ends_with''' '''(''' [[String GD|String]] text ''')'''Returns {{Span|true}} if the string ends with the given string.=== erase ===*  void '''erase''' '''(''' int position, int chars ''')'''Erases {{Span|chars}} characters from the string starting from {{Span|position}}.=== find ===*  int '''find''' '''(''' [[String GD|String]] what, int from=0 ''')'''Finds the first occurrence of a substring. Returns the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.=== find_last ===*  int '''find_last''' '''(''' [[String GD|String]] what ''')'''Finds the last occurrence of a substring. Returns the starting position of the substring or -1 if not found.=== findn ===*  int '''findn''' '''(''' [[String GD|String]] what, int from=0 ''')'''Finds the first occurrence of a substring, ignoring case. Returns the starting position of the substring or -1 if not found. Optionally, the initial search index can be passed.=== format ===*  [[String GD|String]] '''format''' '''(''' [[Variant GD|Variant]] values, [[String GD|String]] placeholder="{_}" ''')'''Formats the string by replacing all occurrences of {{Span|placeholder}} with {{Span|values}}.=== get_base_dir ===*  [[String GD|String]] '''get_base_dir ( )'''If the string is a valid file path, returns the base directory name.=== get_basename ===*  [[String GD|String]] '''get_basename ( )'''If the string is a valid file path, returns the full file path without the extension.=== get_extension ===*  [[String GD|String]] '''get_extension ( )'''If the string is a valid file path, returns the extension.=== get_file ===*  [[String GD|String]] '''get_file ( )'''If the string is a valid file path, returns the filename.=== hash ===*  int '''hash ( )'''Hashes the string and returns a 32-bit integer.=== hex_to_int ===*  int '''hex_to_int ( )'''Converts a string containing a hexadecimal number into an integer. Hexadecimal strings are expected to be prefixed with "{{Span|0x}}" otherwise {{Span|0}} is returned.::    print("0xff".hex_to_int()) # Print "255"=== http_escape ===*  [[String GD|String]] '''http_escape ( )'''Escapes (encodes) a string to URL friendly format. Also referred to as 'URL encode'.::    print("https://example.org/?escaped=" + "Godot Engine:'docs'".http_escape())=== http_unescape ===*  [[String GD|String]] '''http_unescape ( )'''Unescapes (decodes) a string in URL encoded format. Also referred to as 'URL decode'.::    print("https://example.org/?escaped=" + "Godot%20Engine%3A%27docs%27".http_unescape())=== humanize_size ===*  [[String GD|String]] '''humanize_size''' '''(''' int size ''')'''Converts {{Span|size}} represented as number of bytes to human-readable format using internationalized set of data size units, namely: B, KiB, MiB, GiB, TiB, PiB, EiB. Note that the next smallest unit is picked automatically to hold at most 1024 units.::    var bytes = 133790307    var size = String.humanize_size(bytes)    print(size) # prints "127.5 MiB"=== insert ===*  [[String GD|String]] '''insert''' '''(''' int position, [[String GD|String]] what ''')'''Returns a copy of the string with the substring {{Span|what}} inserted at the given position.=== is_abs_path ===*  bool '''is_abs_path ( )'''If the string is a path to a file or directory, returns {{Span|true}} if the path is absolute.=== is_rel_path ===*  bool '''is_rel_path ( )'''If the string is a path to a file or directory, returns {{Span|true}} if the path is relative.=== is_subsequence_of ===*  bool '''is_subsequence_of''' '''(''' [[String GD|String]] text ''')'''Returns {{Span|true}} if this string is a subsequence of the given string.=== is_subsequence_ofi ===*  bool '''is_subsequence_ofi''' '''(''' [[String GD|String]] text ''')'''Returns {{Span|true}} if this string is a subsequence of the given string, without considering case.=== is_valid_filename ===*  bool '''is_valid_filename ( )'''Returns {{Span|true}} if this string is free from characters that aren't allowed in file names, those being:{{Span|: / \ ? * "|| % < >}}=== is_valid_float ===*  bool '''is_valid_float ( )'''Returns {{Span|true}} if this string contains a valid float.=== is_valid_hex_number ===*  bool '''is_valid_hex_number''' '''(''' bool with_prefix=false ''')'''Returns {{Span|true}} if this string contains a valid hexadecimal number. If {{Span|with_prefix}} is {{Span|true}}, then a validity of the hexadecimal number is determined by {{Span|0x}} prefix, for instance: {{Span|0xDEADC0DE}}.=== is_valid_html_color ===*  bool '''is_valid_html_color ( )'''Returns {{Span|true}} if this string contains a valid color in hexadecimal HTML notation. Other HTML notations such as named colors or {{Span|hsl()}} colors aren't considered valid by this method and will return {{Span|false}}.=== is_valid_identifier ===*  bool '''is_valid_identifier ( )'''Returns {{Span|true}} if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores ({{Span|_}}) and the first character may not be a digit.=== is_valid_integer ===*  bool '''is_valid_integer ( )'''Returns {{Span|true}} if this string contains a valid integer.=== is_valid_ip_address ===*  bool '''is_valid_ip_address ( )'''Returns {{Span|true}} if this string contains a valid IP address.=== json_escape ===*  [[String GD|String]] '''json_escape ( )'''Returns a copy of the string with special characters escaped using the JSON standard.=== left ===*  [[String GD|String]] '''left''' '''(''' int position ''')'''Returns a number of characters from the left of the string.=== length ===*  int '''length ( )'''Returns the string's amount of characters.=== lstrip ===*  [[String GD|String]] '''lstrip''' '''(''' [[String GD|String]] chars ''')'''Returns a copy of the string with characters removed from the left.=== match ===*  bool '''match''' '''(''' [[String GD|String]] expr ''')'''Does a simple case-sensitive expression match, where {{Span|"*"}} matches zero or more arbitrary characters and {{Span|"?"}} matches any single character except a period ({{Span|"."}}).=== matchn ===*  bool '''matchn''' '''(''' [[String GD|String]] expr ''')'''Does a simple case-insensitive expression match, where {{Span|"*"}} matches zero or more arbitrary characters and {{Span|"?"}} matches any single character except a period ({{Span|"."}}).=== md5_buffer ===*  [[PackedByteArray GD|PackedByteArray]] '''md5_buffer ( )'''Returns the MD5 hash of the string as an array of bytes.=== md5_text ===*  [[String GD|String]] '''md5_text ( )'''Returns the MD5 hash of the string as a string.=== nocasecmp_to ===*  int '''nocasecmp_to''' '''(''' [[String GD|String]] to ''')'''Performs a case-insensitive comparison to another string. Returns {{Span|-1}} if less than, {{Span|+1}} if greater than, or {{Span|0}} if equal.=== ord_at ===*  int '''ord_at''' '''(''' int at ''')'''Returns the character code at position {{Span|at}}.=== pad_decimals ===*  [[String GD|String]] '''pad_decimals''' '''(''' int digits ''')'''Formats a number to have an exact number of {{Span|digits}} after the decimal point.=== pad_zeros ===*  [[String GD|String]] '''pad_zeros''' '''(''' int digits ''')'''Formats a number to have an exact number of {{Span|digits}} before the decimal point.=== percent_decode ===*  [[String GD|String]] '''percent_decode ( )'''Decode a percent-encoded string. See [[#percent_encode|percent_encode]].=== percent_encode ===*  [[String GD|String]] '''percent_encode ( )'''Percent-encodes a string. Encodes parameters in a URL when sending a HTTP GET request (and bodies of form-urlencoded POST requests).=== plus_file ===*  [[String GD|String]] '''plus_file''' '''(''' [[String GD|String]] file ''')'''If the string is a path, this concatenates {{Span|file}} at the end of the string as a subpath. E.g. {{Span|"this/is".plus_file("path") == "this/is/path"}}.=== repeat ===*  [[String GD|String]] '''repeat''' '''(''' int count ''')'''Returns original string repeated a number of times. The number of repetitions is given by the argument.=== replace ===*  [[String GD|String]] '''replace''' '''(''' [[String GD|String]] what, [[String GD|String]] forwhat ''')'''Replaces occurrences of a case-sensitive substring with the given one inside the string.=== replacen ===*  [[String GD|String]] '''replacen''' '''(''' [[String GD|String]] what, [[String GD|String]] forwhat ''')'''Replaces occurrences of a case-insensitive substring with the given one inside the string.=== rfind ===*  int '''rfind''' '''(''' [[String GD|String]] what, int from=-1 ''')'''Performs a case-sensitive search for a substring, but starts from the end of the string instead of the beginning.=== rfindn ===*  int '''rfindn''' '''(''' [[String GD|String]] what, int from=-1 ''')'''Performs a case-insensitive search for a substring, but starts from the end of the string instead of the beginning.=== right ===*  [[String GD|String]] '''right''' '''(''' int position ''')'''Returns the right side of the string from a given position.=== rsplit ===*  [[PackedStringArray GD|PackedStringArray]] '''rsplit''' '''(''' [[String GD|String]] delimiter, bool allow_empty=true, int maxsplit=0 ''')'''Splits the string by a {{Span|delimiter}} string and returns an array of the substrings, starting from right.The splits in the returned array are sorted in the same order as the original string, from left to right.If {{Span|maxsplit}} is specified, it defines the number of splits to do from the right up to {{Span|maxsplit}}. The default value of 0 means that all items are split, thus giving the same result as [[#split|split]].Example:::    var some_string = "One,Two,Three,Four"    var some_array = some_string.rsplit(",", true, 1)    print(some_array.size()) # Prints 2    print(some_array[0]) # Prints "Four"    print(some_array[1]) # Prints "Three,Two,One"=== rstrip ===*  [[String GD|String]] '''rstrip''' '''(''' [[String GD|String]] chars ''')'''Returns a copy of the string with characters removed from the right.=== sha1_buffer ===*  [[PackedByteArray GD|PackedByteArray]] '''sha1_buffer ( )'''Returns the SHA-1 hash of the string as an array of bytes.=== sha1_text ===*  [[String GD|String]] '''sha1_text ( )'''Returns the SHA-1 hash of the string as a string.=== sha256_buffer ===*  [[PackedByteArray GD|PackedByteArray]] '''sha256_buffer ( )'''Returns the SHA-256 hash of the string as an array of bytes.=== sha256_text ===*  [[String GD|String]] '''sha256_text ( )'''Returns the SHA-256 hash of the string as a string.=== similarity ===*  float '''similarity''' '''(''' [[String GD|String]] text ''')'''Returns the similarity index of the text compared to this string. 1 means totally similar and 0 means totally dissimilar.=== split ===*  [[PackedStringArray GD|PackedStringArray]] '''split''' '''(''' [[String GD|String]] delimiter, bool allow_empty=true, int maxsplit=0 ''')'''Splits the string by a {{Span|delimiter}} string and returns an array of the substrings.If {{Span|maxsplit}} is specified, it defines the number of splits to do from the left up to {{Span|maxsplit}}. The default value of 0 means that all items are split.Example:::    var some_string = "One,Two,Three,Four"    var some_array = some_string.split(",", true, 1)    print(some_array.size()) # Prints 2    print(some_array[0]) # Prints "One"    print(some_array[1]) # Prints "Two,Three,Four"=== split_floats ===*  [[PackedFloat32Array GD|PackedFloat32Array]] '''split_floats''' '''(''' [[String GD|String]] delimiter, bool allow_empty=true ''')'''Splits the string in floats by using a delimiter string and returns an array of the substrings.For example, {{Span|"1,2.5,3"}} will return {{Span|[1,2.5,3]}} if split by {{Span|","}}.=== strip_edges ===*  [[String GD|String]] '''strip_edges''' '''(''' bool left=true, bool right=true ''')'''Returns a copy of the string stripped of any non-printable character (including tabulations, spaces and line breaks) at the beginning and the end. The optional arguments are used to toggle stripping on the left and right edges respectively.=== strip_escapes ===*  [[String GD|String]] '''strip_escapes ( )'''Returns a copy of the string stripped of any escape character. These include all non-printable control characters of the first page of the ASCII table (< 32), such as tabulation ({{Span|\t}} in C) and newline ({{Span|\n}} and {{Span|\r}}) characters, but not spaces.=== substr ===*  [[String GD|String]] '''substr''' '''(''' int from, int len=-1 ''')'''Returns part of the string from the position {{Span|from}} with length {{Span|len}}. Argument {{Span|len}} is optional and using -1 will return remaining characters from given position.=== to_ascii ===*  [[PackedByteArray GD|PackedByteArray]] '''to_ascii ( )'''Converts the String (which is a character array) to [[PackedByteArray GD|PackedByteArray]] (which is an array of bytes). The conversion is faster compared to [[#to_utf8|to_utf8]], as this method assumes that all the characters in the String are ASCII characters.=== to_float ===*  float '''to_float ( )'''Converts a string containing a decimal number into a {{Span|float}}.=== to_int ===*  int '''to_int ( )'''Converts a string containing an integer number into an {{Span|int}}.=== to_lower ===*  [[String GD|String]] '''to_lower ( )'''Returns the string converted to lowercase.=== to_upper ===*  [[String GD|String]] '''to_upper ( )'''Returns the string converted to uppercase.=== to_utf8 ===*  [[PackedByteArray GD|PackedByteArray]] '''to_utf8 ( )'''Converts the String (which is an array of characters) to [[PackedByteArray GD|PackedByteArray]] (which is an array of bytes). The conversion is a bit slower than [[#to_ascii|to_ascii]], but supports all UTF-8 characters. Therefore, you should prefer this function over [[#to_ascii|to_ascii]].=== trim_prefix ===*  [[String GD|String]] '''trim_prefix''' '''(''' [[String GD|String]] prefix ''')'''Removes a given string from the start if it starts with it or leaves the string unchanged.=== trim_suffix ===*  [[String GD|String]] '''trim_suffix''' '''(''' [[String GD|String]] suffix ''')'''Removes a given string from the end if it ends with it or leaves the string unchanged.=== xml_escape ===*  [[String GD|String]] '''xml_escape ( )'''Returns a copy of the string with special characters escaped using the XML standard.=== xml_unescape ===*  [[String GD|String]] '''xml_unescape ( )'''Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.