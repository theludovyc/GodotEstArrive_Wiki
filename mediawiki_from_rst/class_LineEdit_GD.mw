__NOTOC__'''Inherits:''' [[Control GD|Control]] '''<''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]Control that provides single-line string editing.== Description ==LineEdit provides a single-line string editor, used for text fields.It features many built-in shortcuts which will always be available ({{Span|Ctrl}} here maps to {{Span|Command}} on macOS):*  Ctrl + C: Copy*  Ctrl + X: Cut*  Ctrl + V or Ctrl + Y: Paste/"yank"*  Ctrl + Z: Undo*  Ctrl + Shift + Z: Redo*  Ctrl + U: Delete text from the cursor position to the beginning of the line*  Ctrl + K: Delete text from the cursor position to the end of the line*  Ctrl + A: Select all text*  Up/Down arrow: Move the cursor to the beginning/end of the lineOn macOS, some extra keyboard shortcuts are available:*  Ctrl + F: Like the right arrow key, move the cursor one character right*  Ctrl + B: Like the left arrow key, move the cursor one character left*  Ctrl + P: Like the up arrow key, move the cursor to the previous line*  Ctrl + N: Like the down arrow key, move the cursor to the next line*  Ctrl + D: Like the Delete key, delete the character on the right side of cursor*  Ctrl + H: Like the Backspace key, delete the character on the left side of the cursor*  Ctrl + A: Like the Home key, move the cursor to the beginning of the line*  Ctrl + E: Like the End key, move the cursor to the end of the line*  Command + Left arrow: Like the Home key, move the cursor to the beginning of the line*  Command + Right arrow: Like the End key, move the cursor to the end of the line== Properties =={| class="wikitable | [[#Align|Align]]|| [[#align|align]]|| {{Span|0}}        |-| bool|| [[#caret_blink|caret_blink]]|| {{Span|false}}    |-| float|| [[#caret_blink_speed|caret_blink_speed]]|| {{Span|0.65}}     |-| int|| [[#caret_position|caret_position]]|| {{Span|0}}        |-| bool|| [[#clear_button_enabled|clear_button_enabled]]|| {{Span|false}}    |-| bool|| [[#context_menu_enabled|context_menu_enabled]]|| {{Span|true}}     |-| bool|| [[#editable|editable]]|| {{Span|true}}     |-| bool|| [[#expand_to_text_length|expand_to_text_length]]|| {{Span|false}}    |-| [[#FocusMode|FocusMode]]|| focus_mode|| {{Span|2}} (parent override) |-| int|| [[#max_length|max_length]]|| {{Span|0}}        |-| [[#CursorShape|CursorShape]]|| mouse_default_cursor_shape|| {{Span|1}} (parent override) |-| float|| [[#placeholder_alpha|placeholder_alpha]]|| {{Span|0.6}}      |-| [[String GD|String]]|| [[#placeholder_text|placeholder_text]]|| {{Span|""}}       |-| [[Texture2D GD|Texture2D]]|| [[#right_icon|right_icon]]||              |-| bool|| [[#secret|secret]]|| {{Span|false}}    |-| [[String GD|String]]|| [[#secret_character|secret_character]]|| {{Span|"*"}}      |-| bool|| [[#selecting_enabled|selecting_enabled]]|| {{Span|true}}     |-| bool|| [[#shortcut_keys_enabled|shortcut_keys_enabled]]|| {{Span|true}}     |-| [[String GD|String]]|| [[#text|text]]|| {{Span|""}}       |}== Methods =={| class="wikitable | void|| [[#append_at_cursor|append_at_cursor]] '''(''' [[String GD|String]] text ''')'''      |-| void|| [[#clear|clear]] '''(''' ''')'''                                                             |-| void|| [[#deselect|deselect]] '''(''' ''')'''                                                       |-| [[PopupMenu GD|PopupMenu]]|| [[#get_menu|get_menu]] '''(''' ''')''' const                                                 |-| void|| [[#menu_option|menu_option]] '''(''' int option ''')'''                    |-| void|| [[#select|select]] '''(''' int from=0, int to=-1 ''')''' |-| void|| [[#select_all|select_all]] '''(''' ''')'''                                                   |}== Theme Properties =={| class="wikitable | [[Texture2D GD|Texture2D]]|| clear||                                |-| [[Color GD|Color]]|| clear_button_color|| Color( 0.88, 0.88, 0.88, 1 )   |-| [[Color GD|Color]]|| clear_button_color_pressed|| Color( 1, 1, 1, 1 )            |-| [[Color GD|Color]]|| cursor_color|| Color( 0.94, 0.94, 0.94, 1 )   |-| [[StyleBox GD|StyleBox]]|| focus||                                |-| [[Font GD|Font]]|| font||                                |-| [[Color GD|Color]]|| font_color|| Color( 0.88, 0.88, 0.88, 1 )   |-| [[Color GD|Color]]|| font_color_selected|| Color( 0, 0, 0, 1 )            |-| [[Color GD|Color]]|| font_color_uneditable|| Color( 0.88, 0.88, 0.88, 0.5 ) |-| int|| minimum_spaces|| 12                             |-| [[StyleBox GD|StyleBox]]|| normal||                                |-| [[StyleBox GD|StyleBox]]|| read_only||                                |-| [[Color GD|Color]]|| selection_color|| Color( 0.49, 0.49, 0.49, 1 )   |}== Signals ===== text_change_rejected ===*  '''text_change_rejected ( )'''Emitted when trying to append text that would overflow the [[#max_length|max_length]].=== text_changed ===*  '''text_changed''' '''(''' [[String GD|String]] new_text ''')'''Emitted when the text changes.=== text_entered ===*  '''text_entered''' '''(''' [[String GD|String]] new_text ''')'''Emitted when the user presses [[@GlobalScope GD#KEY_ENTER|@GlobalScope.KEY_ENTER()]] on the {{Span|LineEdit}}.== Enumerations ===== Align ====== ALIGN_LEFT ====== ALIGN_CENTER ====== ALIGN_RIGHT ====== ALIGN_FILL ===enum '''Align''':*  '''ALIGN_LEFT''' = '''0'''  Aligns the text on the left-hand side of the {{Span|LineEdit}}.*  '''ALIGN_CENTER''' = '''1'''  Centers the text in the middle of the {{Span|LineEdit}}.*  '''ALIGN_RIGHT''' = '''2'''  Aligns the text on the right-hand side of the {{Span|LineEdit}}.*  '''ALIGN_FILL''' = '''3'''  Stretches whitespaces to fit the {{Span|LineEdit}}'s width.=== MenuItems ====== MENU_CUT ====== MENU_COPY ====== MENU_PASTE ====== MENU_CLEAR ====== MENU_SELECT_ALL ====== MENU_UNDO ====== MENU_REDO ====== MENU_MAX ===enum '''MenuItems''':*  '''MENU_CUT''' = '''0'''  Cuts (copies and clears) the selected text.*  '''MENU_COPY''' = '''1'''  Copies the selected text.*  '''MENU_PASTE''' = '''2'''  Pastes the clipboard text over the selected text (or at the cursor's position).Non-printable escape characters are automatically stripped from the OS clipboard via [[String GD#strip_escapes|String.strip_escapes()]].*  '''MENU_CLEAR''' = '''3'''  Erases the whole {{Span|LineEdit}} text.*  '''MENU_SELECT_ALL''' = '''4'''  Selects the whole {{Span|LineEdit}} text.*  '''MENU_UNDO''' = '''5'''  Undoes the previous action.*  '''MENU_REDO''' = '''6'''  Reverse the last undo action.*  '''MENU_MAX''' = '''7'''  Represents the size of the [[#MenuItems|MenuItems]] enum.== Property Descriptions ===== align ===*  [[#Align|Align]] '''align'''{| class="wikitable | ''Default''|| {{Span|0}}            |-| ''Setter''|| set_align(value) |-| ''Getter''|| get_align()      |}Text alignment as defined in the [[#Align|Align]] enum.=== caret_blink ===*  bool '''caret_blink'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| cursor_set_blink_enabled(value) |-| ''Getter''|| cursor_get_blink_enabled()      |}If {{Span|true}}, the caret (visual cursor) blinks.=== caret_blink_speed ===*  float '''caret_blink_speed'''{| class="wikitable | ''Default''|| {{Span|0.65}}                      |-| ''Setter''|| cursor_set_blink_speed(value) |-| ''Getter''|| cursor_get_blink_speed()      |}Duration (in seconds) of a caret's blinking cycle.=== caret_position ===*  int '''caret_position'''{| class="wikitable | ''Default''|| {{Span|0}}                      |-| ''Setter''|| set_cursor_position(value) |-| ''Getter''|| get_cursor_position()      |}The cursor's position inside the {{Span|LineEdit}}. When set, the text may scroll to accommodate it.=== clear_button_enabled ===*  bool '''clear_button_enabled'''{| class="wikitable | ''Default''|| {{Span|false}}                       |-| ''Setter''|| set_clear_button_enabled(value) |-| ''Getter''|| is_clear_button_enabled()       |}If {{Span|true}}, the {{Span|LineEdit}} will show a clear button if {{Span|text}} is not empty, which can be used to clear the text quickly.=== context_menu_enabled ===*  bool '''context_menu_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                        |-| ''Setter''|| set_context_menu_enabled(value) |-| ''Getter''|| is_context_menu_enabled()       |}If {{Span|true}}, the context menu will appear when right-clicked.=== editable ===*  bool '''editable'''{| class="wikitable | ''Default''|| {{Span|true}}            |-| ''Setter''|| set_editable(value) |-| ''Getter''|| is_editable()       |}If {{Span|false}}, existing text cannot be modified and new text cannot be added.=== expand_to_text_length ===*  bool '''expand_to_text_length'''{| class="wikitable | ''Default''|| {{Span|false}}                        |-| ''Setter''|| set_expand_to_text_length(value) |-| ''Getter''|| get_expand_to_text_length()      |}If {{Span|true}}, the {{Span|LineEdit}} width will increase to stay longer than the [[#text|text]]. It will '''not''' compress if the [[#text|text]] is shortened.=== max_length ===*  int '''max_length'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_max_length(value) |-| ''Getter''|| get_max_length()      |}Maximum amount of characters that can be entered inside the {{Span|LineEdit}}. If {{Span|0}}, there is no limit.=== placeholder_alpha ===*  float '''placeholder_alpha'''{| class="wikitable | ''Default''|| {{Span|0.6}}                      |-| ''Setter''|| set_placeholder_alpha(value) |-| ''Getter''|| get_placeholder_alpha()      |}Opacity of the [[#placeholder_text|placeholder_text]]. From {{Span|0}} to {{Span|1}}.=== placeholder_text ===*  [[String GD|String]] '''placeholder_text'''{| class="wikitable | ''Default''|| {{Span|""}}                 |-| ''Setter''|| set_placeholder(value) |-| ''Getter''|| get_placeholder()      |}Text shown when the {{Span|LineEdit}} is empty. It is '''not''' the {{Span|LineEdit}}'s default value (see [[#text|text]]).=== right_icon ===*  [[Texture2D GD|Texture2D]] '''right_icon'''{| class="wikitable | ''Setter''|| set_right_icon(value) |-| ''Getter''|| get_right_icon()      |}Sets the icon that will appear in the right end of the {{Span|LineEdit}} if there's no [[#text|text]], or always, if [[#clear_button_enabled|clear_button_enabled]] is set to {{Span|false}}.=== secret ===*  bool '''secret'''{| class="wikitable | ''Default''|| {{Span|false}}         |-| ''Setter''|| set_secret(value) |-| ''Getter''|| is_secret()       |}If {{Span|true}}, every character is replaced with the secret character (see [[#secret_character|secret_character]]).=== secret_character ===*  [[String GD|String]] '''secret_character'''{| class="wikitable | ''Default''|| {{Span|"*"}}                     |-| ''Setter''|| set_secret_character(value) |-| ''Getter''|| get_secret_character()      |}The character to use to mask secret input (defaults to "\*"). Only a single character can be used as the secret character.=== selecting_enabled ===*  bool '''selecting_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                     |-| ''Setter''|| set_selecting_enabled(value) |-| ''Getter''|| is_selecting_enabled()       |}If {{Span|false}}, it's impossible to select the text using mouse nor keyboard.=== shortcut_keys_enabled ===*  bool '''shortcut_keys_enabled'''{| class="wikitable | ''Default''|| {{Span|true}}                         |-| ''Setter''|| set_shortcut_keys_enabled(value) |-| ''Getter''|| is_shortcut_keys_enabled()       |}If {{Span|false}}, using shortcuts will be disabled.=== text ===*  [[String GD|String]] '''text'''{| class="wikitable | ''Default''|| {{Span|""}}          |-| ''Setter''|| set_text(value) |-| ''Getter''|| get_text()      |}String value of the {{Span|LineEdit}}.'''Note:''' Changing text using this property won't emit the [[#text_changed|text_changed]] signal.== Method Descriptions ===== append_at_cursor ===*  void '''append_at_cursor''' '''(''' [[String GD|String]] text ''')'''Adds {{Span|text}} after the cursor. If the resulting value is longer than [[#max_length|max_length]], nothing happens.=== clear ===*  void '''clear ( )'''Erases the {{Span|LineEdit}} text.=== deselect ===*  void '''deselect ( )'''Clears the current selection.=== get_menu ===*  [[PopupMenu GD|PopupMenu]] '''get_menu ( )''' constReturns the [[PopupMenu GD|PopupMenu]] of this {{Span|LineEdit}}. By default, this menu is displayed when right-clicking on the {{Span|LineEdit}}.=== menu_option ===*  void '''menu_option''' '''(''' int option ''')'''Executes a given action as defined in the [[#MenuItems|MenuItems]] enum.=== select ===*  void '''select''' '''(''' int from=0, int to=-1 ''')'''Selects characters inside {{Span|LineEdit}} between {{Span|from}} and {{Span|to}}. By default, {{Span|from}} is at the beginning and {{Span|to}} at the end.::    text = "Welcome"    select() # Will select "Welcome".    select(4) # Will select "ome".    select(2, 5) # Will select "lco".=== select_all ===*  void '''select_all ( )'''Selects the whole [[String GD|String]].