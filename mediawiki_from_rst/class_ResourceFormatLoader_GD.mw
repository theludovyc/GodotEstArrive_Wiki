__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[ResourceFormatLoaderCrypto GD|ResourceFormatLoaderCrypto]]Loads a specific resource type from a file.== Description ==Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the [[ResourceLoader GD|ResourceLoader]] singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.Extending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with {{Span|class_name}} for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a [[ResourceFormatSaver GD|ResourceFormatSaver]].'''Note:''' You can also extend [[EditorImportPlugin GD|EditorImportPlugin]] if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends if the format is suitable or not for the final exported game. For example, it's better to import {{Span|.png}} textures as {{Span|.stex}} ([[StreamTexture GD|StreamTexture]]) first, so they can be loaded with better efficiency on the graphics card.== Methods =={| class="wikitable | void|| [[#get_dependencies|get_dependencies]] '''(''' [[String GD|String]] path, [[String GD|String]] add_types ''')''' virtual     |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_recognized_extensions|get_recognized_extensions]] '''(''' ''')''' virtual                                                           |-| [[String GD|String]]|| [[#get_resource_type|get_resource_type]] '''(''' [[String GD|String]] path ''')''' virtual                                          |-| bool|| [[#handles_type|handles_type]] '''(''' [[StringName GD|StringName]] typename ''')''' virtual                                        |-| [[Variant GD|Variant]]|| [[#load|load]] '''(''' [[String GD|String]] path, [[String GD|String]] original_path ''')''' virtual                         |-| int|| [[#rename_dependencies|rename_dependencies]] '''(''' [[String GD|String]] path, [[String GD|String]] renames ''')''' virtual |}== Method Descriptions ===== get_dependencies ===*  void '''get_dependencies''' '''(''' [[String GD|String]] path, [[String GD|String]] add_types ''')''' virtualIf implemented, gets the dependencies of a given resource. If {{Span|add_types}} is {{Span|true}}, paths should be appended {{Span|::TypeName}}, where {{Span|TypeName}} is the class name of the dependency.'''Note:''' Custom resource types defined by scripts aren't known by the [[ClassDB GD|ClassDB]], so you might just return {{Span|"Resource"}} for them.=== get_recognized_extensions ===*  [[PackedStringArray GD|PackedStringArray]] '''get_recognized_extensions ( )''' virtualGets the list of extensions for files this loader is able to read.=== get_resource_type ===*  [[String GD|String]] '''get_resource_type''' '''(''' [[String GD|String]] path ''')''' virtualGets the class name of the resource associated with the given path. If the loader cannot handle it, it should return {{Span|""}}.'''Note:''' Custom resource types defined by scripts aren't known by the [[ClassDB GD|ClassDB]], so you might just return {{Span|"Resource"}} for them.=== handles_type ===*  bool '''handles_type''' '''(''' [[StringName GD|StringName]] typename ''')''' virtualTells which resource class this loader can load.'''Note:''' Custom resource types defined by scripts aren't known by the [[ClassDB GD|ClassDB]], so you might just handle {{Span|"Resource"}} for them.=== load ===*  [[Variant GD|Variant]] '''load''' '''(''' [[String GD|String]] path, [[String GD|String]] original_path ''')''' virtualLoads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, {{Span|original_path}} will target the source file. Returns a [[Resource GD|Resource]] object on success, or an [[@GlobalScope GD#Error|Error]] constant in case of failure.=== rename_dependencies ===*  int '''rename_dependencies''' '''(''' [[String GD|String]] path, [[String GD|String]] renames ''')''' virtualIf implemented, renames dependencies within the given resource and saves it. {{Span|renames}} is a dictionary {{Span|{ String => String }}} mapping old dependency paths to new paths.Returns [[@GlobalScope GD#OK|@GlobalScope.OK()]] on success, or an [[@GlobalScope GD#Error|Error]] constant in case of failure.