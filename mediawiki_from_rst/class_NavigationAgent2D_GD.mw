__NOTOC__'''Inherits:''' [[Node GD|Node]] '''<''' [[Object GD|Object]]2D Agent used in navigation for collision avoidance.== Description ==2D Agent that is used in navigation to reach a location while avoiding static and dynamic obstacles. The dynamic obstacles are avoided using RVO collision avoidance. The agent needs navigation data to work correctly. This can be done by having the agent as a child of a [[Navigation2D GD|Navigation2D]] node, or using [[#set_navigation|set_navigation]]. {{Span|NavigationAgent2D}} is physics safe.== Properties =={| class="wikitable | int|| [[#max_neighbors|max_neighbors]]|| {{Span|10}}    |-| float|| [[#max_speed|max_speed]]|| {{Span|200.0}} |-| float|| [[#neighbor_dist|neighbor_dist]]|| {{Span|500.0}} |-| float|| [[#path_max_distance|path_max_distance]]|| {{Span|3.0}}   |-| float|| [[#radius|radius]]|| {{Span|10.0}}  |-| float|| [[#target_desired_distance|target_desired_distance]]|| {{Span|1.0}}   |-| float|| [[#time_horizon|time_horizon]]|| {{Span|20.0}}  |}== Methods =={| class="wikitable | float|| [[#distance_to_target|distance_to_target]] '''(''' ''')''' const                                    |-| [[Vector2 GD|Vector2]]|| [[#get_final_location|get_final_location]] '''(''' ''')'''                                          |-| [[PackedVector2Array GD|PackedVector2Array]]|| [[#get_nav_path|get_nav_path]] '''(''' ''')''' const                                                |-| int|| [[#get_nav_path_index|get_nav_path_index]] '''(''' ''')''' const                                    |-| [[Node GD|Node]]|| [[#get_navigation|get_navigation]] '''(''' ''')''' const                                            |-| [[Vector2 GD|Vector2]]|| [[#get_next_location|get_next_location]] '''(''' ''')'''                                            |-| [[Vector2 GD|Vector2]]|| [[#get_target_location|get_target_location]] '''(''' ''')''' const                                  |-| bool|| [[#is_navigation_finished|is_navigation_finished]] '''(''' ''')'''                                  |-| bool|| [[#is_target_reachable|is_target_reachable]] '''(''' ''')'''                                        |-| bool|| [[#is_target_reached|is_target_reached]] '''(''' ''')''' const                                      |-| void|| [[#set_navigation|set_navigation]] '''(''' [[Node GD|Node]] navigation ''')'''               |-| void|| [[#set_target_location|set_target_location]] '''(''' [[Vector2 GD|Vector2]] location ''')''' |-| void|| [[#set_velocity|set_velocity]] '''(''' [[Vector2 GD|Vector2]] velocity ''')'''               |}== Signals ===== navigation_finished ===*  '''navigation_finished ( )'''Notifies when the final location is reached.=== path_changed ===*  '''path_changed ( )'''Notifies when the navigation path changes.=== target_reached ===*  '''target_reached ( )'''Notifies when the player defined target, set with [[#set_target_location|set_target_location]], is reached.=== velocity_computed ===*  '''velocity_computed''' '''(''' [[Vector3 GD|Vector3]] safe_velocity ''')'''Notifies when the collision avoidance velocity is calculated. Emitted by [[#set_velocity|set_velocity]].== Property Descriptions ===== max_neighbors ===*  int '''max_neighbors'''{| class="wikitable | ''Default''|| {{Span|10}}                   |-| ''Setter''|| set_max_neighbors(value) |-| ''Getter''|| get_max_neighbors()      |}The maximum number of neighbors for the agent to consider.=== max_speed ===*  float '''max_speed'''{| class="wikitable | ''Default''|| {{Span|200.0}}            |-| ''Setter''|| set_max_speed(value) |-| ''Getter''|| get_max_speed()      |}The maximum speed that an agent can move.=== neighbor_dist ===*  float '''neighbor_dist'''{| class="wikitable | ''Default''|| {{Span|500.0}}                |-| ''Setter''|| set_neighbor_dist(value) |-| ''Getter''|| get_neighbor_dist()      |}The distance to search for other agents.=== path_max_distance ===*  float '''path_max_distance'''{| class="wikitable | ''Default''|| {{Span|3.0}}                      |-| ''Setter''|| set_path_max_distance(value) |-| ''Getter''|| get_path_max_distance()      |}The maximum distance the agent is allowed away from the ideal path to the final location. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path.=== radius ===*  float '''radius'''{| class="wikitable | ''Default''|| {{Span|10.0}}          |-| ''Setter''|| set_radius(value) |-| ''Getter''|| get_radius()      |}The radius of the agent.=== target_desired_distance ===*  float '''target_desired_distance'''{| class="wikitable | ''Default''|| {{Span|1.0}}                            |-| ''Setter''|| set_target_desired_distance(value) |-| ''Getter''|| get_target_desired_distance()      |}The distance threshold before a target is considered to be reached. This will allow an agent to not have to hit a point on the path exactly, but in the area.=== time_horizon ===*  float '''time_horizon'''{| class="wikitable | ''Default''|| {{Span|20.0}}                |-| ''Setter''|| set_time_horizon(value) |-| ''Getter''|| get_time_horizon()      |}The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithim, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but less freedom in choosing its velocities. Must be positive.== Method Descriptions ===== distance_to_target ===*  float '''distance_to_target ( )''' constReturns the distance to the target location, using the agent's global position. The user must set the target location with [[#set_target_location|set_target_location]] in order for this to be accurate.=== get_final_location ===*  [[Vector2 GD|Vector2]] '''get_final_location ( )'''Returns the reachable final location in global coordinates. This can change if the navigation path is altered in any way.=== get_nav_path ===*  [[PackedVector2Array GD|PackedVector2Array]] '''get_nav_path ( )''' constReturns the path from start to finish in global coordinates.=== get_nav_path_index ===*  int '''get_nav_path_index ( )''' constReturns which index the agent is currently on in the navigation path's [[PackedVector2Array GD|PackedVector2Array]].=== get_navigation ===*  [[Node GD|Node]] '''get_navigation ( )''' constReturns the [[Navigation2D GD|Navigation2D]] node that the agent is using for its navigation system.=== get_next_location ===*  [[Vector2 GD|Vector2]] '''get_next_location ( )'''Returns a [[Vector2 GD|Vector2]] in global coordinates, that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent.=== get_target_location ===*  [[Vector2 GD|Vector2]] '''get_target_location ( )''' constReturns the user defined [[Vector2 GD|Vector2]] after setting the target location.=== is_navigation_finished ===*  bool '''is_navigation_finished ( )'''Returns true if the navigation path's final location has been reached.=== is_target_reachable ===*  bool '''is_target_reachable ( )'''Returns true if the target location is reachable. The target location is set using [[#set_target_location|set_target_location]].=== is_target_reached ===*  bool '''is_target_reached ( )''' constReturns true if the target location is reached. The target location is set using [[#set_target_location|set_target_location]]. It may not always be possible to reach the target location. It should always be possible to reach the final location though. See [[#get_final_location|get_final_location]].=== set_navigation ===*  void '''set_navigation''' '''(''' [[Node GD|Node]] navigation ''')'''Sets the [[Navigation2D GD|Navigation2D]] node used by the agent. Useful when you don't want to make the agent a child of a [[Navigation2D GD|Navigation2D]] node.=== set_target_location ===*  void '''set_target_location''' '''(''' [[Vector2 GD|Vector2]] location ''')'''Sets the user desired final location. This will clear the current navigation path.=== set_velocity ===*  void '''set_velocity''' '''(''' [[Vector2 GD|Vector2]] velocity ''')'''Sends the passed in velocity to the collision avoidance algorithm. It will adjust the velocity to avoid collisions. Once the adjustment to the velocity is complete, it will emit the [[#velocity_computed|velocity_computed]] signal.