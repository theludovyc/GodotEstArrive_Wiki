__NOTOC__'''Inherits:''' [[CanvasItem GD|CanvasItem]] '''<''' [[Node GD|Node]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[BaseButton GD|BaseButton]], [[ColorRect GD|ColorRect]], [[Container GD|Container]], [[GraphEdit GD|GraphEdit]], [[ItemList GD|ItemList]], [[Label GD|Label]], [[LineEdit GD|LineEdit]], [[NinePatchRect GD|NinePatchRect]], [[Panel GD|Panel]], [[Popup GD|Popup]], [[Range GD|Range]], [[ReferenceRect GD|ReferenceRect]], [[RichTextLabel GD|RichTextLabel]], [[Separator GD|Separator]], [[Tabs GD|Tabs]], [[TextEdit GD|TextEdit]], [[TextureRect GD|TextureRect]], [[Tree GD|Tree]], [[VideoPlayer GD|VideoPlayer]]All user interface nodes inherit from Control. A control's anchors and margins adapt its position and size relative to its parent.== Description ==Base class for all UI-related nodes. {{Span|Control}} features a bounding rectangle that defines its extents, an anchor position relative to its parent control or the current viewport, and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.For more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from {{Span|Control}} and [[Container GD|Container]] nodes.'''User Interface nodes and input'''Godot sends input events to the scene's root node first, by calling [[Node GD#_input|_input]]. [[Node GD#_input|_input]] forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls [[MainLoop GD#_input_event|_input_event]]. Call [[#accept_event|accept_event]] so no other node receives the event. Once you accepted an input, it becomes handled so [[Node GD#_unhandled_input|_unhandled_input]] will not process it.Only one {{Span|Control}} node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call [[#grab_focus|grab_focus]]. {{Span|Control}} nodes lose focus when another node grabs it, or if you hide the node in focus.Sets [[#mouse_filter|mouse_filter]] to [[Control GD#MOUSE_FILTER_IGNORE|MOUSE_FILTER_IGNORE]] to tell a {{Span|Control}} node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.[[Theme GD|Theme]] resources change the Control's appearance. If you change the [[Theme GD|Theme]] on a {{Span|Control}} node, it affects all of its children. To override some of the theme's parameters, call one of the {{Span|add_*_override}} methods, like [[#add_font_override|add_font_override]]. You can override the theme with the inspector.== Tutorials ==*  :doc:`../tutorials/gui/index`*  :doc:`../tutorials/2d/custom_drawing_in_2d`== Properties =={| class="wikitable | float|| [[#anchor_bottom|anchor_bottom]]|| {{Span|0.0}}             |-| float|| [[#anchor_left|anchor_left]]|| {{Span|0.0}}             |-| float|| [[#anchor_right|anchor_right]]|| {{Span|0.0}}             |-| float|| [[#anchor_top|anchor_top]]|| {{Span|0.0}}             |-| [[#FocusMode|FocusMode]]|| [[#focus_mode|focus_mode]]|| {{Span|0}}               |-| [[NodePath GD|NodePath]]|| [[#focus_neighbour_bottom|focus_neighbour_bottom]]|| {{Span|NodePath("")}}    |-| [[NodePath GD|NodePath]]|| [[#focus_neighbour_left|focus_neighbour_left]]|| {{Span|NodePath("")}}    |-| [[NodePath GD|NodePath]]|| [[#focus_neighbour_right|focus_neighbour_right]]|| {{Span|NodePath("")}}    |-| [[NodePath GD|NodePath]]|| [[#focus_neighbour_top|focus_neighbour_top]]|| {{Span|NodePath("")}}    |-| [[NodePath GD|NodePath]]|| [[#focus_next|focus_next]]|| {{Span|NodePath("")}}    |-| [[NodePath GD|NodePath]]|| [[#focus_previous|focus_previous]]|| {{Span|NodePath("")}}    |-| [[#GrowDirection|GrowDirection]]|| [[#grow_horizontal|grow_horizontal]]|| {{Span|1}}               |-| [[#GrowDirection|GrowDirection]]|| [[#grow_vertical|grow_vertical]]|| {{Span|1}}               |-| [[String GD|String]]|| [[#hint_tooltip|hint_tooltip]]|| {{Span|""}}              |-| float|| [[#margin_bottom|margin_bottom]]|| {{Span|0.0}}             |-| float|| [[#margin_left|margin_left]]|| {{Span|0.0}}             |-| float|| [[#margin_right|margin_right]]|| {{Span|0.0}}             |-| float|| [[#margin_top|margin_top]]|| {{Span|0.0}}             |-| [[#CursorShape|CursorShape]]|| [[#mouse_default_cursor_shape|mouse_default_cursor_shape]]|| {{Span|0}}               |-| [[#MouseFilter|MouseFilter]]|| [[#mouse_filter|mouse_filter]]|| {{Span|0}}               |-| bool|| [[#rect_clip_content|rect_clip_content]]|| {{Span|false}}           |-| [[Vector2 GD|Vector2]]|| [[#rect_global_position|rect_global_position]]||                     |-| [[Vector2 GD|Vector2]]|| [[#rect_min_size|rect_min_size]]|| {{Span|Vector2( 0, 0 )}} |-| [[Vector2 GD|Vector2]]|| [[#rect_pivot_offset|rect_pivot_offset]]|| {{Span|Vector2( 0, 0 )}} |-| [[Vector2 GD|Vector2]]|| [[#rect_position|rect_position]]|| {{Span|Vector2( 0, 0 )}} |-| float|| [[#rect_rotation|rect_rotation]]|| {{Span|0.0}}             |-| [[Vector2 GD|Vector2]]|| [[#rect_scale|rect_scale]]|| {{Span|Vector2( 1, 1 )}} |-| [[Vector2 GD|Vector2]]|| [[#rect_size|rect_size]]|| {{Span|Vector2( 0, 0 )}} |-| int|| [[#size_flags_horizontal|size_flags_horizontal]]|| {{Span|1}}               |-| float|| [[#size_flags_stretch_ratio|size_flags_stretch_ratio]]|| {{Span|1.0}}             |-| int|| [[#size_flags_vertical|size_flags_vertical]]|| {{Span|1}}               |-| [[Theme GD|Theme]]|| [[#theme|theme]]||                     |}== Methods =={| class="wikitable | bool|| [[Control GD#_clips_input|_clips_input]] '''(''' ''')''' virtual                                                                                                                                                                                         |-| [[Vector2 GD|Vector2]]|| [[Control GD#_get_minimum_size|_get_minimum_size]] '''(''' ''')''' virtual                                                                                                                                                                               |-| void|| [[Control GD#_gui_input|_gui_input]] '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtual                                                                                                                                                   |-| [[Object GD|Object]]|| [[Control GD#_make_custom_tooltip|_make_custom_tooltip]] '''(''' [[String GD|String]] for_text ''')''' virtual                                                                                                                                    |-| void|| [[#accept_event|accept_event]] '''(''' ''')'''                                                                                                                                                                                                 |-| void|| [[#add_color_override|add_color_override]] '''(''' [[StringName GD|StringName]] name, [[Color GD|Color]] color ''')'''                                                                                                           |-| void|| [[#add_constant_override|add_constant_override]] '''(''' [[StringName GD|StringName]] name, int constant ''')'''                                                                                                      |-| void|| [[#add_font_override|add_font_override]] '''(''' [[StringName GD|StringName]] name, [[Font GD|Font]] font ''')'''                                                                                                                |-| void|| [[#add_icon_override|add_icon_override]] '''(''' [[StringName GD|StringName]] name, [[Texture2D GD|Texture2D]] texture ''')'''                                                                                                   |-| void|| [[#add_shader_override|add_shader_override]] '''(''' [[StringName GD|StringName]] name, [[Shader GD|Shader]] shader ''')'''                                                                                                      |-| void|| [[#add_stylebox_override|add_stylebox_override]] '''(''' [[StringName GD|StringName]] name, [[StyleBox GD|StyleBox]] stylebox ''')'''                                                                                            |-| bool|| [[#can_drop_data|can_drop_data]] '''(''' [[Vector2 GD|Vector2]] position, [[Variant GD|Variant]] data ''')''' virtual                                                                                                            |-| void|| [[#drop_data|drop_data]] '''(''' [[Vector2 GD|Vector2]] position, [[Variant GD|Variant]] data ''')''' virtual                                                                                                                    |-| void|| [[#force_drag|force_drag]] '''(''' [[Variant GD|Variant]] data, [[Control GD|Control]] preview ''')'''                                                                                                                           |-| float|| [[#get_anchor|get_anchor]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' const                                                                                                                                                |-| [[Vector2 GD|Vector2]]|| [[#get_begin|get_begin]] '''(''' ''')''' const                                                                                                                                                                                                 |-| [[Color GD|Color]]|| [[#get_color|get_color]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                           |-| [[Vector2 GD|Vector2]]|| [[#get_combined_minimum_size|get_combined_minimum_size]] '''(''' ''')''' const                                                                                                                                                                 |-| int|| [[#get_constant|get_constant]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                     |-| [[#CursorShape|CursorShape]]|| [[#get_cursor_shape|get_cursor_shape]] '''(''' [[Vector2 GD|Vector2]] position=Vector2( 0, 0 ) ''')''' const                                                                                                                            |-| [[Variant GD|Variant]]|| [[#get_drag_data|get_drag_data]] '''(''' [[Vector2 GD|Vector2]] position ''')''' virtual                                                                                                                                                |-| [[Vector2 GD|Vector2]]|| [[#get_end|get_end]] '''(''' ''')''' const                                                                                                                                                                                                     |-| [[NodePath GD|NodePath]]|| [[#get_focus_neighbour|get_focus_neighbour]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' const                                                                                                                              |-| [[Control GD|Control]]|| [[#get_focus_owner|get_focus_owner]] '''(''' ''')''' const                                                                                                                                                                                     |-| [[Font GD|Font]]|| [[#get_font|get_font]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                             |-| [[Rect2 GD|Rect2]]|| [[#get_global_rect|get_global_rect]] '''(''' ''')''' const                                                                                                                                                                                     |-| [[Texture2D GD|Texture2D]]|| [[#get_icon|get_icon]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                             |-| float|| [[#get_margin|get_margin]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' const                                                                                                                                                |-| [[Vector2 GD|Vector2]]|| [[#get_minimum_size|get_minimum_size]] '''(''' ''')''' const                                                                                                                                                                                   |-| [[Vector2 GD|Vector2]]|| [[#get_parent_area_size|get_parent_area_size]] '''(''' ''')''' const                                                                                                                                                                           |-| [[Control GD|Control]]|| [[#get_parent_control|get_parent_control]] '''(''' ''')''' const                                                                                                                                                                               |-| [[Rect2 GD|Rect2]]|| [[#get_rect|get_rect]] '''(''' ''')''' const                                                                                                                                                                                                   |-| float|| [[#get_rotation|get_rotation]] '''(''' ''')''' const                                                                                                                                                                                           |-| [[StyleBox GD|StyleBox]]|| [[#get_stylebox|get_stylebox]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                     |-| [[String GD|String]]|| [[#get_tooltip|get_tooltip]] '''(''' [[Vector2 GD|Vector2]] at_position=Vector2( 0, 0 ) ''')''' const                                                                                                                                   |-| void|| [[#grab_click_focus|grab_click_focus]] '''(''' ''')'''                                                                                                                                                                                         |-| void|| [[#grab_focus|grab_focus]] '''(''' ''')'''                                                                                                                                                                                                     |-| bool|| [[#has_color|has_color]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                           |-| bool|| [[#has_color_override|has_color_override]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                      |-| bool|| [[#has_constant|has_constant]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                     |-| bool|| [[#has_constant_override|has_constant_override]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                |-| bool|| [[#has_focus|has_focus]] '''(''' ''')''' const                                                                                                                                                                                                 |-| bool|| [[#has_font|has_font]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                             |-| bool|| [[#has_font_override|has_font_override]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                        |-| bool|| [[#has_icon|has_icon]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                             |-| bool|| [[#has_icon_override|has_icon_override]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                        |-| bool|| [[#has_point|has_point]] '''(''' [[Vector2 GD|Vector2]] point ''')''' virtual                                                                                                                                                           |-| bool|| [[#has_shader_override|has_shader_override]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                    |-| bool|| [[#has_stylebox|has_stylebox]] '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' const                                                                                                     |-| bool|| [[#has_stylebox_override|has_stylebox_override]] '''(''' [[StringName GD|StringName]] name ''')''' const                                                                                                                                |-| void|| [[#minimum_size_changed|minimum_size_changed]] '''(''' ''')'''                                                                                                                                                                                 |-| void|| [[#release_focus|release_focus]] '''(''' ''')'''                                                                                                                                                                                               |-| void|| [[#set_anchor|set_anchor]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float anchor, bool keep_margin=false, bool push_opposite_anchor=true ''')'''                      |-| void|| [[#set_anchor_and_margin|set_anchor_and_margin]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float anchor, float offset, bool push_opposite_anchor=false ''')'''        |-| void|| [[#set_anchors_and_margins_preset|set_anchors_and_margins_preset]] '''(''' [[#LayoutPreset|LayoutPreset]] preset, [[#LayoutPresetMode|LayoutPresetMode]] resize_mode=0, int margin=0 ''')''' |-| void|| [[#set_anchors_preset|set_anchors_preset]] '''(''' [[#LayoutPreset|LayoutPreset]] preset, bool keep_margins=false ''')'''                                                                                   |-| void|| [[#set_begin|set_begin]] '''(''' [[Vector2 GD|Vector2]] position ''')'''                                                                                                                                                                |-| void|| [[#set_drag_forwarding|set_drag_forwarding]] '''(''' [[Control GD|Control]] target ''')'''                                                                                                                                              |-| void|| [[#set_drag_preview|set_drag_preview]] '''(''' [[Control GD|Control]] control ''')'''                                                                                                                                                   |-| void|| [[#set_end|set_end]] '''(''' [[Vector2 GD|Vector2]] position ''')'''                                                                                                                                                                    |-| void|| [[#set_focus_neighbour|set_focus_neighbour]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin, [[NodePath GD|NodePath]] neighbour ''')'''                                                                                         |-| void|| [[#set_global_position|set_global_position]] '''(''' [[Vector2 GD|Vector2]] position, bool keep_margins=false ''')'''                                                                                                |-| void|| [[#set_margin|set_margin]] '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float offset ''')'''                                                                                                                    |-| void|| [[#set_margins_preset|set_margins_preset]] '''(''' [[#LayoutPreset|LayoutPreset]] preset, [[#LayoutPresetMode|LayoutPresetMode]] resize_mode=0, int margin=0 ''')'''                         |-| void|| [[#set_position|set_position]] '''(''' [[Vector2 GD|Vector2]] position, bool keep_margins=false ''')'''                                                                                                              |-| void|| [[#set_rotation|set_rotation]] '''(''' float radians ''')'''                                                                                                                                                               |-| void|| [[#set_size|set_size]] '''(''' [[Vector2 GD|Vector2]] size, bool keep_margins=false ''')'''                                                                                                                          |-| void|| [[#show_modal|show_modal]] '''(''' bool exclusive=false ''')'''                                                                                                                                                             |-| void|| [[#warp_mouse|warp_mouse]] '''(''' [[Vector2 GD|Vector2]] to_position ''')'''                                                                                                                                                           |}== Signals ===== focus_entered ===*  '''focus_entered ( )'''Emitted when the node gains keyboard focus.=== focus_exited ===*  '''focus_exited ( )'''Emitted when the node loses keyboard focus.=== gui_input ===*  '''gui_input''' '''(''' [[InputEvent GD|InputEvent]] event ''')'''Emitted when the node receives an [[InputEvent GD|InputEvent]].=== minimum_size_changed ===*  '''minimum_size_changed ( )'''Emitted when the node's minimum size changes.=== modal_closed ===*  '''modal_closed ( )'''Emitted when a modal {{Span|Control}} is closed. See [[#show_modal|show_modal]].=== mouse_entered ===*  '''mouse_entered ( )'''Emitted when the mouse enters the control's {{Span|Rect}} area, provided its [[#mouse_filter|mouse_filter]] lets the event reach it.=== mouse_exited ===*  '''mouse_exited ( )'''Emitted when the mouse leaves the control's {{Span|Rect}} area, provided its [[#mouse_filter|mouse_filter]] lets the event reach it.=== resized ===*  '''resized ( )'''Emitted when the control changes size.=== size_flags_changed ===*  '''size_flags_changed ( )'''Emitted when one of the size flags changes. See [[#size_flags_horizontal|size_flags_horizontal]] and [[#size_flags_vertical|size_flags_vertical]].== Enumerations ===== FocusMode ====== FOCUS_NONE ====== FOCUS_CLICK ====== FOCUS_ALL ===enum '''FocusMode''':*  '''FOCUS_NONE''' = '''0'''  The node cannot grab focus. Use with [[#focus_mode|focus_mode]].*  '''FOCUS_CLICK''' = '''1'''  The node can only grab focus on mouse clicks. Use with [[#focus_mode|focus_mode]].*  '''FOCUS_ALL''' = '''2'''  The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with [[#focus_mode|focus_mode]].=== CursorShape ====== CURSOR_ARROW ====== CURSOR_IBEAM ====== CURSOR_POINTING_HAND ====== CURSOR_CROSS ====== CURSOR_WAIT ====== CURSOR_BUSY ====== CURSOR_DRAG ====== CURSOR_CAN_DROP ====== CURSOR_FORBIDDEN ====== CURSOR_VSIZE ====== CURSOR_HSIZE ====== CURSOR_BDIAGSIZE ====== CURSOR_FDIAGSIZE ====== CURSOR_MOVE ====== CURSOR_VSPLIT ====== CURSOR_HSPLIT ====== CURSOR_HELP ===enum '''CursorShape''':*  '''CURSOR_ARROW''' = '''0'''  Show the system's arrow mouse cursor when the user hovers the node. Use with [[#mouse_default_cursor_shape|mouse_default_cursor_shape]].*  '''CURSOR_IBEAM''' = '''1'''  Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text.*  '''CURSOR_POINTING_HAND''' = '''2'''  Show the system's pointing hand mouse cursor when the user hovers the node.*  '''CURSOR_CROSS''' = '''3'''  Show the system's cross mouse cursor when the user hovers the node.*  '''CURSOR_WAIT''' = '''4'''  Show the system's wait mouse cursor, often an hourglass, when the user hovers the node.*  '''CURSOR_BUSY''' = '''5'''  Show the system's busy mouse cursor when the user hovers the node. Often an hourglass.*  '''CURSOR_DRAG''' = '''6'''  Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock.*  '''CURSOR_CAN_DROP''' = '''7'''  Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock.*  '''CURSOR_FORBIDDEN''' = '''8'''  Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle.*  '''CURSOR_VSIZE''' = '''9'''  Show the system's vertical resize mouse cursor when the user hovers the node. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically.*  '''CURSOR_HSIZE''' = '''10'''  Show the system's horizontal resize mouse cursor when the user hovers the node. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.*  '''CURSOR_BDIAGSIZE''' = '''11'''  Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.*  '''CURSOR_FDIAGSIZE''' = '''12'''  Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of [[Control GD#CURSOR_BDIAGSIZE|CURSOR_BDIAGSIZE]]. It tells the user they can resize the window or the panel both horizontally and vertically.*  '''CURSOR_MOVE''' = '''13'''  Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely.*  '''CURSOR_VSPLIT''' = '''14'''  Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as [[Control GD#CURSOR_VSIZE|CURSOR_VSIZE]].*  '''CURSOR_HSPLIT''' = '''15'''  Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as [[Control GD#CURSOR_HSIZE|CURSOR_HSIZE]].*  '''CURSOR_HELP''' = '''16'''  Show the system's help mouse cursor when the user hovers the node, a question mark.=== LayoutPreset ====== PRESET_TOP_LEFT ====== PRESET_TOP_RIGHT ====== PRESET_BOTTOM_LEFT ====== PRESET_BOTTOM_RIGHT ====== PRESET_CENTER_LEFT ====== PRESET_CENTER_TOP ====== PRESET_CENTER_RIGHT ====== PRESET_CENTER_BOTTOM ====== PRESET_CENTER ====== PRESET_LEFT_WIDE ====== PRESET_TOP_WIDE ====== PRESET_RIGHT_WIDE ====== PRESET_BOTTOM_WIDE ====== PRESET_VCENTER_WIDE ====== PRESET_HCENTER_WIDE ====== PRESET_WIDE ===enum '''LayoutPreset''':*  '''PRESET_TOP_LEFT''' = '''0'''  Snap all 4 anchors to the top-left of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_TOP_RIGHT''' = '''1'''  Snap all 4 anchors to the top-right of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_BOTTOM_LEFT''' = '''2'''  Snap all 4 anchors to the bottom-left of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_BOTTOM_RIGHT''' = '''3'''  Snap all 4 anchors to the bottom-right of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_CENTER_LEFT''' = '''4'''  Snap all 4 anchors to the center of the left edge of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_CENTER_TOP''' = '''5'''  Snap all 4 anchors to the center of the top edge of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_CENTER_RIGHT''' = '''6'''  Snap all 4 anchors to the center of the right edge of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_CENTER_BOTTOM''' = '''7'''  Snap all 4 anchors to the center of the bottom edge of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_CENTER''' = '''8'''  Snap all 4 anchors to the center of the parent control's bounds. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_LEFT_WIDE''' = '''9'''  Snap all 4 anchors to the left edge of the parent control. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_TOP_WIDE''' = '''10'''  Snap all 4 anchors to the top edge of the parent control. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_RIGHT_WIDE''' = '''11'''  Snap all 4 anchors to the right edge of the parent control. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_BOTTOM_WIDE''' = '''12'''  Snap all 4 anchors to the bottom edge of the parent control. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_VCENTER_WIDE''' = '''13'''  Snap all 4 anchors to a vertical line that cuts the parent control in half. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_HCENTER_WIDE''' = '''14'''  Snap all 4 anchors to a horizontal line that cuts the parent control in half. Use with [[#set_anchors_preset|set_anchors_preset]].*  '''PRESET_WIDE''' = '''15'''  Snap all 4 anchors to the respective corners of the parent control. Set all 4 margins to 0 after you applied this preset and the {{Span|Control}} will fit its parent control. This is equivalent to the "Full Rect" layout option in the editor. Use with [[#set_anchors_preset|set_anchors_preset]].=== LayoutPresetMode ====== PRESET_MODE_MINSIZE ====== PRESET_MODE_KEEP_WIDTH ====== PRESET_MODE_KEEP_HEIGHT ====== PRESET_MODE_KEEP_SIZE ===enum '''LayoutPresetMode''':*  '''PRESET_MODE_MINSIZE''' = '''0'''  The control will be resized to its minimum size.*  '''PRESET_MODE_KEEP_WIDTH''' = '''1'''  The control's width will not change.*  '''PRESET_MODE_KEEP_HEIGHT''' = '''2'''  The control's height will not change.*  '''PRESET_MODE_KEEP_SIZE''' = '''3'''  The control's size will not change.=== SizeFlags ====== SIZE_FILL ====== SIZE_EXPAND ====== SIZE_EXPAND_FILL ====== SIZE_SHRINK_CENTER ====== SIZE_SHRINK_END ===enum '''SizeFlags''':*  '''SIZE_FILL''' = '''1'''  Tells the parent [[Container GD|Container]] to expand the bounds of this node to fill all the available space without pushing any other node. Use with [[#size_flags_horizontal|size_flags_horizontal]] and [[#size_flags_vertical|size_flags_vertical]].*  '''SIZE_EXPAND''' = '''2'''  Tells the parent [[Container GD|Container]] to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See [[#size_flags_stretch_ratio|size_flags_stretch_ratio]]. Use with [[#size_flags_horizontal|size_flags_horizontal]] and [[#size_flags_vertical|size_flags_vertical]].*  '''SIZE_EXPAND_FILL''' = '''3'''  Sets the node's size flags to both fill and expand. See the 2 constants above for more information.*  '''SIZE_SHRINK_CENTER''' = '''4'''  Tells the parent [[Container GD|Container]] to center the node in itself. It centers the control based on its bounding box, so it doesn't work with the fill or expand size flags. Use with [[#size_flags_horizontal|size_flags_horizontal]] and [[#size_flags_vertical|size_flags_vertical]].*  '''SIZE_SHRINK_END''' = '''8'''  Tells the parent [[Container GD|Container]] to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with [[#size_flags_horizontal|size_flags_horizontal]] and [[#size_flags_vertical|size_flags_vertical]].=== MouseFilter ====== MOUSE_FILTER_STOP ====== MOUSE_FILTER_PASS ====== MOUSE_FILTER_IGNORE ===enum '''MouseFilter''':*  '''MOUSE_FILTER_STOP''' = '''0'''  The control will receive mouse button input events through [[Control GD#_gui_input|_gui_input]] if clicked on. And the control will receive the [[#mouse_entered|mouse_entered]] and [[#mouse_exited|mouse_exited]] signals. These events are automatically marked as handled, and they will not propagate further to other controls. This also results in blocking signals in other controls.*  '''MOUSE_FILTER_PASS''' = '''1'''  The control will receive mouse button input events through [[Control GD#_gui_input|_gui_input]] if clicked on. And the control will receive the [[#mouse_entered|mouse_entered]] and [[#mouse_exited|mouse_exited]] signals. If this control does not handle the event, the parent control (if any) will be considered, and so on until there is no more parent control to potentially handle it. This also allows signals to fire in other controls. Even if no control handled it at all, the event will still be handled automatically, so unhandled input will not be fired.*  '''MOUSE_FILTER_IGNORE''' = '''2'''  The control will not receive mouse button input events through [[Control GD#_gui_input|_gui_input]]. The control will also not receive the [[#mouse_entered|mouse_entered]] nor [[#mouse_exited|mouse_exited]] signals. This will not block other controls from receiving these events or firing the signals. Ignored events will not be handled automatically.=== GrowDirection ====== GROW_DIRECTION_BEGIN ====== GROW_DIRECTION_END ====== GROW_DIRECTION_BOTH ===enum '''GrowDirection''':*  '''GROW_DIRECTION_BEGIN''' = '''0'''  The control will grow to the left or top to make up if its minimum size is changed to be greater than its current size on the respective axis.*  '''GROW_DIRECTION_END''' = '''1'''  The control will grow to the right or bottom to make up if its minimum size is changed to be greater than its current size on the respective axis.*  '''GROW_DIRECTION_BOTH''' = '''2'''  The control will grow in both directions equally to make up if its minimum size is changed to be greater than its current size.=== Anchor ====== ANCHOR_BEGIN ====== ANCHOR_END ===enum '''Anchor''':*  '''ANCHOR_BEGIN''' = '''0'''  Snaps one of the 4 anchor's sides to the origin of the node's {{Span|Rect}}, in the top left. Use it with one of the {{Span|anchor_*}} member variables, like [[#anchor_left|anchor_left]]. To change all 4 anchors at once, use [[#set_anchors_preset|set_anchors_preset]].*  '''ANCHOR_END''' = '''1'''  Snaps one of the 4 anchor's sides to the end of the node's {{Span|Rect}}, in the bottom right. Use it with one of the {{Span|anchor_*}} member variables, like [[#anchor_left|anchor_left]]. To change all 4 anchors at once, use [[#set_anchors_preset|set_anchors_preset]].== Constants ===== NOTIFICATION_RESIZED ====== NOTIFICATION_MOUSE_ENTER ====== NOTIFICATION_MOUSE_EXIT ====== NOTIFICATION_FOCUS_ENTER ====== NOTIFICATION_FOCUS_EXIT ====== NOTIFICATION_THEME_CHANGED ====== NOTIFICATION_MODAL_CLOSE ====== NOTIFICATION_SCROLL_BEGIN ====== NOTIFICATION_SCROLL_END ===*  '''NOTIFICATION_RESIZED''' = '''40'''  Sent when the node changes size. Use [[#rect_size|rect_size]] to get the new size.*  '''NOTIFICATION_MOUSE_ENTER''' = '''41'''  Sent when the mouse pointer enters the node.*  '''NOTIFICATION_MOUSE_EXIT''' = '''42'''  Sent when the mouse pointer exits the node.*  '''NOTIFICATION_FOCUS_ENTER''' = '''43'''  Sent when the node grabs focus.*  '''NOTIFICATION_FOCUS_EXIT''' = '''44'''  Sent when the node loses focus.*  '''NOTIFICATION_THEME_CHANGED''' = '''45'''  Sent when the node's [[#theme|theme]] changes, right before Godot redraws the control. Happens when you call one of the {{Span|add_*_override}} methods.*  '''NOTIFICATION_MODAL_CLOSE''' = '''46'''  Sent when an open modal dialog closes. See [[#show_modal|show_modal]].*  '''NOTIFICATION_SCROLL_BEGIN''' = '''47'''  Sent when this node is inside a [[ScrollContainer GD|ScrollContainer]] which has begun being scrolled.*  '''NOTIFICATION_SCROLL_END''' = '''48'''  Sent when this node is inside a [[ScrollContainer GD|ScrollContainer]] which has stopped being scrolled.== Property Descriptions ===== anchor_bottom ===*  float '''anchor_bottom'''{| class="wikitable | ''Default''|| {{Span|0.0}}      |-| ''Getter''|| get_anchor() |}Anchors the bottom edge of the node to the origin, the center, or the end of its parent control. It changes how the bottom margin updates when the node moves or changes size. You can use one of the [[#Anchor|Anchor]] constants for convenience.=== anchor_left ===*  float '''anchor_left'''{| class="wikitable | ''Default''|| {{Span|0.0}}      |-| ''Getter''|| get_anchor() |}Anchors the left edge of the node to the origin, the center or the end of its parent control. It changes how the left margin updates when the node moves or changes size. You can use one of the [[#Anchor|Anchor]] constants for convenience.=== anchor_right ===*  float '''anchor_right'''{| class="wikitable | ''Default''|| {{Span|0.0}}      |-| ''Getter''|| get_anchor() |}Anchors the right edge of the node to the origin, the center or the end of its parent control. It changes how the right margin updates when the node moves or changes size. You can use one of the [[#Anchor|Anchor]] constants for convenience.=== anchor_top ===*  float '''anchor_top'''{| class="wikitable | ''Default''|| {{Span|0.0}}      |-| ''Getter''|| get_anchor() |}Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top margin updates when the node moves or changes size. You can use  one of the [[#Anchor|Anchor]] constants for convenience.=== focus_mode ===*  [[#FocusMode|FocusMode]] '''focus_mode'''{| class="wikitable | ''Default''|| {{Span|0}}                 |-| ''Setter''|| set_focus_mode(value) |-| ''Getter''|| get_focus_mode()      |}The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.=== focus_neighbour_bottom ===*  [[NodePath GD|NodePath]] '''focus_neighbour_bottom'''{| class="wikitable | ''Default''|| {{Span|NodePath("")}}           |-| ''Setter''|| set_focus_neighbour(value) |-| ''Getter''|| get_focus_neighbour()      |}Tells Godot which node it should give keyboard focus to if the user presses the down arrow on the keyboard or down on a gamepad by default. You can change the key by editing the {{Span|ui_down}} input action. The node must be a {{Span|Control}}. If this property is not set, Godot will give focus to the closest {{Span|Control}} to the bottom of this one.=== focus_neighbour_left ===*  [[NodePath GD|NodePath]] '''focus_neighbour_left'''{| class="wikitable | ''Default''|| {{Span|NodePath("")}}           |-| ''Setter''|| set_focus_neighbour(value) |-| ''Getter''|| get_focus_neighbour()      |}Tells Godot which node it should give keyboard focus to if the user presses the left arrow on the keyboard or left on a gamepad by default. You can change the key by editing the {{Span|ui_left}} input action. The node must be a {{Span|Control}}. If this property is not set, Godot will give focus to the closest {{Span|Control}} to the left of this one.=== focus_neighbour_right ===*  [[NodePath GD|NodePath]] '''focus_neighbour_right'''{| class="wikitable | ''Default''|| {{Span|NodePath("")}}           |-| ''Setter''|| set_focus_neighbour(value) |-| ''Getter''|| get_focus_neighbour()      |}Tells Godot which node it should give keyboard focus to if the user presses the right arrow on the keyboard or right on a gamepad  by default. You can change the key by editing the {{Span|ui_right}} input action. The node must be a {{Span|Control}}. If this property is not set, Godot will give focus to the closest {{Span|Control}} to the bottom of this one.=== focus_neighbour_top ===*  [[NodePath GD|NodePath]] '''focus_neighbour_top'''{| class="wikitable | ''Default''|| {{Span|NodePath("")}}           |-| ''Setter''|| set_focus_neighbour(value) |-| ''Getter''|| get_focus_neighbour()      |}Tells Godot which node it should give keyboard focus to if the user presses the top arrow on the keyboard or top on a gamepad by default. You can change the key by editing the {{Span|ui_top}} input action. The node must be a {{Span|Control}}. If this property is not set, Godot will give focus to the closest {{Span|Control}} to the bottom of this one.=== focus_next ===*  [[NodePath GD|NodePath]] '''focus_next'''{| class="wikitable | ''Default''|| {{Span|NodePath("")}}      |-| ''Setter''|| set_focus_next(value) |-| ''Getter''|| get_focus_next()      |}Tells Godot which node it should give keyboard focus to if the user presses Tab on a keyboard by default. You can change the key by editing the {{Span|ui_focus_next}} input action.If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.=== focus_previous ===*  [[NodePath GD|NodePath]] '''focus_previous'''{| class="wikitable | ''Default''|| {{Span|NodePath("")}}          |-| ''Setter''|| set_focus_previous(value) |-| ''Getter''|| get_focus_previous()      |}Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab on a keyboard by default. You can change the key by editing the {{Span|ui_focus_prev}} input action.If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree.=== grow_horizontal ===*  [[#GrowDirection|GrowDirection]] '''grow_horizontal'''{| class="wikitable | ''Default''|| {{Span|1}}                       |-| ''Setter''|| set_h_grow_direction(value) |-| ''Getter''|| get_h_grow_direction()      |}Controls the direction on the horizontal axis in which the control should grow if its horizontal minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.=== grow_vertical ===*  [[#GrowDirection|GrowDirection]] '''grow_vertical'''{| class="wikitable | ''Default''|| {{Span|1}}                       |-| ''Setter''|| set_v_grow_direction(value) |-| ''Getter''|| get_v_grow_direction()      |}Controls the direction on the vertical axis in which the control should grow if its vertical minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.=== hint_tooltip ===*  [[String GD|String]] '''hint_tooltip'''{| class="wikitable | ''Default''|| {{Span|""}}             |-| ''Setter''|| set_tooltip(value) |}Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the [[#mouse_filter|mouse_filter]] property is not [[Control GD#MOUSE_FILTER_IGNORE|MOUSE_FILTER_IGNORE]]. You can change the time required for the tooltip to appear with {{Span|gui/timers/tooltip_delay_sec}} option in Project Settings.=== margin_bottom ===*  float '''margin_bottom'''{| class="wikitable | ''Default''|| {{Span|0.0}}           |-| ''Setter''|| set_margin(value) |-| ''Getter''|| get_margin()      |}Distance between the node's bottom edge and its parent control, based on [[#anchor_bottom|anchor_bottom]].Margins are often controlled by one or multiple parent [[Container GD|Container]] nodes, so you should not modify them manually if your node is a direct child of a [[Container GD|Container]]. Margins update automatically when you move or resize the node.=== margin_left ===*  float '''margin_left'''{| class="wikitable | ''Default''|| {{Span|0.0}}           |-| ''Setter''|| set_margin(value) |-| ''Getter''|| get_margin()      |}Distance between the node's left edge and its parent control, based on [[#anchor_left|anchor_left]].Margins are often controlled by one or multiple parent [[Container GD|Container]] nodes, so you should not modify them manually if your node is a direct child of a [[Container GD|Container]]. Margins update automatically when you move or resize the node.=== margin_right ===*  float '''margin_right'''{| class="wikitable | ''Default''|| {{Span|0.0}}           |-| ''Setter''|| set_margin(value) |-| ''Getter''|| get_margin()      |}Distance between the node's right edge and its parent control, based on [[#anchor_right|anchor_right]].Margins are often controlled by one or multiple parent [[Container GD|Container]] nodes, so you should not modify them manually if your node is a direct child of a [[Container GD|Container]]. Margins update automatically when you move or resize the node.=== margin_top ===*  float '''margin_top'''{| class="wikitable | ''Default''|| {{Span|0.0}}           |-| ''Setter''|| set_margin(value) |-| ''Getter''|| get_margin()      |}Distance between the node's top edge and its parent control, based on [[#anchor_top|anchor_top]].Margins are often controlled by one or multiple parent [[Container GD|Container]] nodes, so you should not modify them manually if your node is a direct child of a [[Container GD|Container]]. Margins update automatically when you move or resize the node.=== mouse_default_cursor_shape ===*  [[#CursorShape|CursorShape]] '''mouse_default_cursor_shape'''{| class="wikitable | ''Default''|| {{Span|0}}                           |-| ''Setter''|| set_default_cursor_shape(value) |-| ''Getter''|| get_default_cursor_shape()      |}The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.'''Note:''' On Linux, shapes may vary depending on the cursor theme of the system.=== mouse_filter ===*  [[#MouseFilter|MouseFilter]] '''mouse_filter'''{| class="wikitable | ''Default''|| {{Span|0}}                   |-| ''Setter''|| set_mouse_filter(value) |-| ''Getter''|| get_mouse_filter()      |}Controls whether the control will be able to receive mouse button input events through [[Control GD#_gui_input|_gui_input]] and how these events should be handled. Also controls whether the control can receive the [[#mouse_entered|mouse_entered]], and [[#mouse_exited|mouse_exited]] signals. See the constants to learn what each does.=== rect_clip_content ===*  bool '''rect_clip_content'''{| class="wikitable | ''Default''|| {{Span|false}}                |-| ''Setter''|| set_clip_contents(value) |-| ''Getter''|| is_clipping_contents()   |}Enables whether rendering of children should be clipped to this control's rectangle. If {{Span|true}}, parts of a child which would be visibly outside of this control's rectangle will not be rendered.=== rect_global_position ===*  [[Vector2 GD|Vector2]] '''rect_global_position'''{| class="wikitable | ''Getter''|| get_global_position() |}The node's global position, relative to the world (usually to the top-left corner of the window).=== rect_min_size ===*  [[Vector2 GD|Vector2]] '''rect_min_size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}            |-| ''Setter''|| set_custom_minimum_size(value) |-| ''Getter''|| get_custom_minimum_size()      |}The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.=== rect_pivot_offset ===*  [[Vector2 GD|Vector2]] '''rect_pivot_offset'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}}     |-| ''Setter''|| set_pivot_offset(value) |-| ''Getter''|| get_pivot_offset()      |}By default, the node's pivot is its top-left corner. When you change its [[#rect_scale|rect_scale]], it will scale around this pivot. Set this property to [[#rect_size|rect_size]] / 2 to center the pivot in the node's rectangle.=== rect_position ===*  [[Vector2 GD|Vector2]] '''rect_position'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}} |-| ''Getter''|| get_position()      |}The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by [[#rect_pivot_offset|rect_pivot_offset]].=== rect_rotation ===*  float '''rect_rotation'''{| class="wikitable | ''Default''|| {{Span|0.0}}                     |-| ''Setter''|| set_rotation_degrees(value) |-| ''Getter''|| get_rotation_degrees()      |}The node's rotation around its pivot, in degrees. See [[#rect_pivot_offset|rect_pivot_offset]] to change the pivot's position.=== rect_scale ===*  [[Vector2 GD|Vector2]] '''rect_scale'''{| class="wikitable | ''Default''|| {{Span|Vector2( 1, 1 )}} |-| ''Setter''|| set_scale(value)    |-| ''Getter''|| get_scale()         |}The node's scale, relative to its [[#rect_size|rect_size]]. Change this property to scale the node around its [[#rect_pivot_offset|rect_pivot_offset]].=== rect_size ===*  [[Vector2 GD|Vector2]] '''rect_size'''{| class="wikitable | ''Default''|| {{Span|Vector2( 0, 0 )}} |-| ''Getter''|| get_size()          |}The size of the node's bounding rectangle, in pixels. [[Container GD|Container]] nodes update this property automatically.=== size_flags_horizontal ===*  int '''size_flags_horizontal'''{| class="wikitable | ''Default''|| {{Span|1}}                   |-| ''Setter''|| set_h_size_flags(value) |-| ''Getter''|| get_h_size_flags()      |}Tells the parent [[Container GD|Container]] nodes how they should resize and place the node on the X axis. Use one of the [[#SizeFlags|SizeFlags]] constants to change the flags. See the constants to learn what each does.=== size_flags_stretch_ratio ===*  float '''size_flags_stretch_ratio'''{| class="wikitable | ''Default''|| {{Span|1.0}}                  |-| ''Setter''|| set_stretch_ratio(value) |-| ''Getter''|| get_stretch_ratio()      |}If the node and at least one of its neighbours uses the [[Control GD#SIZE_EXPAND|SIZE_EXPAND]] size flag, the parent [[Container GD|Container]] will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space.=== size_flags_vertical ===*  int '''size_flags_vertical'''{| class="wikitable | ''Default''|| {{Span|1}}                   |-| ''Setter''|| set_v_size_flags(value) |-| ''Getter''|| get_v_size_flags()      |}Tells the parent [[Container GD|Container]] nodes how they should resize and place the node on the Y axis. Use one of the [[#SizeFlags|SizeFlags]] constants to change the flags. See the constants to learn what each does.=== theme ===*  [[Theme GD|Theme]] '''theme'''{| class="wikitable | ''Setter''|| set_theme(value) |-| ''Getter''|| get_theme()      |}Changing this property replaces the current [[Theme GD|Theme]] resource this node and all its {{Span|Control}} children use.== Method Descriptions ===== _clips_input ===*  bool '''_clips_input ( )''' virtualVirtual method to be implemented by the user. Returns whether [[Control GD#_gui_input|_gui_input]] should not be called for children controls outside this control's rectangle. Input will be clipped to the Rect of this {{Span|Control}}. Similar to [[#rect_clip_content|rect_clip_content]], but doesn't affect visibility.If not overridden, defaults to {{Span|false}}.=== _get_minimum_size ===*  [[Vector2 GD|Vector2]] '''_get_minimum_size ( )''' virtualVirtual method to be implemented by the user. Returns the minimum size for this control. Alternative to [[#rect_min_size|rect_min_size]] for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately).If not overridden, defaults to [[Vector2 GD#ZERO|Vector2.ZERO()]].=== _gui_input ===*  void '''_gui_input''' '''(''' [[InputEvent GD|InputEvent]] event ''')''' virtualVirtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See [[#accept_event|accept_event]].Example: clicking a control.::    func _gui_input(event):        if event is InputEventMouseButton:            if event.button_index == BUTTON_LEFT and event.pressed:                print("I've been clicked D:")The event won't trigger if:\* clicking outside the control (see [[#has_point|has_point]]);\* control has [[#mouse_filter|mouse_filter]] set to [[Control GD#MOUSE_FILTER_IGNORE|MOUSE_FILTER_IGNORE]];\* control is obstructed by another {{Span|Control}} on top of it, which doesn't have [[#mouse_filter|mouse_filter]] set to [[Control GD#MOUSE_FILTER_IGNORE|MOUSE_FILTER_IGNORE]];\* control's parent has [[#mouse_filter|mouse_filter]] set to [[Control GD#MOUSE_FILTER_STOP|MOUSE_FILTER_STOP]] or has accepted the event;\* it happens outside parent's rectangle and the parent has either [[#rect_clip_content|rect_clip_content]] or [[Control GD#_clips_input|_clips_input]] enabled.=== _make_custom_tooltip ===*  [[Object GD|Object]] '''_make_custom_tooltip''' '''(''' [[String GD|String]] for_text ''')''' virtualVirtual method to be implemented by the user. Returns a {{Span|Control}} node that should be used as a tooltip instead of the default one. Use {{Span|for_text}} parameter to determine what text the tooltip should contain (likely the contents of [[#hint_tooltip|hint_tooltip]]).The returned node must be of type {{Span|Control}} or Control-derieved. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance, not e.g. a node from scene. When {{Span|null}} or non-Control node is returned, the default tooltip will be used instead.'''Note:''' The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its [[#rect_min_size|rect_min_size]] to some non-zero value.Example of usage with custom-constructed node:::    func _make_custom_tooltip(for_text):        var label = Label.new()        label.text = for_text        return labelExample of usage with custom scene instance:::    func _make_custom_tooltip(for_text):        var tooltip = preload("SomeTooltipScene.tscn").instance()        tooltip.get_node("Label").text = for_text        return tooltip=== accept_event ===*  void '''accept_event ( )'''Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to [[Node GD#_unhandled_input|_unhandled_input]] or [[Node GD#_unhandled_key_input|_unhandled_key_input]].=== add_color_override ===*  void '''add_color_override''' '''(''' [[StringName GD|StringName]] name, [[Color GD|Color]] color ''')'''Overrides the [[Color GD|Color]] with given {{Span|name}} in the [[#theme|theme]] resource the control uses. If the {{Span|color}} is empty or invalid, the override is cleared and the color from assigned [[Theme GD|Theme]] is used.=== add_constant_override ===*  void '''add_constant_override''' '''(''' [[StringName GD|StringName]] name, int constant ''')'''Overrides an integer constant with given {{Span|name}} in the [[#theme|theme]] resource the control uses. If the {{Span|constant}} is empty or invalid, the override is cleared and the constant from assigned [[Theme GD|Theme]] is used.=== add_font_override ===*  void '''add_font_override''' '''(''' [[StringName GD|StringName]] name, [[Font GD|Font]] font ''')'''Overrides the font with given {{Span|name}} in the [[#theme|theme]] resource the control uses. If {{Span|font}} is empty or invalid, the override is cleared and the font from assigned [[Theme GD|Theme]] is used.=== add_icon_override ===*  void '''add_icon_override''' '''(''' [[StringName GD|StringName]] name, [[Texture2D GD|Texture2D]] texture ''')'''Overrides the icon with given {{Span|name}} in the [[#theme|theme]] resource the control uses. If {{Span|icon}} is empty or invalid, the override is cleared and the icon from assigned [[Theme GD|Theme]] is used.=== add_shader_override ===*  void '''add_shader_override''' '''(''' [[StringName GD|StringName]] name, [[Shader GD|Shader]] shader ''')'''Overrides the [[Shader GD|Shader]] with given {{Span|name}} in the [[#theme|theme]] resource the control uses. If {{Span|shader}} is empty or invalid, the override is cleared and the shader from assigned [[Theme GD|Theme]] is used.=== add_stylebox_override ===*  void '''add_stylebox_override''' '''(''' [[StringName GD|StringName]] name, [[StyleBox GD|StyleBox]] stylebox ''')'''Overrides the [[StyleBox GD|StyleBox]] with given {{Span|name}} in the [[#theme|theme]] resource the control uses. If {{Span|stylebox}} is empty or invalid, the override is cleared and the [[StyleBox GD|StyleBox]] from assigned [[Theme GD|Theme]] is used.=== can_drop_data ===*  bool '''can_drop_data''' '''(''' [[Vector2 GD|Vector2]] position, [[Variant GD|Variant]] data ''')''' virtualGodot calls this method to test if {{Span|data}} from a control's [[#get_drag_data|get_drag_data]] can be dropped at {{Span|position}}. {{Span|position}} is local to this control.This method should only be used to test the data. Process the data in [[#drop_data|drop_data]].::    func can_drop_data(position, data):        # Check position if it is relevant to you        # Otherwise, just check data        return typeof(data) == TYPE_DICTIONARY and data.has("expected")=== drop_data ===*  void '''drop_data''' '''(''' [[Vector2 GD|Vector2]] position, [[Variant GD|Variant]] data ''')''' virtualGodot calls this method to pass you the {{Span|data}} from a control's [[#get_drag_data|get_drag_data]] result. Godot first calls [[#can_drop_data|can_drop_data]] to test if {{Span|data}} is allowed to drop at {{Span|position}} where {{Span|position}} is local to this control.::    func can_drop_data(position, data):        return typeof(data) == TYPE_DICTIONARY and data.has("color")        func drop_data(position, data):        color = data["color"]=== force_drag ===*  void '''force_drag''' '''(''' [[Variant GD|Variant]] data, [[Control GD|Control]] preview ''')'''Forces drag and bypasses [[#get_drag_data|get_drag_data]] and [[#set_drag_preview|set_drag_preview]] by passing {{Span|data}} and {{Span|preview}}. Drag will start even if the mouse is neither over nor pressed on this control.The methods [[#can_drop_data|can_drop_data]] and [[#drop_data|drop_data]] must be implemented on controls that want to receive drop data.=== get_anchor ===*  float '''get_anchor''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' constReturns the anchor identified by {{Span|margin}} constant from [[@GlobalScope GD#Margin|Margin]] enum. A getter method for [[#anchor_bottom|anchor_bottom]], [[#anchor_left|anchor_left]], [[#anchor_right|anchor_right]] and [[#anchor_top|anchor_top]].=== get_begin ===*  [[Vector2 GD|Vector2]] '''get_begin ( )''' constReturns [[#margin_left|margin_left]] and [[#margin_top|margin_top]]. See also [[#rect_position|rect_position]].=== get_color ===*  [[Color GD|Color]] '''get_color''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns a color from assigned [[Theme GD|Theme]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}}.::    func _ready():        modulate = get_color("font_color", "Button") #get the color defined for button fonts=== get_combined_minimum_size ===*  [[Vector2 GD|Vector2]] '''get_combined_minimum_size ( )''' constReturns combined minimum size from [[#rect_min_size|rect_min_size]] and [[#get_minimum_size|get_minimum_size]].=== get_constant ===*  int '''get_constant''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns a constant from assigned [[Theme GD|Theme]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}}.=== get_cursor_shape ===*  [[#CursorShape|CursorShape]] '''get_cursor_shape''' '''(''' [[Vector2 GD|Vector2]] position=Vector2( 0, 0 ) ''')''' constReturns the mouse cursor shape the control displays on mouse hover. See [[#CursorShape|CursorShape]].=== get_drag_data ===*  [[Variant GD|Variant]] '''get_drag_data''' '''(''' [[Vector2 GD|Vector2]] position ''')''' virtualGodot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Returns {{Span|null}} if there is no data to drag. Controls that want to receive drop data should implement [[#can_drop_data|can_drop_data]] and [[#drop_data|drop_data]]. {{Span|position}} is local to this control. Drag may be forced with [[#force_drag|force_drag]].A preview that will follow the mouse that should represent the data can be set with [[#set_drag_preview|set_drag_preview]]. A good time to set the preview is in this method.::    func get_drag_data(position):        var mydata = make_data()        set_drag_preview(make_preview(mydata))        return mydata=== get_end ===*  [[Vector2 GD|Vector2]] '''get_end ( )''' constReturns [[#margin_right|margin_right]] and [[#margin_bottom|margin_bottom]].=== get_focus_neighbour ===*  [[NodePath GD|NodePath]] '''get_focus_neighbour''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' constReturns the focus neighbour identified by {{Span|margin}} constant from [[@GlobalScope GD#Margin|Margin]] enum. A getter method for [[#focus_neighbour_bottom|focus_neighbour_bottom]], [[#focus_neighbour_left|focus_neighbour_left]], [[#focus_neighbour_right|focus_neighbour_right]] and [[#focus_neighbour_top|focus_neighbour_top]].=== get_focus_owner ===*  [[Control GD|Control]] '''get_focus_owner ( )''' constReturns the control that has the keyboard focus or {{Span|null}} if none.=== get_font ===*  [[Font GD|Font]] '''get_font''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns a font from assigned [[Theme GD|Theme]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}}.=== get_global_rect ===*  [[Rect2 GD|Rect2]] '''get_global_rect ( )''' constReturns the position and size of the control relative to the top-left corner of the screen. See [[#rect_position|rect_position]] and [[#rect_size|rect_size]].=== get_icon ===*  [[Texture2D GD|Texture2D]] '''get_icon''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns an icon from assigned [[Theme GD|Theme]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}}.=== get_margin ===*  float '''get_margin''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin ''')''' constReturns the anchor identified by {{Span|margin}} constant from [[@GlobalScope GD#Margin|Margin]] enum. A getter method for [[#margin_bottom|margin_bottom]], [[#margin_left|margin_left]], [[#margin_right|margin_right]] and [[#margin_top|margin_top]].=== get_minimum_size ===*  [[Vector2 GD|Vector2]] '''get_minimum_size ( )''' constReturns the minimum size for this control. See [[#rect_min_size|rect_min_size]].=== get_parent_area_size ===*  [[Vector2 GD|Vector2]] '''get_parent_area_size ( )''' constReturns the width/height occupied in the parent control.=== get_parent_control ===*  [[Control GD|Control]] '''get_parent_control ( )''' constReturns the parent control node.=== get_rect ===*  [[Rect2 GD|Rect2]] '''get_rect ( )''' constReturns the position and size of the control relative to the top-left corner of the parent Control. See [[#rect_position|rect_position]] and [[#rect_size|rect_size]].=== get_rotation ===*  float '''get_rotation ( )''' constReturns the rotation (in radians).=== get_stylebox ===*  [[StyleBox GD|StyleBox]] '''get_stylebox''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns a [[StyleBox GD|StyleBox]] from assigned [[Theme GD|Theme]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}}.=== get_tooltip ===*  [[String GD|String]] '''get_tooltip''' '''(''' [[Vector2 GD|Vector2]] at_position=Vector2( 0, 0 ) ''')''' constReturns the tooltip, which will appear when the cursor is resting over this control. See [[#hint_tooltip|hint_tooltip]].=== grab_click_focus ===*  void '''grab_click_focus ( )'''Creates an [[InputEventMouseButton GD|InputEventMouseButton]] that attempts to click the control. If the event is received, the control acquires focus.::    func _process(delta):        grab_click_focus() #when clicking another Control node, this node will be clicked instead=== grab_focus ===*  void '''grab_focus ( )'''Steal the focus from another control and become the focused control (see [[#focus_mode|focus_mode]]).=== has_color ===*  bool '''has_color''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns {{Span|true}} if [[Color GD|Color]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}} exists in assigned [[Theme GD|Theme]].=== has_color_override ===*  bool '''has_color_override''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if [[Color GD|Color]] with given {{Span|name}} has a valid override in this {{Span|Control}} node.=== has_constant ===*  bool '''has_constant''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns {{Span|true}} if constant with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}} exists in assigned [[Theme GD|Theme]].=== has_constant_override ===*  bool '''has_constant_override''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if constant with given {{Span|name}} has a valid override in this {{Span|Control}} node.=== has_focus ===*  bool '''has_focus ( )''' constReturns {{Span|true}} if this is the current focused control. See [[#focus_mode|focus_mode]].=== has_font ===*  bool '''has_font''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns {{Span|true}} if font with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}} exists in assigned [[Theme GD|Theme]].=== has_font_override ===*  bool '''has_font_override''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if font with given {{Span|name}} has a valid override in this {{Span|Control}} node.=== has_icon ===*  bool '''has_icon''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns {{Span|true}} if icon with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}} exists in assigned [[Theme GD|Theme]].=== has_icon_override ===*  bool '''has_icon_override''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if icon with given {{Span|name}} has a valid override in this {{Span|Control}} node.=== has_point ===*  bool '''has_point''' '''(''' [[Vector2 GD|Vector2]] point ''')''' virtualVirtual method to be implemented by the user. Returns whether the given {{Span|point}} is inside this control.If not overridden, default behavior is checking if the point is within control's Rect.'''Note:''' If you want to check if a point is inside the control, you can use {{Span|get_rect().has_point(point)}}.=== has_shader_override ===*  bool '''has_shader_override''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if [[Shader GD|Shader]] with given {{Span|name}} has a valid override in this {{Span|Control}} node.=== has_stylebox ===*  bool '''has_stylebox''' '''(''' [[StringName GD|StringName]] name, [[StringName GD|StringName]] type="" ''')''' constReturns {{Span|true}} if [[StyleBox GD|StyleBox]] with given {{Span|name}} and associated with {{Span|Control}} of given {{Span|type}} exists in assigned [[Theme GD|Theme]].=== has_stylebox_override ===*  bool '''has_stylebox_override''' '''(''' [[StringName GD|StringName]] name ''')''' constReturns {{Span|true}} if [[StyleBox GD|StyleBox]] with given {{Span|name}} has a valid override in this {{Span|Control}} node.=== minimum_size_changed ===*  void '''minimum_size_changed ( )'''Invalidates the size cache in this node and in parent nodes up to toplevel. Intended to be used with [[#get_minimum_size|get_minimum_size]] when the return value is changed. Setting [[#rect_min_size|rect_min_size]] directly calls this method automatically.=== release_focus ===*  void '''release_focus ( )'''Give up the focus. No other control will be able to receive keyboard input.=== set_anchor ===*  void '''set_anchor''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float anchor, bool keep_margin=false, bool push_opposite_anchor=true ''')'''Sets the anchor identified by {{Span|margin}} constant from [[@GlobalScope GD#Margin|Margin]] enum to value {{Span|anchor}}. A setter method for [[#anchor_bottom|anchor_bottom]], [[#anchor_left|anchor_left]], [[#anchor_right|anchor_right]] and [[#anchor_top|anchor_top]].If {{Span|keep_margin}} is {{Span|true}}, margins aren't updated after this operation.If {{Span|push_opposite_anchor}} is {{Span|true}} and the opposite anchor overlaps this anchor, the opposite one will have its value overridden. For example, when setting left anchor to 1 and the right anchor has value of 0.5, the right anchor will also get value of 1. If {{Span|push_opposite_anchor}} was {{Span|false}}, the left anchor would get value 0.5.=== set_anchor_and_margin ===*  void '''set_anchor_and_margin''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float anchor, float offset, bool push_opposite_anchor=false ''')'''Works the same as [[#set_anchor|set_anchor]], but instead of {{Span|keep_margin}} argument and automatic update of margin, it allows to set the margin offset yourself (see [[#set_margin|set_margin]]).=== set_anchors_and_margins_preset ===*  void '''set_anchors_and_margins_preset''' '''(''' [[#LayoutPreset|LayoutPreset]] preset, [[#LayoutPresetMode|LayoutPresetMode]] resize_mode=0, int margin=0 ''')'''Sets both anchor preset and margin preset. See [[#set_anchors_preset|set_anchors_preset]] and [[#set_margins_preset|set_margins_preset]].=== set_anchors_preset ===*  void '''set_anchors_preset''' '''(''' [[#LayoutPreset|LayoutPreset]] preset, bool keep_margins=false ''')'''Sets the anchors to a {{Span|preset}} from [[#LayoutPreset|LayoutPreset]] enum. This is code equivalent of using the Layout menu in 2D editor.If {{Span|keep_margins}} is {{Span|true}}, control's position will also be updated.=== set_begin ===*  void '''set_begin''' '''(''' [[Vector2 GD|Vector2]] position ''')'''Sets [[#margin_left|margin_left]] and [[#margin_top|margin_top]] at the same time. Equivalent of changing [[#rect_position|rect_position]].=== set_drag_forwarding ===*  void '''set_drag_forwarding''' '''(''' [[Control GD|Control]] target ''')'''Forwards the handling of this control's drag and drop to {{Span|target}} control.Forwarding can be implemented in the target control similar to the methods [[#get_drag_data|get_drag_data]], [[#can_drop_data|can_drop_data]], and [[#drop_data|drop_data]] but with two differences:1. The function name must be suffixed with '''_fw'''2. The function must take an extra argument that is the control doing the forwarding::    # ThisControl.gd    extends Control    func _ready():        set_drag_forwarding(target_control)        # TargetControl.gd    extends Control    func can_drop_data_fw(position, data, from_control):        return true        func drop_data_fw(position, data, from_control):        my_handle_data(data)        func get_drag_data_fw(position, from_control):        set_drag_preview(my_preview)        return my_data()=== set_drag_preview ===*  void '''set_drag_preview''' '''(''' [[Control GD|Control]] control ''')'''Shows the given control at the mouse pointer. A good time to call this method is in [[#get_drag_data|get_drag_data]]. The control must not be in the scene tree.::    export (Color, RGBA) var color = Color(1, 0, 0, 1)        func get_drag_data(position):        # Use a control that is not in the tree        var cpb = ColorPickerButton.new()        cpb.color = color        cpb.rect_size = Vector2(50, 50)        set_drag_preview(cpb)        return color=== set_end ===*  void '''set_end''' '''(''' [[Vector2 GD|Vector2]] position ''')'''Sets [[#margin_right|margin_right]] and [[#margin_bottom|margin_bottom]] at the same time.=== set_focus_neighbour ===*  void '''set_focus_neighbour''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin, [[NodePath GD|NodePath]] neighbour ''')'''Sets the anchor identified by {{Span|margin}} constant from [[@GlobalScope GD#Margin|Margin]] enum to {{Span|Control}} at {{Span|neighbor}} node path. A setter method for [[#focus_neighbour_bottom|focus_neighbour_bottom]], [[#focus_neighbour_left|focus_neighbour_left]], [[#focus_neighbour_right|focus_neighbour_right]] and [[#focus_neighbour_top|focus_neighbour_top]].=== set_global_position ===*  void '''set_global_position''' '''(''' [[Vector2 GD|Vector2]] position, bool keep_margins=false ''')'''Sets the [[#rect_global_position|rect_global_position]] to given {{Span|position}}.If {{Span|keep_margins}} is {{Span|true}}, control's anchors will be updated instead of margins.=== set_margin ===*  void '''set_margin''' '''(''' [[@GlobalScope GD#Margin|Margin]] margin, float offset ''')'''Sets the margin identified by {{Span|margin}} constant from [[@GlobalScope GD#Margin|Margin]] enum to given {{Span|offset}}. A setter method for [[#margin_bottom|margin_bottom]], [[#margin_left|margin_left]], [[#margin_right|margin_right]] and [[#margin_top|margin_top]].=== set_margins_preset ===*  void '''set_margins_preset''' '''(''' [[#LayoutPreset|LayoutPreset]] preset, [[#LayoutPresetMode|LayoutPresetMode]] resize_mode=0, int margin=0 ''')'''Sets the margins to a {{Span|preset}} from [[#LayoutPreset|LayoutPreset]] enum. This is code equivalent of using the Layout menu in 2D editor.Use parameter {{Span|resize_mode}} with constants from [[#LayoutPresetMode|LayoutPresetMode]] to better determine the resulting size of the {{Span|Control}}. Constant size will be ignored if used with presets that change size, e.g. {{Span|PRESET_LEFT_WIDE}}.Use parameter {{Span|margin}} to determine the gap between the {{Span|Control}} and the edges.=== set_position ===*  void '''set_position''' '''(''' [[Vector2 GD|Vector2]] position, bool keep_margins=false ''')'''Sets the [[#rect_position|rect_position]] to given {{Span|position}}.If {{Span|keep_margins}} is {{Span|true}}, control's anchors will be updated instead of margins.=== set_rotation ===*  void '''set_rotation''' '''(''' float radians ''')'''Sets the rotation (in radians).=== set_size ===*  void '''set_size''' '''(''' [[Vector2 GD|Vector2]] size, bool keep_margins=false ''')'''Sets the size (see [[#rect_size|rect_size]]).If {{Span|keep_margins}} is {{Span|true}}, control's anchors will be updated instead of margins.=== show_modal ===*  void '''show_modal''' '''(''' bool exclusive=false ''')'''Displays a control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.If {{Span|exclusive}} is {{Span|true}}, other controls will not receive input and clicking outside this control will not close it.=== warp_mouse ===*  void '''warp_mouse''' '''(''' [[Vector2 GD|Vector2]] to_position ''')'''Moves the mouse cursor to {{Span|to_position}}, relative to [[#rect_position|rect_position]] of this {{Span|Control}}.