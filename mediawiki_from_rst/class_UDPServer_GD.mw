__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Helper class to implement a UDP server.== Description ==A simple server that opens a UDP socket and returns connected [[PacketPeerUDP GD|PacketPeerUDP]] upon receiving new packets. See also [[PacketPeerUDP GD#connect_to_host|PacketPeerUDP.connect_to_host()]].Below a small example of how it can be used:::    # server.gd    extends Node        var server := UDPServer.new()    var peers = []        func _ready():        server.listen(4242)        func _process(delta):        if server.is_connection_available():            var peer : PacketPeerUDP = server.take_connection()            var pkt = peer.get_packet()            print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])            print("Received data: %s" % [pkt.get_string_from_utf8()])            # Reply so it knows we received the message.            peer.put_packet(pkt)            # Keep a reference so we can keep contacting the remote peer.            peers.append(peer)            for i in range(0, peers.size()):            pass # Do something with the connected peers.    ::    # client.gd    extends Node        var udp := PacketPeerUDP.new()    var connected = false        func _ready():        udp.connect_to_host("127.0.0.1", 4242)        func _process(delta):        if !connected:            # Try to contact server            udp.put_packet("The answer is... 42!".to_utf8())        if udp.get_available_packet_count() > 0:            print("Connected: %s" % udp.get_packet().get_string_from_utf8())            connected = true== Methods =={| class="wikitable | bool|| [[#is_connection_available|is_connection_available]] '''(''' ''')''' const                                  |-| bool|| [[#is_listening|is_listening]] '''(''' ''')''' const                                                        |-| [[@GlobalScope GD#Error|Error]]|| [[#listen|listen]] '''(''' int port, [[String GD|String]] bind_address="*" ''')''' |-| void|| [[#stop|stop]] '''(''' ''')'''                                                                              |-| [[PacketPeerUDP GD|PacketPeerUDP]]|| [[#take_connection|take_connection]] '''(''' ''')'''                                                        |}== Method Descriptions ===== is_connection_available ===*  bool '''is_connection_available ( )''' constReturns {{Span|true}} if a packet with a new address/port combination is received on the socket.=== is_listening ===*  bool '''is_listening ( )''' constReturns {{Span|true}} if the socket is open and listening on a port.=== listen ===*  [[@GlobalScope GD#Error|Error]] '''listen''' '''(''' int port, [[String GD|String]] bind_address="*" ''')'''Starts the server by opening a UDP socket listening on the given port. You can optionally specify a {{Span|bind_address}} to only listen for packets sent to that address. See also [[PacketPeerUDP GD#listen|PacketPeerUDP.listen()]].=== stop ===*  void '''stop ( )'''Stops the server, closing the UDP socket if open. Will not disconnect any connected [[PacketPeerUDP GD|PacketPeerUDP]].=== take_connection ===*  [[PacketPeerUDP GD|PacketPeerUDP]] '''take_connection ( )'''Returns a [[PacketPeerUDP GD|PacketPeerUDP]] connected to the address/port combination of the first packet in queue. Will return {{Span|null}} if no packet is in queue. See also [[PacketPeerUDP GD#connect_to_host|PacketPeerUDP.connect_to_host()]].