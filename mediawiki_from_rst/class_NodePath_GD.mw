__NOTOC__Pre-parsed scene tree path.== Description ==A pre-parsed relative or absolute path in a scene tree, for use with [[Node GD#get_node|Node.get_node()]] and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For instance, {{Span|"Path2D/PathFollow2D/Sprite:texture:size"}} would refer to the {{Span|size}} property of the {{Span|texture}} resource on the node named {{Span|"Sprite"}} which is a child of the other named nodes in the path.You will usually just pass a string to [[Node GD#get_node|Node.get_node()]] and it will be automatically converted, but you may occasionally want to parse a path ahead of time with {{Span|NodePath}} or the literal syntax {{Span|@"path"}}. Exporting a {{Span|NodePath}} variable will give you a node selection widget in the properties panel of the editor, which can often be useful.A {{Span|NodePath}} is composed of a list of slash-separated node names (like a filesystem path) and an optional colon-separated list of "subnames" which can be resources or properties.Some examples of NodePaths include the following:::    # No leading slash means it is relative to the current node.    @"A" # Immediate child A    @"A/B" # A's child B    @"." # The current node.    @".." # The parent node.    @"../C" # A sibling node C.    # A leading slash means it is absolute from the SceneTree.    @"/root" # Equivalent to get_tree().get_root().    @"/root/Main" # If your main scene's root node were named "Main".    @"/root/MyAutoload" # If you have an autoloaded node or scene.== Methods =={| class="wikitable | [[NodePath GD|NodePath]]|| [[NodePath GD#NodePath|NodePath]] '''(''' [[String GD|String]] from ''')'''  |-| [[NodePath GD|NodePath]]|| [[#get_as_property_path|get_as_property_path]] '''(''' ''')'''           |-| [[String GD|String]]|| [[#get_concatenated_subnames|get_concatenated_subnames]] '''(''' ''')''' |-| [[String GD|String]]|| [[#get_name|get_name]] '''(''' int idx ''')'''         |-| int|| [[#get_name_count|get_name_count]] '''(''' ''')'''                       |-| [[String GD|String]]|| [[#get_subname|get_subname]] '''(''' int idx ''')'''   |-| int|| [[#get_subname_count|get_subname_count]] '''(''' ''')'''                 |-| bool|| [[#is_absolute|is_absolute]] '''(''' ''')'''                             |-| bool|| [[#is_empty|is_empty]] '''(''' ''')'''                                   |}== Method Descriptions ===== NodePath ===*  [[NodePath GD|NodePath]] '''NodePath''' '''(''' [[String GD|String]] from ''')'''Creates a NodePath from a string, e.g. {{Span|"Path2D/PathFollow2D/Sprite:texture:size"}}. A path is absolute if it starts with a slash. Absolute paths are only valid in the global scene tree, not within individual scenes. In a relative path, {{Span|"."}} and {{Span|".."}} indicate the current node and its parent.The "subnames" optionally included after the path to the target node can point to resources or properties, and can also be nested.Examples of valid NodePaths (assuming that those nodes exist and have the referenced resources or properties):::    # Points to the Sprite node    "Path2D/PathFollow2D/Sprite"    # Points to the Sprite node and its "texture" resource.    # get_node() would retrieve "Sprite", while get_node_and_resource()    # would retrieve both the Sprite node and the "texture" resource.    "Path2D/PathFollow2D/Sprite:texture"    # Points to the Sprite node and its "position" property.    "Path2D/PathFollow2D/Sprite:position"    # Points to the Sprite node and the "x" component of its "position" property.    "Path2D/PathFollow2D/Sprite:position:x"    # Absolute path (from "root")    "/root/Level/Path2D"=== path ===*  [[NodePath GD|NodePath]] '''get_as_property_path ( )'''Returns a node path with a colon character ({{Span|:}}) prepended, transforming it to a pure property path with no node name (defaults to resolving from the current node).::    # This will be parsed as a node path to the "x" property in the "position" node    var node_path = NodePath("position:x")    # This will be parsed as a node path to the "x" component of the "position" property in the current node    var property_path = node_path.get_as_property_path()    print(property_path) # :position:x=== get_concatenated_subnames ===*  [[String GD|String]] '''get_concatenated_subnames ( )'''Returns all subnames concatenated with a colon character ({{Span|:}}) as separator, i.e. the right side of the first colon in a node path.::    var nodepath = NodePath("Path2D/PathFollow2D/Sprite:texture:load_path")    print(nodepath.get_concatenated_subnames()) # texture:load_path=== get_name ===*  [[String GD|String]] '''get_name''' '''(''' int idx ''')'''Gets the node name indicated by {{Span|idx}} (0 to [[#get_name_count|get_name_count]]).::    var node_path = NodePath("Path2D/PathFollow2D/Sprite")    print(node_path.get_name(0)) # Path2D    print(node_path.get_name(1)) # PathFollow2D    print(node_path.get_name(2)) # Sprite=== get_name_count ===*  int '''get_name_count ( )'''Gets the number of node names which make up the path. Subnames (see [[#get_subname_count|get_subname_count]]) are not included.For example, {{Span|"Path2D/PathFollow2D/Sprite"}} has 3 names.=== get_subname ===*  [[String GD|String]] '''get_subname''' '''(''' int idx ''')'''Gets the resource or property name indicated by {{Span|idx}} (0 to [[#get_subname_count|get_subname_count]]).::    var node_path = NodePath("Path2D/PathFollow2D/Sprite:texture:load_path")    print(node_path.get_subname(0)) # texture    print(node_path.get_subname(1)) # load_path=== get_subname_count ===*  int '''get_subname_count ( )'''Gets the number of resource or property names ("subnames") in the path. Each subname is listed after a colon character ({{Span|:}}) in the node path.For example, {{Span|"Path2D/PathFollow2D/Sprite:texture:load_path"}} has 2 subnames.=== is_absolute ===*  bool '''is_absolute ( )'''Returns {{Span|true}} if the node path is absolute (as opposed to relative), which means that it starts with a slash character ({{Span|/}}). Absolute node paths can be used to access the root node ({{Span|"/root"}}) or autoloads (e.g. {{Span|"/global"}} if a "global" autoload was registered).=== is_empty ===*  bool '''is_empty ( )'''Returns {{Span|true}} if the node path is empty.