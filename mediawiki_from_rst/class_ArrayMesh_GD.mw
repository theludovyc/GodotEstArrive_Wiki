__NOTOC__'''Inherits:''' [[Mesh GD|Mesh]] '''<''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]][[Mesh GD|Mesh]] type that provides utility for constructing a surface from arrays.== Description ==The {{Span|ArrayMesh}} is used to construct a [[Mesh GD|Mesh]] by specifying the attributes as arrays.The most basic example is the creation of a single triangle:::    var vertices = PackedVector3Array()    vertices.push_back(Vector3(0, 1, 0))    vertices.push_back(Vector3(1, 0, 0))    vertices.push_back(Vector3(0, 0, 1))    # Initialize the ArrayMesh.    var arr_mesh = ArrayMesh.new()    var arrays = []    arrays.resize(ArrayMesh.ARRAY_MAX)    arrays[ArrayMesh.ARRAY_VERTEX] = vertices    # Create the Mesh.    arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)    var m = MeshInstance.new()    m.mesh = arr_meshThe [[MeshInstance GD|MeshInstance]] is ready to be added to the [[SceneTree GD|SceneTree]] to be shown.== Tutorials ==*  :doc:`../tutorials/content/procedural_geometry/arraymesh`== Properties =={| class="wikitable | [[#BlendShapeMode|BlendShapeMode]]|| [[#blend_shape_mode|blend_shape_mode]]|| {{Span|1}}                        |-| [[AABB GD|AABB]]|| [[#custom_aabb|custom_aabb]]|| {{Span|AABB( 0, 0, 0, 0, 0, 0 )}} |}== Methods =={| class="wikitable | void|| [[#add_blend_shape|add_blend_shape]] '''(''' [[StringName GD|StringName]] name ''')'''                                                                                                                                                                                                          |-| void|| [[#add_surface_from_arrays|add_surface_from_arrays]] '''(''' [[#PrimitiveType|PrimitiveType]] primitive, [[Array GD|Array]] arrays, [[Array GD|Array]] blend_shapes=[  ], [[Dictionary GD|Dictionary]] lods={  }, int compress_flags=31744 ''')''' |-| void|| [[#clear_blend_shapes|clear_blend_shapes]] '''(''' ''')'''                                                                                                                                                                                                                                             |-| void|| [[#clear_surfaces|clear_surfaces]] '''(''' ''')'''                                                                                                                                                                                                                                                     |-| int|| [[#get_blend_shape_count|get_blend_shape_count]] '''(''' ''')''' const                                                                                                                                                                                                                                 |-| [[StringName GD|StringName]]|| [[#get_blend_shape_name|get_blend_shape_name]] '''(''' int index ''')''' const                                                                                                                                                                                                       |-| [[@GlobalScope GD#Error|Error]]|| [[#lightmap_unwrap|lightmap_unwrap]] '''(''' [[Transform GD|Transform]] transform, float texel_size ''')'''                                                                                                                                                                 |-| void|| [[#regen_normalmaps|regen_normalmaps]] '''(''' ''')'''                                                                                                                                                                                                                                                 |-| int|| [[#surface_find_by_name|surface_find_by_name]] '''(''' [[String GD|String]] name ''')''' const                                                                                                                                                                                                  |-| int|| [[#surface_get_array_index_len|surface_get_array_index_len]] '''(''' int surf_idx ''')''' const                                                                                                                                                                                      |-| int|| [[#surface_get_array_len|surface_get_array_len]] '''(''' int surf_idx ''')''' const                                                                                                                                                                                                  |-| int|| [[#surface_get_format|surface_get_format]] '''(''' int surf_idx ''')''' const                                                                                                                                                                                                        |-| [[String GD|String]]|| [[#surface_get_name|surface_get_name]] '''(''' int surf_idx ''')''' const                                                                                                                                                                                                            |-| [[#PrimitiveType|PrimitiveType]]|| [[#surface_get_primitive_type|surface_get_primitive_type]] '''(''' int surf_idx ''')''' const                                                                                                                                                                                        |-| void|| [[#surface_set_name|surface_set_name]] '''(''' int surf_idx, [[String GD|String]] name ''')'''                                                                                                                                                                                |-| void|| [[#surface_update_region|surface_update_region]] '''(''' int surf_idx, int offset, [[PackedByteArray GD|PackedByteArray]] data ''')'''                                                                                                                      |}== Enumerations ===== ArrayType ====== ARRAY_VERTEX ====== ARRAY_NORMAL ====== ARRAY_TANGENT ====== ARRAY_COLOR ====== ARRAY_TEX_UV ====== ARRAY_TEX_UV2 ====== ARRAY_BONES ====== ARRAY_WEIGHTS ====== ARRAY_INDEX ====== ARRAY_MAX ===enum '''ArrayType''':*  '''ARRAY_VERTEX''' = '''0'''  [[PackedVector3Array GD|PackedVector3Array]], [[PackedVector2Array GD|PackedVector2Array]], or [[Array GD|Array]] of vertex positions.*  '''ARRAY_NORMAL''' = '''1'''  [[PackedVector3Array GD|PackedVector3Array]] of vertex normals.*  '''ARRAY_TANGENT''' = '''2'''  [[PackedFloat32Array GD|PackedFloat32Array]] of vertex tangents. Each element in groups of 4 floats, first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.*  '''ARRAY_COLOR''' = '''3'''  [[PackedColorArray GD|PackedColorArray]] of vertex colors.*  '''ARRAY_TEX_UV''' = '''4'''  [[PackedVector2Array GD|PackedVector2Array]] for UV coordinates.*  '''ARRAY_TEX_UV2''' = '''5'''  [[PackedVector2Array GD|PackedVector2Array]] for second UV coordinates.*  '''ARRAY_BONES''' = '''6'''  [[PackedFloat32Array GD|PackedFloat32Array]] or [[PackedInt32Array GD|PackedInt32Array]] of bone indices. Each element in groups of 4 floats.*  '''ARRAY_WEIGHTS''' = '''7'''  [[PackedFloat32Array GD|PackedFloat32Array]] of bone weights. Each element in groups of 4 floats.*  '''ARRAY_INDEX''' = '''8'''  [[PackedInt32Array GD|PackedInt32Array]] of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the \*i\*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line.*  '''ARRAY_MAX''' = '''9'''  Represents the size of the [[#ArrayType|ArrayType]] enum.=== ArrayFormat ====== ARRAY_FORMAT_VERTEX ====== ARRAY_FORMAT_NORMAL ====== ARRAY_FORMAT_TANGENT ====== ARRAY_FORMAT_COLOR ====== ARRAY_FORMAT_TEX_UV ====== ARRAY_FORMAT_TEX_UV2 ====== ARRAY_FORMAT_BONES ====== ARRAY_FORMAT_WEIGHTS ====== ARRAY_FORMAT_INDEX ===enum '''ArrayFormat''':*  '''ARRAY_FORMAT_VERTEX''' = '''1'''  Array format will include vertices (mandatory).*  '''ARRAY_FORMAT_NORMAL''' = '''2'''  Array format will include normals.*  '''ARRAY_FORMAT_TANGENT''' = '''4'''  Array format will include tangents.*  '''ARRAY_FORMAT_COLOR''' = '''8'''  Array format will include a color array.*  '''ARRAY_FORMAT_TEX_UV''' = '''16'''  Array format will include UVs.*  '''ARRAY_FORMAT_TEX_UV2''' = '''32'''  Array format will include another set of UVs.*  '''ARRAY_FORMAT_BONES''' = '''64'''  Array format will include bone indices.*  '''ARRAY_FORMAT_WEIGHTS''' = '''128'''  Array format will include bone weights.*  '''ARRAY_FORMAT_INDEX''' = '''256'''  Index array will be used.== Constants ===== NO_INDEX_ARRAY ====== ARRAY_WEIGHTS_SIZE ===*  '''NO_INDEX_ARRAY''' = '''-1'''  Default value used for index_array_len when no indices are present.*  '''ARRAY_WEIGHTS_SIZE''' = '''4'''  Amount of weights/bone indices per vertex (always 4).== Property Descriptions ===== blend_shape_mode ===*  [[#BlendShapeMode|BlendShapeMode]] '''blend_shape_mode'''{| class="wikitable | ''Default''|| {{Span|1}}                       |-| ''Setter''|| set_blend_shape_mode(value) |-| ''Getter''|| get_blend_shape_mode()      |}Sets the blend shape mode to one of [[#BlendShapeMode|BlendShapeMode]].=== custom_aabb ===*  [[AABB GD|AABB]] '''custom_aabb'''{| class="wikitable | ''Default''|| {{Span|AABB( 0, 0, 0, 0, 0, 0 )}} |-| ''Setter''|| set_custom_aabb(value)       |-| ''Getter''|| get_custom_aabb()            |}Overrides the [[AABB GD|AABB]] with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.== Method Descriptions ===== add_blend_shape ===*  void '''add_blend_shape''' '''(''' [[StringName GD|StringName]] name ''')'''Adds name for a blend shape that will be added with [[#add_surface_from_arrays|add_surface_from_arrays]]. Must be called before surface is added.=== add_surface_from_arrays ===*  void '''add_surface_from_arrays''' '''(''' [[#PrimitiveType|PrimitiveType]] primitive, [[Array GD|Array]] arrays, [[Array GD|Array]] blend_shapes=[  ], [[Dictionary GD|Dictionary]] lods={  }, int compress_flags=31744 ''')'''Creates a new surface.Surfaces are created to be rendered using a {{Span|primitive}}, which may be any of the types defined in [[#PrimitiveType|PrimitiveType]]. (As a note, when using indices, it is recommended to only use points, lines or triangles.) [[Mesh GD#get_surface_count|Mesh.get_surface_count()]] will become the {{Span|surf_idx}} for this new surface.The {{Span|arrays}} argument is an array of arrays. See [[#ArrayType|ArrayType]] for the values used in this array. For example, {{Span|arrays[0]}} is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for [[ArrayMesh GD#ARRAY_INDEX|ARRAY_INDEX]] if it is used.Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices.Godot uses clockwise winding order for front faces of triangle primitive modes.=== clear_blend_shapes ===*  void '''clear_blend_shapes ( )'''Removes all blend shapes from this {{Span|ArrayMesh}}.=== clear_surfaces ===*  void '''clear_surfaces ( )'''Removes all surfaces from this {{Span|ArrayMesh}}.=== get_blend_shape_count ===*  int '''get_blend_shape_count ( )''' constReturns the number of blend shapes that the {{Span|ArrayMesh}} holds.=== get_blend_shape_name ===*  [[StringName GD|StringName]] '''get_blend_shape_name''' '''(''' int index ''')''' constReturns the name of the blend shape at this index.=== lightmap_unwrap ===*  [[@GlobalScope GD#Error|Error]] '''lightmap_unwrap''' '''(''' [[Transform GD|Transform]] transform, float texel_size ''')'''Will perform a UV unwrap on the {{Span|ArrayMesh}} to prepare the mesh for lightmapping.=== regen_normalmaps ===*  void '''regen_normalmaps ( )'''Will regenerate normal maps for the {{Span|ArrayMesh}}.=== surface_find_by_name ===*  int '''surface_find_by_name''' '''(''' [[String GD|String]] name ''')''' constReturns the index of the first surface with this name held within this {{Span|ArrayMesh}}. If none are found, -1 is returned.=== surface_get_array_index_len ===*  int '''surface_get_array_index_len''' '''(''' int surf_idx ''')''' constReturns the length in indices of the index array in the requested surface (see [[#add_surface_from_arrays|add_surface_from_arrays]]).=== surface_get_array_len ===*  int '''surface_get_array_len''' '''(''' int surf_idx ''')''' constReturns the length in vertices of the vertex array in the requested surface (see [[#add_surface_from_arrays|add_surface_from_arrays]]).=== surface_get_format ===*  int '''surface_get_format''' '''(''' int surf_idx ''')''' constReturns the format mask of the requested surface (see [[#add_surface_from_arrays|add_surface_from_arrays]]).=== surface_get_name ===*  [[String GD|String]] '''surface_get_name''' '''(''' int surf_idx ''')''' constGets the name assigned to this surface.=== surface_get_primitive_type ===*  [[#PrimitiveType|PrimitiveType]] '''surface_get_primitive_type''' '''(''' int surf_idx ''')''' constReturns the primitive type of the requested surface (see [[#add_surface_from_arrays|add_surface_from_arrays]]).=== surface_set_name ===*  void '''surface_set_name''' '''(''' int surf_idx, [[String GD|String]] name ''')'''Sets a name for a given surface.=== surface_update_region ===*  void '''surface_update_region''' '''(''' int surf_idx, int offset, [[PackedByteArray GD|PackedByteArray]] data ''')'''Updates a specified region of mesh arrays on the GPU.'''Warning:''' Only use if you know what you are doing. You can easily cause crashes by calling this function with improper arguments.