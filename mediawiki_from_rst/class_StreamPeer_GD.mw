__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]'''Inherited By:''' [[StreamPeerBuffer GD|StreamPeerBuffer]], [[StreamPeerGDNative GD|StreamPeerGDNative]], [[StreamPeerSSL GD|StreamPeerSSL]], [[StreamPeerTCP GD|StreamPeerTCP]]Abstraction and base class for stream-based protocols.== Description ==StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or UNIX sockets). It provides an API for sending and receiving data through streams as raw data or strings.== Properties =={| class="wikitable | bool|| [[#big_endian|big_endian]]|| {{Span|false}} |}== Methods =={| class="wikitable | int|| [[#get_16|get_16]] '''(''' ''')'''                                                                                   |-| int|| [[#get_32|get_32]] '''(''' ''')'''                                                                                   |-| int|| [[#get_64|get_64]] '''(''' ''')'''                                                                                   |-| int|| [[#get_8|get_8]] '''(''' ''')'''                                                                                     |-| int|| [[#get_available_bytes|get_available_bytes]] '''(''' ''')''' const                                                   |-| [[Array GD|Array]]|| [[#get_data|get_data]] '''(''' int bytes ''')'''                                                   |-| float|| [[#get_double|get_double]] '''(''' ''')'''                                                                           |-| float|| [[#get_float|get_float]] '''(''' ''')'''                                                                             |-| [[Array GD|Array]]|| [[#get_partial_data|get_partial_data]] '''(''' int bytes ''')'''                                   |-| [[String GD|String]]|| [[#get_string|get_string]] '''(''' int bytes=-1 ''')'''                                            |-| int|| [[#get_u16|get_u16]] '''(''' ''')'''                                                                                 |-| int|| [[#get_u32|get_u32]] '''(''' ''')'''                                                                                 |-| int|| [[#get_u64|get_u64]] '''(''' ''')'''                                                                                 |-| int|| [[#get_u8|get_u8]] '''(''' ''')'''                                                                                   |-| [[String GD|String]]|| [[#get_utf8_string|get_utf8_string]] '''(''' int bytes=-1 ''')'''                                  |-| [[Variant GD|Variant]]|| [[#get_var|get_var]] '''(''' bool allow_objects=false ''')'''                                     |-| void|| [[#put_16|put_16]] '''(''' int value ''')'''                                                       |-| void|| [[#put_32|put_32]] '''(''' int value ''')'''                                                       |-| void|| [[#put_64|put_64]] '''(''' int value ''')'''                                                       |-| void|| [[#put_8|put_8]] '''(''' int value ''')'''                                                         |-| [[@GlobalScope GD#Error|Error]]|| [[#put_data|put_data]] '''(''' [[PackedByteArray GD|PackedByteArray]] data ''')'''                            |-| void|| [[#put_double|put_double]] '''(''' float value ''')'''                                           |-| void|| [[#put_float|put_float]] '''(''' float value ''')'''                                             |-| [[Array GD|Array]]|| [[#put_partial_data|put_partial_data]] '''(''' [[PackedByteArray GD|PackedByteArray]] data ''')'''            |-| void|| [[#put_string|put_string]] '''(''' [[String GD|String]] value ''')'''                                         |-| void|| [[#put_u16|put_u16]] '''(''' int value ''')'''                                                     |-| void|| [[#put_u32|put_u32]] '''(''' int value ''')'''                                                     |-| void|| [[#put_u64|put_u64]] '''(''' int value ''')'''                                                     |-| void|| [[#put_u8|put_u8]] '''(''' int value ''')'''                                                       |-| void|| [[#put_utf8_string|put_utf8_string]] '''(''' [[String GD|String]] value ''')'''                               |-| void|| [[#put_var|put_var]] '''(''' [[Variant GD|Variant]] value, bool full_objects=false ''')''' |}== Property Descriptions ===== big_endian ===*  bool '''big_endian'''{| class="wikitable | ''Default''|| {{Span|false}}               |-| ''Setter''|| set_big_endian(value)   |-| ''Getter''|| is_big_endian_enabled() |}If {{Span|true}}, this {{Span|StreamPeer}} will using big-endian format for encoding and decoding.== Method Descriptions ===== get_16 ===*  int '''get_16 ( )'''Gets a signed 16-bit value from the stream.=== get_32 ===*  int '''get_32 ( )'''Gets a signed 32-bit value from the stream.=== get_64 ===*  int '''get_64 ( )'''Gets a signed 64-bit value from the stream.=== get_8 ===*  int '''get_8 ( )'''Gets a signed byte from the stream.=== get_available_bytes ===*  int '''get_available_bytes ( )''' constReturns the amount of bytes this {{Span|StreamPeer}} has available.=== get_data ===*  [[Array GD|Array]] '''get_data''' '''(''' int bytes ''')'''Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the {{Span|bytes}} argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an [[@GlobalScope GD#Error|Error]] code and a data array.=== get_double ===*  float '''get_double ( )'''Gets a double-precision float from the stream.=== get_float ===*  float '''get_float ( )'''Gets a single-precision float from the stream.=== get_partial_data ===*  [[Array GD|Array]] '''get_partial_data''' '''(''' int bytes ''')'''Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an [[@GlobalScope GD#Error|Error]] code, and a data array.=== get_string ===*  [[String GD|String]] '''get_string''' '''(''' int bytes=-1 ''')'''Gets a string with byte-length {{Span|bytes}} from the stream. If {{Span|bytes}} is negative (default) the length will be read from the stream using the reverse process of [[#put_string|put_string]].=== get_u16 ===*  int '''get_u16 ( )'''Gets an unsigned 16-bit value from the stream.=== get_u32 ===*  int '''get_u32 ( )'''Gets an unsigned 32-bit value from the stream.=== get_u64 ===*  int '''get_u64 ( )'''Gets an unsigned 64-bit value from the stream.=== get_u8 ===*  int '''get_u8 ( )'''Gets an unsigned byte from the stream.=== get_utf8_string ===*  [[String GD|String]] '''get_utf8_string''' '''(''' int bytes=-1 ''')'''Gets an UTF-8 string with byte-length {{Span|bytes}} from the stream (this decodes the string sent as UTF-8). If {{Span|bytes}} is negative (default) the length will be read from the stream using the reverse process of [[#put_utf8_string|put_utf8_string]].=== get_var ===*  [[Variant GD|Variant]] '''get_var''' '''(''' bool allow_objects=false ''')'''Gets a Variant from the stream. If {{Span|allow_objects}} is {{Span|true}}, decoding objects is allowed.'''Warning:''' Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.=== put_16 ===*  void '''put_16''' '''(''' int value ''')'''Puts a signed 16-bit value into the stream.=== put_32 ===*  void '''put_32''' '''(''' int value ''')'''Puts a signed 32-bit value into the stream.=== put_64 ===*  void '''put_64''' '''(''' int value ''')'''Puts a signed 64-bit value into the stream.=== put_8 ===*  void '''put_8''' '''(''' int value ''')'''Puts a signed byte into the stream.=== put_data ===*  [[@GlobalScope GD#Error|Error]] '''put_data''' '''(''' [[PackedByteArray GD|PackedByteArray]] data ''')'''Sends a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an [[@GlobalScope GD#Error|Error]] code.=== put_double ===*  void '''put_double''' '''(''' float value ''')'''Puts a double-precision float into the stream.=== put_float ===*  void '''put_float''' '''(''' float value ''')'''Puts a single-precision float into the stream.=== put_partial_data ===*  [[Array GD|Array]] '''put_partial_data''' '''(''' [[PackedByteArray GD|PackedByteArray]] data ''')'''Sends a chunk of data through the connection. If all the data could not be sent at once, only part of it will. This function returns two values, an [[@GlobalScope GD#Error|Error]] code and an integer, describing how much data was actually sent.=== put_string ===*  void '''put_string''' '''(''' [[String GD|String]] value ''')'''Puts a zero-terminated ASCII string into the stream prepended by a 32-bit unsigned integer representing its size.Note: To put an ASCII string without prepending its size, you can use [[#put_data|put_data]]:::    put_data("Hello world".to_ascii())=== put_u16 ===*  void '''put_u16''' '''(''' int value ''')'''Puts an unsigned 16-bit value into the stream.=== put_u32 ===*  void '''put_u32''' '''(''' int value ''')'''Puts an unsigned 32-bit value into the stream.=== put_u64 ===*  void '''put_u64''' '''(''' int value ''')'''Puts an unsigned 64-bit value into the stream.=== put_u8 ===*  void '''put_u8''' '''(''' int value ''')'''Puts an unsigned byte into the stream.=== put_utf8_string ===*  void '''put_utf8_string''' '''(''' [[String GD|String]] value ''')'''Puts a zero-terminated UTF-8 string into the stream prepended by a 32 bits unsigned integer representing its size.Note: To put an UTF-8 string without prepending its size, you can use [[#put_data|put_data]]:::    put_data("Hello world".to_utf8())=== put_var ===*  void '''put_var''' '''(''' [[Variant GD|Variant]] value, bool full_objects=false ''')'''Puts a Variant into the stream. If {{Span|full_objects}} is {{Span|true}} encoding objects is allowed (and can potentially include code).