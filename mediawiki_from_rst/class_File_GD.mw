__NOTOC__'''Inherits:''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Type to handle file reading and writing operations.== Description ==File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.Here's a sample on how to write and read from a file:::    func save(content):        var file = File.new()        file.open("user://save_game.dat", File.WRITE)        file.store_string(content)        file.close()        func load():        var file = File.new()        file.open("user://save_game.dat", File.READ)        var content = file.get_as_text()        file.close()        return content== Tutorials ==*  :doc:`../getting_started/step_by_step/filesystem`== Properties =={| class="wikitable | bool|| [[#endian_swap|endian_swap]]|| {{Span|false}} |}== Methods =={| class="wikitable | void|| [[#close|close]] '''(''' ''')'''                                                                                                                                                                              |-| bool|| [[#eof_reached|eof_reached]] '''(''' ''')''' const                                                                                                                                                            |-| bool|| [[#file_exists|file_exists]] '''(''' [[String GD|String]] path ''')''' const                                                                                                                           |-| int|| [[#get_16|get_16]] '''(''' ''')''' const                                                                                                                                                                      |-| int|| [[#get_32|get_32]] '''(''' ''')''' const                                                                                                                                                                      |-| int|| [[#get_64|get_64]] '''(''' ''')''' const                                                                                                                                                                      |-| int|| [[#get_8|get_8]] '''(''' ''')''' const                                                                                                                                                                        |-| [[String GD|String]]|| [[#get_as_text|get_as_text]] '''(''' ''')''' const                                                                                                                                                            |-| [[PackedByteArray GD|PackedByteArray]]|| [[#get_buffer|get_buffer]] '''(''' int len ''')''' const                                                                                                                                    |-| [[PackedStringArray GD|PackedStringArray]]|| [[#get_csv_line|get_csv_line]] '''(''' [[String GD|String]] delim="," ''')''' const                                                                                                                    |-| float|| [[#get_double|get_double]] '''(''' ''')''' const                                                                                                                                                              |-| [[@GlobalScope GD#Error|Error]]|| [[#get_error|get_error]] '''(''' ''')''' const                                                                                                                                                                |-| float|| [[#get_float|get_float]] '''(''' ''')''' const                                                                                                                                                                |-| int|| [[#get_len|get_len]] '''(''' ''')''' const                                                                                                                                                                    |-| [[String GD|String]]|| [[#get_line|get_line]] '''(''' ''')''' const                                                                                                                                                                  |-| [[String GD|String]]|| [[#get_md5|get_md5]] '''(''' [[String GD|String]] path ''')''' const                                                                                                                                   |-| int|| [[#get_modified_time|get_modified_time]] '''(''' [[String GD|String]] file ''')''' const                                                                                                               |-| [[String GD|String]]|| [[#get_pascal_string|get_pascal_string]] '''(''' ''')'''                                                                                                                                                      |-| [[String GD|String]]|| [[#get_path|get_path]] '''(''' ''')''' const                                                                                                                                                                  |-| [[String GD|String]]|| [[#get_path_absolute|get_path_absolute]] '''(''' ''')''' const                                                                                                                                                |-| int|| [[#get_position|get_position]] '''(''' ''')''' const                                                                                                                                                          |-| float|| [[#get_real|get_real]] '''(''' ''')''' const                                                                                                                                                                  |-| [[String GD|String]]|| [[#get_sha256|get_sha256]] '''(''' [[String GD|String]] path ''')''' const                                                                                                                             |-| [[Variant GD|Variant]]|| [[#get_var|get_var]] '''(''' bool allow_objects=false ''')''' const                                                                                                                        |-| bool|| [[#is_open|is_open]] '''(''' ''')''' const                                                                                                                                                                    |-| [[@GlobalScope GD#Error|Error]]|| [[#open|open]] '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] flags ''')'''                                                                                                  |-| [[@GlobalScope GD#Error|Error]]|| [[#open_compressed|open_compressed]] '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] mode_flags, [[#CompressionMode|CompressionMode]] compression_mode=0 ''')''' |-| [[@GlobalScope GD#Error|Error]]|| [[#open_encrypted|open_encrypted]] '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] mode_flags, [[PackedByteArray GD|PackedByteArray]] key ''')'''                      |-| [[@GlobalScope GD#Error|Error]]|| [[#open_encrypted_with_pass|open_encrypted_with_pass]] '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] mode_flags, [[String GD|String]] pass ''')'''                   |-| void|| [[#seek|seek]] '''(''' int position ''')'''                                                                                                                                                 |-| void|| [[#seek_end|seek_end]] '''(''' int position=0 ''')'''                                                                                                                                       |-| void|| [[#store_16|store_16]] '''(''' int value ''')'''                                                                                                                                            |-| void|| [[#store_32|store_32]] '''(''' int value ''')'''                                                                                                                                            |-| void|| [[#store_64|store_64]] '''(''' int value ''')'''                                                                                                                                            |-| void|| [[#store_8|store_8]] '''(''' int value ''')'''                                                                                                                                              |-| void|| [[#store_buffer|store_buffer]] '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''                                                                                                           |-| void|| [[#store_csv_line|store_csv_line]] '''(''' [[PackedStringArray GD|PackedStringArray]] values, [[String GD|String]] delim="," ''')'''                                                            |-| void|| [[#store_double|store_double]] '''(''' float value ''')'''                                                                                                                                |-| void|| [[#store_float|store_float]] '''(''' float value ''')'''                                                                                                                                  |-| void|| [[#store_line|store_line]] '''(''' [[String GD|String]] line ''')'''                                                                                                                                   |-| void|| [[#store_pascal_string|store_pascal_string]] '''(''' [[String GD|String]] string ''')'''                                                                                                               |-| void|| [[#store_real|store_real]] '''(''' float value ''')'''                                                                                                                                    |-| void|| [[#store_string|store_string]] '''(''' [[String GD|String]] string ''')'''                                                                                                                             |-| void|| [[#store_var|store_var]] '''(''' [[Variant GD|Variant]] value, bool full_objects=false ''')'''                                                                                      |}== Enumerations ===== ModeFlags ====== READ ====== WRITE ====== READ_WRITE ====== WRITE_READ ===enum '''ModeFlags''':*  '''READ''' = '''1'''  Opens the file for read operations.*  '''WRITE''' = '''2'''  Opens the file for write operations. Create it if the file does not exist and truncate if it exists.*  '''READ_WRITE''' = '''3'''  Opens the file for read and write operations. Does not truncate the file.*  '''WRITE_READ''' = '''7'''  Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists.=== CompressionMode ====== COMPRESSION_FASTLZ ====== COMPRESSION_DEFLATE ====== COMPRESSION_ZSTD ====== COMPRESSION_GZIP ===enum '''CompressionMode''':*  '''COMPRESSION_FASTLZ''' = '''0'''  Uses the [http://fastlz.org/ FastLZ] compression method.*  '''COMPRESSION_DEFLATE''' = '''1'''  Uses the [https://en.wikipedia.org/wiki/DEFLATE DEFLATE] compression method.*  '''COMPRESSION_ZSTD''' = '''2'''  Uses the [https://facebook.github.io/zstd/ Zstandard] compression method.*  '''COMPRESSION_GZIP''' = '''3'''  Uses the [https://www.gzip.org/ gzip] compression method.== Property Descriptions ===== endian_swap ===*  bool '''endian_swap'''{| class="wikitable | ''Default''|| {{Span|false}}              |-| ''Setter''|| set_endian_swap(value) |-| ''Getter''|| get_endian_swap()      |}If {{Span|true}}, the file's endianness is swapped. Use this if you're dealing with files written on big-endian machines.'''Note:''' This is about the file format, not CPU type. This is always reset to {{Span|false}} whenever you open the file.== Method Descriptions ===== close ===*  void '''close ( )'''Closes the currently opened file.=== eof_reached ===*  bool '''eof_reached ( )''' constReturns {{Span|true}} if the file cursor has read past the end of the file.'''Note:''' This function will still return {{Span|false}} while at the end of the file and only activates when reading past it. This can be confusing but it conforms to how low-level file access works in all operating systems. There is always [[#get_len|get_len]] and [[#get_position|get_position]] to implement a custom logic.=== file_exists ===*  bool '''file_exists''' '''(''' [[String GD|String]] path ''')''' constReturns {{Span|true}} if the file exists in the given path.'''Note:''' Many resources types are imported (e.g. textures or sound files), and that their source asset will not be included in the exported game, as only the imported version is used (in the {{Span|res://.import}} folder). To check for the existence of such resources while taking into account the remapping to their imported location, use [[ResourceLoader GD#exists|ResourceLoader.exists()]]. Typically, using {{Span|File.file_exists}} on an imported resource would work while you are developing in the editor (the source asset is present in {{Span|res://}}, but fail when exported).=== get_16 ===*  int '''get_16 ( )''' constReturns the next 16 bits from the file as an integer.=== get_32 ===*  int '''get_32 ( )''' constReturns the next 32 bits from the file as an integer.=== get_64 ===*  int '''get_64 ( )''' constReturns the next 64 bits from the file as an integer.=== get_8 ===*  int '''get_8 ( )''' constReturns the next 8 bits from the file as an integer.=== get_as_text ===*  [[String GD|String]] '''get_as_text ( )''' constReturns the whole file as a [[String GD|String]].Text is interpreted as being UTF-8 encoded.=== get_buffer ===*  [[PackedByteArray GD|PackedByteArray]] '''get_buffer''' '''(''' int len ''')''' constReturns next {{Span|len}} bytes of the file as a [[PackedByteArray GD|PackedByteArray]].=== get_csv_line ===*  [[PackedStringArray GD|PackedStringArray]] '''get_csv_line''' '''(''' [[String GD|String]] delim="," ''')''' constReturns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter {{Span|delim}} to use other than the default {{Span|","}} (comma). This delimiter must be one-character long.Text is interpreted as being UTF-8 encoded.=== get_double ===*  float '''get_double ( )''' constReturns the next 64 bits from the file as a floating-point number.=== get_error ===*  [[@GlobalScope GD#Error|Error]] '''get_error ( )''' constReturns the last error that happened when trying to perform operations. Compare with the {{Span|ERR_FILE_*}} constants from [[@GlobalScope GD#Error|Error]].=== get_float ===*  float '''get_float ( )''' constReturns the next 32 bits from the file as a floating-point number.=== get_len ===*  int '''get_len ( )''' constReturns the size of the file in bytes.=== get_line ===*  [[String GD|String]] '''get_line ( )''' constReturns the next line of the file as a [[String GD|String]].Text is interpreted as being UTF-8 encoded.=== get_md5 ===*  [[String GD|String]] '''get_md5''' '''(''' [[String GD|String]] path ''')''' constReturns an MD5 String representing the file at the given path or an empty [[String GD|String]] on failure.=== get_modified_time ===*  int '''get_modified_time''' '''(''' [[String GD|String]] file ''')''' constReturns the last time the {{Span|file}} was modified in unix timestamp format or returns a [[String GD|String]] "ERROR IN {{Span|file}}". This unix timestamp can be converted to datetime by using [[OS GD#get_datetime_from_unix_time|OS.get_datetime_from_unix_time()]].=== get_pascal_string ===*  [[String GD|String]] '''get_pascal_string ( )'''Returns a [[String GD|String]] saved in Pascal format from the file.Text is interpreted as being UTF-8 encoded.=== get_path ===*  [[String GD|String]] '''get_path ( )''' constReturns the path as a [[String GD|String]] for the current open file.=== get_path_absolute ===*  [[String GD|String]] '''get_path_absolute ( )''' constReturns the absolute path as a [[String GD|String]] for the current open file.=== get_position ===*  int '''get_position ( )''' constReturns the file cursor's position.=== get_real ===*  float '''get_real ( )''' constReturns the next bits from the file as a floating-point number.=== get_sha256 ===*  [[String GD|String]] '''get_sha256''' '''(''' [[String GD|String]] path ''')''' constReturns a SHA-256 [[String GD|String]] representing the file at the given path or an empty [[String GD|String]] on failure.=== get_var ===*  [[Variant GD|Variant]] '''get_var''' '''(''' bool allow_objects=false ''')''' constReturns the next [[Variant GD|Variant]] value from the file. If {{Span|allow_objects}} is {{Span|true}}, decoding objects is allowed.'''Warning:''' Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.=== is_open ===*  bool '''is_open ( )''' constReturns {{Span|true}} if the file is currently opened.=== open ===*  [[@GlobalScope GD#Error|Error]] '''open''' '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] flags ''')'''Opens the file for writing or reading, depending on the flags.=== open_compressed ===*  [[@GlobalScope GD#Error|Error]] '''open_compressed''' '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] mode_flags, [[#CompressionMode|CompressionMode]] compression_mode=0 ''')'''Opens a compressed file for reading or writing.=== open_encrypted ===*  [[@GlobalScope GD#Error|Error]] '''open_encrypted''' '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] mode_flags, [[PackedByteArray GD|PackedByteArray]] key ''')'''Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.=== open_encrypted_with_pass ===*  [[@GlobalScope GD#Error|Error]] '''open_encrypted_with_pass''' '''(''' [[String GD|String]] path, [[#ModeFlags|ModeFlags]] mode_flags, [[String GD|String]] pass ''')'''Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.=== seek ===*  void '''seek''' '''(''' int position ''')'''Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file).=== seek_end ===*  void '''seek_end''' '''(''' int position=0 ''')'''Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).'''Note:''' This is an offset, so you should use negative numbers or the cursor will be at the end of the file.=== store_16 ===*  void '''store_16''' '''(''' int value ''')'''Stores an integer as 16 bits in the file.=== store_32 ===*  void '''store_32''' '''(''' int value ''')'''Stores an integer as 32 bits in the file.=== store_64 ===*  void '''store_64''' '''(''' int value ''')'''Stores an integer as 64 bits in the file.=== store_8 ===*  void '''store_8''' '''(''' int value ''')'''Stores an integer as 8 bits in the file.=== store_buffer ===*  void '''store_buffer''' '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''Stores the given array of bytes in the file.=== store_csv_line ===*  void '''store_csv_line''' '''(''' [[PackedStringArray GD|PackedStringArray]] values, [[String GD|String]] delim="," ''')'''Store the given [[PackedStringArray GD|PackedStringArray]] in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter {{Span|delim}} to use other than the default {{Span|","}} (comma). This delimiter must be one-character long.Text will be encoded as UTF-8.=== store_double ===*  void '''store_double''' '''(''' float value ''')'''Stores a floating-point number as 64 bits in the file.=== store_float ===*  void '''store_float''' '''(''' float value ''')'''Stores a floating-point number as 32 bits in the file.=== store_line ===*  void '''store_line''' '''(''' [[String GD|String]] line ''')'''Stores the given [[String GD|String]] as a line in the file.Text will be encoded as UTF-8.=== store_pascal_string ===*  void '''store_pascal_string''' '''(''' [[String GD|String]] string ''')'''Stores the given [[String GD|String]] as a line in the file in Pascal format (i.e. also store the length of the string).Text will be encoded as UTF-8.=== store_real ===*  void '''store_real''' '''(''' float value ''')'''Stores a floating-point number in the file.=== store_string ===*  void '''store_string''' '''(''' [[String GD|String]] string ''')'''Stores the given [[String GD|String]] in the file.Text will be encoded as UTF-8.=== store_var ===*  void '''store_var''' '''(''' [[Variant GD|Variant]] value, bool full_objects=false ''')'''Stores any Variant value in the file. If {{Span|full_objects}} is {{Span|true}}, encoding objects is allowed (and can potentially include code).