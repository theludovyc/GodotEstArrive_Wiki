__NOTOC__'''Inherits:''' [[Resource GD|Resource]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]Image datatype.== Description ==Native image datatype. Contains image data, which can be converted to a [[Texture2D GD|Texture2D]], and several functions to interact with it. The maximum width and height for an {{Span|Image}} are [[Image GD#MAX_WIDTH|MAX_WIDTH]] and [[Image GD#MAX_HEIGHT|MAX_HEIGHT]].== Properties =={| class="wikitable | [[Dictionary GD|Dictionary]]|| [[#data|data]]|| {{Span|{"data": PackedByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}}} |}== Methods =={| class="wikitable | void|| [[#blend_rect|blend_rect]] '''(''' [[Image GD|Image]] src, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''                                                                                                    |-| void|| [[#blend_rect_mask|blend_rect_mask]] '''(''' [[Image GD|Image]] src, [[Image GD|Image]] mask, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''                                                          |-| void|| [[#blit_rect|blit_rect]] '''(''' [[Image GD|Image]] src, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''                                                                                                      |-| void|| [[#blit_rect_mask|blit_rect_mask]] '''(''' [[Image GD|Image]] src, [[Image GD|Image]] mask, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''                                                            |-| void|| [[#bumpmap_to_normalmap|bumpmap_to_normalmap]] '''(''' float bump_scale=1.0 ''')'''                                                                                                                                            |-| void|| [[#clear_mipmaps|clear_mipmaps]] '''(''' ''')'''                                                                                                                                                                                                   |-| [[@GlobalScope GD#Error|Error]]|| [[#compress|compress]] '''(''' [[#CompressMode|CompressMode]] mode, [[#CompressSource|CompressSource]] source=0, float lossy_quality=0.7 ''')'''                                                   |-| [[@GlobalScope GD#Error|Error]]|| [[#compress_from_channels|compress_from_channels]] '''(''' [[#CompressMode|CompressMode]] mode, [[#CompressSource|CompressSource]] channels, float lossy_quality=0.7 ''')'''                       |-| void|| [[#convert|convert]] '''(''' [[#Format|Format]] format ''')'''                                                                                                                                                                       |-| void|| [[#copy_from|copy_from]] '''(''' [[Image GD|Image]] src ''')'''                                                                                                                                                                             |-| void|| [[#create|create]] '''(''' int width, int height, bool use_mipmaps, [[#Format|Format]] format ''')'''                                                                         |-| void|| [[#create_from_data|create_from_data]] '''(''' int width, int height, bool use_mipmaps, [[#Format|Format]] format, [[PackedByteArray GD|PackedByteArray]] data ''')''' |-| void|| [[#crop|crop]] '''(''' int width, int height ''')'''                                                                                                                                                           |-| [[@GlobalScope GD#Error|Error]]|| [[#decompress|decompress]] '''(''' ''')'''                                                                                                                                                                                                         |-| [[#AlphaMode|AlphaMode]]|| [[#detect_alpha|detect_alpha]] '''(''' ''')''' const                                                                                                                                                                                               |-| [[#UsedChannels|UsedChannels]]|| [[#detect_used_channels|detect_used_channels]] '''(''' [[#CompressSource|CompressSource]] source=0 ''')'''                                                                                                                           |-| void|| [[#expand_x2_hq2x|expand_x2_hq2x]] '''(''' ''')'''                                                                                                                                                                                                 |-| void|| [[#fill|fill]] '''(''' [[Color GD|Color]] color ''')'''                                                                                                                                                                                     |-| void|| [[#fix_alpha_edges|fix_alpha_edges]] '''(''' ''')'''                                                                                                                                                                                               |-| void|| [[#flip_x|flip_x]] '''(''' ''')'''                                                                                                                                                                                                                 |-| void|| [[#flip_y|flip_y]] '''(''' ''')'''                                                                                                                                                                                                                 |-| [[@GlobalScope GD#Error|Error]]|| [[#generate_mipmaps|generate_mipmaps]] '''(''' bool renormalize=false ''')'''                                                                                                                                                   |-| [[PackedByteArray GD|PackedByteArray]]|| [[#get_data|get_data]] '''(''' ''')''' const                                                                                                                                                                                                       |-| [[#Format|Format]]|| [[#get_format|get_format]] '''(''' ''')''' const                                                                                                                                                                                                   |-| int|| [[#get_height|get_height]] '''(''' ''')''' const                                                                                                                                                                                                   |-| int|| [[#get_mipmap_offset|get_mipmap_offset]] '''(''' int mipmap ''')''' const                                                                                                                                                        |-| [[Color GD|Color]]|| [[#get_pixel|get_pixel]] '''(''' int x, int y ''')''' const                                                                                                                                                    |-| [[Color GD|Color]]|| [[#get_pixelv|get_pixelv]] '''(''' [[Vector2 GD|Vector2]] src ''')''' const                                                                                                                                                                 |-| [[Image GD|Image]]|| [[#get_rect|get_rect]] '''(''' [[Rect2 GD|Rect2]] rect ''')''' const                                                                                                                                                                        |-| [[Vector2 GD|Vector2]]|| [[#get_size|get_size]] '''(''' ''')''' const                                                                                                                                                                                                       |-| [[Rect2 GD|Rect2]]|| [[#get_used_rect|get_used_rect]] '''(''' ''')''' const                                                                                                                                                                                             |-| int|| [[#get_width|get_width]] '''(''' ''')''' const                                                                                                                                                                                                     |-| bool|| [[#has_mipmaps|has_mipmaps]] '''(''' ''')''' const                                                                                                                                                                                                 |-| bool|| [[#is_compressed|is_compressed]] '''(''' ''')''' const                                                                                                                                                                                             |-| bool|| [[#is_empty|is_empty]] '''(''' ''')''' const                                                                                                                                                                                                       |-| bool|| [[#is_invisible|is_invisible]] '''(''' ''')''' const                                                                                                                                                                                               |-| [[@GlobalScope GD#Error|Error]]|| [[#load|load]] '''(''' [[String GD|String]] path ''')'''                                                                                                                                                                                    |-| [[@GlobalScope GD#Error|Error]]|| [[#load_jpg_from_buffer|load_jpg_from_buffer]] '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''                                                                                                                                |-| [[@GlobalScope GD#Error|Error]]|| [[#load_png_from_buffer|load_png_from_buffer]] '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''                                                                                                                                |-| [[@GlobalScope GD#Error|Error]]|| [[#load_webp_from_buffer|load_webp_from_buffer]] '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''                                                                                                                              |-| void|| [[#normalmap_to_xy|normalmap_to_xy]] '''(''' ''')'''                                                                                                                                                                                               |-| void|| [[#premultiply_alpha|premultiply_alpha]] '''(''' ''')'''                                                                                                                                                                                           |-| void|| [[#resize|resize]] '''(''' int width, int height, [[#Interpolation|Interpolation]] interpolation=1 ''')'''                                                                                       |-| void|| [[#resize_to_po2|resize_to_po2]] '''(''' bool square=false ''')'''                                                                                                                                                              |-| [[Image GD|Image]]|| [[#rgbe_to_srgb|rgbe_to_srgb]] '''(''' ''')'''                                                                                                                                                                                                     |-| [[@GlobalScope GD#Error|Error]]|| [[#save_exr|save_exr]] '''(''' [[String GD|String]] path, bool grayscale=false ''')''' const                                                                                                                             |-| [[@GlobalScope GD#Error|Error]]|| [[#save_png|save_png]] '''(''' [[String GD|String]] path ''')''' const                                                                                                                                                                      |-| void|| [[#set_pixel|set_pixel]] '''(''' int x, int y, [[Color GD|Color]] color ''')'''                                                                                                                         |-| void|| [[#set_pixelv|set_pixelv]] '''(''' [[Vector2 GD|Vector2]] dst, [[Color GD|Color]] color ''')'''                                                                                                                                      |-| void|| [[#shrink_x2|shrink_x2]] '''(''' ''')'''                                                                                                                                                                                                           |-| void|| [[#srgb_to_linear|srgb_to_linear]] '''(''' ''')'''                                                                                                                                                                                                 |}== Enumerations ===== Format ====== FORMAT_L8 ====== FORMAT_LA8 ====== FORMAT_R8 ====== FORMAT_RG8 ====== FORMAT_RGB8 ====== FORMAT_RGBA8 ====== FORMAT_RGBA4444 ====== FORMAT_RGB565 ====== FORMAT_RF ====== FORMAT_RGF ====== FORMAT_RGBF ====== FORMAT_RGBAF ====== FORMAT_RH ====== FORMAT_RGH ====== FORMAT_RGBH ====== FORMAT_RGBAH ====== FORMAT_RGBE9995 ====== FORMAT_DXT1 ====== FORMAT_DXT3 ====== FORMAT_DXT5 ====== FORMAT_RGTC_R ====== FORMAT_RGTC_RG ====== FORMAT_BPTC_RGBA ====== FORMAT_BPTC_RGBF ====== FORMAT_BPTC_RGBFU ====== FORMAT_PVRTC2 ====== FORMAT_PVRTC2A ====== FORMAT_PVRTC4 ====== FORMAT_PVRTC4A ====== FORMAT_ETC ====== FORMAT_ETC2_R11 ====== FORMAT_ETC2_R11S ====== FORMAT_ETC2_RG11 ====== FORMAT_ETC2_RG11S ====== FORMAT_ETC2_RGB8 ====== FORMAT_ETC2_RGBA8 ====== FORMAT_ETC2_RGB8A1 ====== FORMAT_ETC2_RA_AS_RG ====== FORMAT_DXT5_RA_AS_RG ====== FORMAT_MAX ===enum '''Format''':*  '''FORMAT_L8''' = '''0'''  Texture format with a single 8-bit depth representing luminance.*  '''FORMAT_LA8''' = '''1'''  OpenGL texture format with two values, luminance and alpha each stored with 8 bits.*  '''FORMAT_R8''' = '''2'''  OpenGL texture format {{Span|RED}} with a single component and a bitdepth of 8.*  '''FORMAT_RG8''' = '''3'''  OpenGL texture format {{Span|RG}} with two components and a bitdepth of 8 for each.*  '''FORMAT_RGB8''' = '''4'''  OpenGL texture format {{Span|RGB}} with three components, each with a bitdepth of 8.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_RGBA8''' = '''5'''  OpenGL texture format {{Span|RGBA}} with four components, each with a bitdepth of 8.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_RGBA4444''' = '''6'''  OpenGL texture format {{Span|RGBA}} with four components, each with a bitdepth of 4.*  '''FORMAT_RGB565''' = '''7'''*  '''FORMAT_RF''' = '''8'''  OpenGL texture format {{Span|GL_R32F}} where there's one component, a 32-bit floating-point value.*  '''FORMAT_RGF''' = '''9'''  OpenGL texture format {{Span|GL_RG32F}} where there are two components, each a 32-bit floating-point values.*  '''FORMAT_RGBF''' = '''10'''  OpenGL texture format {{Span|GL_RGB32F}} where there are three components, each a 32-bit floating-point values.*  '''FORMAT_RGBAF''' = '''11'''  OpenGL texture format {{Span|GL_RGBA32F}} where there are four components, each a 32-bit floating-point values.*  '''FORMAT_RH''' = '''12'''  OpenGL texture format {{Span|GL_R32F}} where there's one component, a 16-bit "half-precision" floating-point value.*  '''FORMAT_RGH''' = '''13'''  OpenGL texture format {{Span|GL_RG32F}} where there are two components, each a 16-bit "half-precision" floating-point value.*  '''FORMAT_RGBH''' = '''14'''  OpenGL texture format {{Span|GL_RGB32F}} where there are three components, each a 16-bit "half-precision" floating-point value.*  '''FORMAT_RGBAH''' = '''15'''  OpenGL texture format {{Span|GL_RGBA32F}} where there are four components, each a 16-bit "half-precision" floating-point value.*  '''FORMAT_RGBE9995''' = '''16'''  A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent.*  '''FORMAT_DXT1''' = '''17'''  The [https://en.wikipedia.org/wiki/S3_Texture_Compression S3TC] texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_DXT3''' = '''18'''  The [https://en.wikipedia.org/wiki/S3_Texture_Compression S3TC] texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_DXT5''' = '''19'''  The [https://en.wikipedia.org/wiki/S3_Texture_Compression S3TC] texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_RGTC_R''' = '''20'''  Texture format that uses [https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression Red Green Texture Compression], normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel.*  '''FORMAT_RGTC_RG''' = '''21'''  Texture format that uses [https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression Red Green Texture Compression], normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel.*  '''FORMAT_BPTC_RGBA''' = '''22'''  Texture format that uses [https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression BPTC] compression with unsigned normalized RGBA components.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_BPTC_RGBF''' = '''23'''  Texture format that uses [https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression BPTC] compression with signed floating-point RGB components.*  '''FORMAT_BPTC_RGBFU''' = '''24'''  Texture format that uses [https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression BPTC] compression with unsigned floating-point RGB components.*  '''FORMAT_PVRTC2''' = '''25'''  Texture format used on PowerVR-supported mobile platforms, uses 2-bit color depth with no alpha. More information can be found [https://en.wikipedia.org/wiki/PVRTC here].'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_PVRTC2A''' = '''26'''  Same as [https://en.wikipedia.org/wiki/PVRTC PVRTC2], but with an alpha component.*  '''FORMAT_PVRTC4''' = '''27'''  Similar to [https://en.wikipedia.org/wiki/PVRTC PVRTC2], but with 4-bit color depth and no alpha.*  '''FORMAT_PVRTC4A''' = '''28'''  Same as [https://en.wikipedia.org/wiki/PVRTC PVRTC4], but with an alpha component.*  '''FORMAT_ETC''' = '''29'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1 Ericsson Texture Compression format 1], also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel.*  '''FORMAT_ETC2_R11''' = '''30'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|R11_EAC}} variant), which provides one channel of unsigned data.*  '''FORMAT_ETC2_R11S''' = '''31'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|SIGNED_R11_EAC}} variant), which provides one channel of signed data.*  '''FORMAT_ETC2_RG11''' = '''32'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|RG11_EAC}} variant), which provides two channels of unsigned data.*  '''FORMAT_ETC2_RG11S''' = '''33'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|SIGNED_RG11_EAC}} variant), which provides two channels of signed data.*  '''FORMAT_ETC2_RGB8''' = '''34'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|RGB8}} variant), which is a follow-up of ETC1 and compresses RGB888 data.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_ETC2_RGBA8''' = '''35'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|RGBA8}}\ variant), which compresses RGBA8888 data with full alpha support.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_ETC2_RGB8A1''' = '''36'''  [https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC Ericsson Texture Compression format 2] ({{Span|RGB8_PUNCHTHROUGH_ALPHA1}} variant), which compresses RGBA data to make alpha either fully transparent or fully opaque.'''Note:''' When creating an [[ImageTexture GD|ImageTexture]], an sRGB to linear color space conversion is performed.*  '''FORMAT_ETC2_RA_AS_RG''' = '''37'''*  '''FORMAT_DXT5_RA_AS_RG''' = '''38'''*  '''FORMAT_MAX''' = '''39'''  Represents the size of the [[#Format|Format]] enum.=== Interpolation ====== INTERPOLATE_NEAREST ====== INTERPOLATE_BILINEAR ====== INTERPOLATE_CUBIC ====== INTERPOLATE_TRILINEAR ====== INTERPOLATE_LANCZOS ===enum '''Interpolation''':*  '''INTERPOLATE_NEAREST''' = '''0'''  Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated.*  '''INTERPOLATE_BILINEAR''' = '''1'''  Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than [[Image GD#INTERPOLATE_CUBIC|INTERPOLATE_CUBIC]], but it results in lower quality.*  '''INTERPOLATE_CUBIC''' = '''2'''  Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to [[Image GD#INTERPOLATE_BILINEAR|INTERPOLATE_BILINEAR]], at the cost of being slower.*  '''INTERPOLATE_TRILINEAR''' = '''3'''  Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.It's slower than [[Image GD#INTERPOLATE_BILINEAR|INTERPOLATE_BILINEAR]], but produces higher-quality results with much less aliasing artifacts.If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.'''Note:''' If you intend to scale multiple copies of the original image, it's better to call [[#generate_mipmaps|generate_mipmaps]]] on it in advance, to avoid wasting processing power in generating them again and again.On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image.*  '''INTERPOLATE_LANCZOS''' = '''4'''  Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscalng images.=== AlphaMode ====== ALPHA_NONE ====== ALPHA_BIT ====== ALPHA_BLEND ===enum '''AlphaMode''':*  '''ALPHA_NONE''' = '''0'''  Image does not have alpha.*  '''ALPHA_BIT''' = '''1'''  Image stores alpha in a single bit.*  '''ALPHA_BLEND''' = '''2'''  Image uses alpha.=== CompressMode ====== COMPRESS_S3TC ====== COMPRESS_PVRTC2 ====== COMPRESS_PVRTC4 ====== COMPRESS_ETC ====== COMPRESS_ETC2 ===enum '''CompressMode''':*  '''COMPRESS_S3TC''' = '''0'''  Use S3TC compression.*  '''COMPRESS_PVRTC2''' = '''1'''  Use PVRTC2 compression.*  '''COMPRESS_PVRTC4''' = '''2'''  Use PVRTC4 compression.*  '''COMPRESS_ETC''' = '''3'''  Use ETC compression.*  '''COMPRESS_ETC2''' = '''4'''  Use ETC2 compression.=== UsedChannels ====== USED_CHANNELS_L ====== USED_CHANNELS_LA ====== USED_CHANNELS_R ====== USED_CHANNELS_RG ====== USED_CHANNELS_RGB ====== USED_CHANNELS_RGBA ===enum '''UsedChannels''':*  '''USED_CHANNELS_L''' = '''0'''*  '''USED_CHANNELS_LA''' = '''1'''*  '''USED_CHANNELS_R''' = '''2'''*  '''USED_CHANNELS_RG''' = '''3'''*  '''USED_CHANNELS_RGB''' = '''4'''*  '''USED_CHANNELS_RGBA''' = '''5'''=== CompressSource ====== COMPRESS_SOURCE_GENERIC ====== COMPRESS_SOURCE_SRGB ====== COMPRESS_SOURCE_NORMAL ===enum '''CompressSource''':*  '''COMPRESS_SOURCE_GENERIC''' = '''0'''  Source texture (before compression) is a regular texture. Default for all textures.*  '''COMPRESS_SOURCE_SRGB''' = '''1'''  Source texture (before compression) is in sRGB space.*  '''COMPRESS_SOURCE_NORMAL''' = '''2'''  Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels).== Constants ===== MAX_WIDTH ====== MAX_HEIGHT ===*  '''MAX_WIDTH''' = '''16777216'''  The maximal width allowed for {{Span|Image}} resources.*  '''MAX_HEIGHT''' = '''16777216'''  The maximal height allowed for {{Span|Image}} resources.== Property Descriptions ===== data ===*  [[Dictionary GD|Dictionary]] '''data'''{| class="wikitable | ''Default''|| {{Span|{"data": PackedByteArray(  ),"format": "Lum8","height": 0,"mipmaps": false,"width": 0}}} |}Holds all of the image's color data in a given format. See [[#Format|Format]] constants.== Method Descriptions ===== blend_rect ===*  void '''blend_rect''' '''(''' [[Image GD|Image]] src, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''Alpha-blends {{Span|src_rect}} from {{Span|src}} image to this image at coordinates {{Span|dest}}.=== blend_rect_mask ===*  void '''blend_rect_mask''' '''(''' [[Image GD|Image]] src, [[Image GD|Image]] mask, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''Alpha-blends {{Span|src_rect}} from {{Span|src}} image to this image using {{Span|mask}} image at coordinates {{Span|dst}}. Alpha channels are required for both {{Span|src}} and {{Span|mask}}. {{Span|dst}} pixels and {{Span|src}} pixels will blend if the corresponding mask pixel's alpha value is not 0. {{Span|src}} image and {{Span|mask}} image '''must''' have the same size (width and height) but they can have different formats.=== blit_rect ===*  void '''blit_rect''' '''(''' [[Image GD|Image]] src, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''Copies {{Span|src_rect}} from {{Span|src}} image to this image at coordinates {{Span|dst}}.=== blit_rect_mask ===*  void '''blit_rect_mask''' '''(''' [[Image GD|Image]] src, [[Image GD|Image]] mask, [[Rect2 GD|Rect2]] src_rect, [[Vector2 GD|Vector2]] dst ''')'''Blits {{Span|src_rect}} area from {{Span|src}} image to this image at the coordinates given by {{Span|dst}}. {{Span|src}} pixel is copied onto {{Span|dst}} if the corresponding {{Span|mask}} pixel's alpha value is not 0. {{Span|src}} image and {{Span|mask}} image '''must''' have the same size (width and height) but they can have different formats.=== bumpmap_to_normalmap ===*  void '''bumpmap_to_normalmap''' '''(''' float bump_scale=1.0 ''')'''Converts a bumpmap to a normalmap. A bumpmap provides a height offset per-pixel, while a normalmap provides a normal direction per pixel.=== clear_mipmaps ===*  void '''clear_mipmaps ( )'''Removes the image's mipmaps.=== compress ===*  [[@GlobalScope GD#Error|Error]] '''compress''' '''(''' [[#CompressMode|CompressMode]] mode, [[#CompressSource|CompressSource]] source=0, float lossy_quality=0.7 ''')'''Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [[#CompressMode|CompressMode]] and [[#CompressSource|CompressSource]] constants.=== compress_from_channels ===*  [[@GlobalScope GD#Error|Error]] '''compress_from_channels''' '''(''' [[#CompressMode|CompressMode]] mode, [[#CompressSource|CompressSource]] channels, float lossy_quality=0.7 ''')'''=== convert ===*  void '''convert''' '''(''' [[#Format|Format]] format ''')'''Converts the image's format. See [[#Format|Format]] constants.=== copy_from ===*  void '''copy_from''' '''(''' [[Image GD|Image]] src ''')'''Copies {{Span|src}} image to this image.=== create ===*  void '''create''' '''(''' int width, int height, bool use_mipmaps, [[#Format|Format]] format ''')'''Creates an empty image of given size and format. See [[#Format|Format]] constants. If {{Span|use_mipmaps}} is {{Span|true}} then generate mipmaps for this image. See the [[#generate_mipmaps|generate_mipmaps]].=== create_from_data ===*  void '''create_from_data''' '''(''' int width, int height, bool use_mipmaps, [[#Format|Format]] format, [[PackedByteArray GD|PackedByteArray]] data ''')'''Creates a new image of given size and format. See [[#Format|Format]] constants. Fills the image with the given raw data. If {{Span|use_mipmaps}} is {{Span|true}} then generate mipmaps for this image. See the [[#generate_mipmaps|generate_mipmaps]].=== crop ===*  void '''crop''' '''(''' int width, int height ''')'''Crops the image to the given {{Span|width}} and {{Span|height}}. If the specified size is larger than the current size, the extra area is filled with black pixels.=== decompress ===*  [[@GlobalScope GD#Error|Error]] '''decompress ( )'''Decompresses the image if it is compressed. Returns an error if decompress function is not available.=== detect_alpha ===*  [[#AlphaMode|AlphaMode]] '''detect_alpha ( )''' constReturns [[Image GD#ALPHA_BLEND|ALPHA_BLEND]] if the image has data for alpha values. Returns [[Image GD#ALPHA_BIT|ALPHA_BIT]] if all the alpha values are stored in a single bit. Returns [[Image GD#ALPHA_NONE|ALPHA_NONE]] if no data for alpha values is found.=== detect_used_channels ===*  [[#UsedChannels|UsedChannels]] '''detect_used_channels''' '''(''' [[#CompressSource|CompressSource]] source=0 ''')'''=== expand_x2_hq2x ===*  void '''expand_x2_hq2x ( )'''Stretches the image and enlarges it by a factor of 2. No interpolation is done.=== fill ===*  void '''fill''' '''(''' [[Color GD|Color]] color ''')'''Fills the image with a given [[Color GD|Color]].=== fix_alpha_edges ===*  void '''fix_alpha_edges ( )'''Blends low-alpha pixels with nearby pixels.=== flip_x ===*  void '''flip_x ( )'''Flips the image horizontally.=== flip_y ===*  void '''flip_y ( )'''Flips the image vertically.=== generate_mipmaps ===*  [[@GlobalScope GD#Error|Error]] '''generate_mipmaps''' '''(''' bool renormalize=false ''')'''Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.=== get_data ===*  [[PackedByteArray GD|PackedByteArray]] '''get_data ( )''' constReturns the image's raw data.=== get_format ===*  [[#Format|Format]] '''get_format ( )''' constReturns the image's format. See [[#Format|Format]] constants.=== get_height ===*  int '''get_height ( )''' constReturns the image's height.=== get_mipmap_offset ===*  int '''get_mipmap_offset''' '''(''' int mipmap ''')''' constReturns the offset where the image's mipmap with index {{Span|mipmap}} is stored in the {{Span|data}} dictionary.=== get_pixel ===*  [[Color GD|Color]] '''get_pixel''' '''(''' int x, int y ''')''' constReturns the color of the pixel at {{Span|(x, y)}}. This is the same as [[#get_pixelv|get_pixelv]], but with two integer arguments instead of a [[Vector2 GD|Vector2]] argument.=== get_pixelv ===*  [[Color GD|Color]] '''get_pixelv''' '''(''' [[Vector2 GD|Vector2]] src ''')''' constReturns the color of the pixel at {{Span|src}}. This is the same as [[#get_pixel|get_pixel]], but with a [[Vector2 GD|Vector2]] argument instead of two integer arguments.=== get_rect ===*  [[Image GD|Image]] '''get_rect''' '''(''' [[Rect2 GD|Rect2]] rect ''')''' constReturns a new image that is a copy of the image's area specified with {{Span|rect}}.=== get_size ===*  [[Vector2 GD|Vector2]] '''get_size ( )''' constReturns the image's size (width and height).=== get_used_rect ===*  [[Rect2 GD|Rect2]] '''get_used_rect ( )''' constReturns a [[Rect2 GD|Rect2]] enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible.=== get_width ===*  int '''get_width ( )''' constReturns the image's width.=== has_mipmaps ===*  bool '''has_mipmaps ( )''' constReturns {{Span|true}} if the image has generated mipmaps.=== is_compressed ===*  bool '''is_compressed ( )''' constReturns {{Span|true}} if the image is compressed.=== is_empty ===*  bool '''is_empty ( )''' constReturns {{Span|true}} if the image has no data.=== is_invisible ===*  bool '''is_invisible ( )''' constReturns {{Span|true}} if all the image's pixels have an alpha value of 0. Returns {{Span|false}} if any pixel has an alpha value higher than 0.=== load ===*  [[@GlobalScope GD#Error|Error]] '''load''' '''(''' [[String GD|String]] path ''')'''Loads an image from file {{Span|path}}.=== load_jpg_from_buffer ===*  [[@GlobalScope GD#Error|Error]] '''load_jpg_from_buffer''' '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''Loads an image from the binary contents of a JPEG file.=== load_png_from_buffer ===*  [[@GlobalScope GD#Error|Error]] '''load_png_from_buffer''' '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''Loads an image from the binary contents of a PNG file.=== load_webp_from_buffer ===*  [[@GlobalScope GD#Error|Error]] '''load_webp_from_buffer''' '''(''' [[PackedByteArray GD|PackedByteArray]] buffer ''')'''Loads an image from the binary contents of a WebP file.=== normalmap_to_xy ===*  void '''normalmap_to_xy ( )'''Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.=== premultiply_alpha ===*  void '''premultiply_alpha ( )'''Multiplies color values with alpha values. Resulting color values for a pixel are {{Span|(color * alpha)/256}}.=== resize ===*  void '''resize''' '''(''' int width, int height, [[#Interpolation|Interpolation]] interpolation=1 ''')'''Resizes the image to the given {{Span|width}} and {{Span|height}}. New pixels are calculated using {{Span|interpolation}}. See {{Span|interpolation}} constants.=== resize_to_po2 ===*  void '''resize_to_po2''' '''(''' bool square=false ''')'''Resizes the image to the nearest power of 2 for the width and height. If {{Span|square}} is {{Span|true}} then set width and height to be the same.=== rgbe_to_srgb ===*  [[Image GD|Image]] '''rgbe_to_srgb ( )'''Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image.=== save_exr ===*  [[@GlobalScope GD#Error|Error]] '''save_exr''' '''(''' [[String GD|String]] path, bool grayscale=false ''')''' constSaves the image as an EXR file to {{Span|path}}. If {{Span|grayscale}} is {{Span|true}} and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return [[@GlobalScope GD#ERR_UNAVAILABLE|@GlobalScope.ERR_UNAVAILABLE()]] if Godot was compiled without the TinyEXR module.=== save_png ===*  [[@GlobalScope GD#Error|Error]] '''save_png''' '''(''' [[String GD|String]] path ''')''' constSaves the image as a PNG file to {{Span|path}}.=== set_pixel ===*  void '''set_pixel''' '''(''' int x, int y, [[Color GD|Color]] color ''')'''Sets the [[Color GD|Color]] of the pixel at {{Span|(x, y)}}. Example:::    var img = Image.new()    img.create(img_width, img_height, false, Image.FORMAT_RGBA8)    img.set_pixel(x, y, color)=== set_pixelv ===*  void '''set_pixelv''' '''(''' [[Vector2 GD|Vector2]] dst, [[Color GD|Color]] color ''')'''Sets the [[Color GD|Color]] of the pixel at {{Span|(dst.x, dst.y)}}. Note that the {{Span|dst}} values must be integers. Example:::    var img = Image.new()    img.create(img_width, img_height, false, Image.FORMAT_RGBA8)    img.set_pixelv(Vector2(x, y), color)=== shrink_x2 ===*  void '''shrink_x2 ( )'''Shrinks the image by a factor of 2.=== srgb_to_linear ===*  void '''srgb_to_linear ( )'''Converts the raw data from the sRGB colorspace to a linear scale.