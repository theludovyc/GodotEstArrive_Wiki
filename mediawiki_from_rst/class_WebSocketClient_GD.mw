__NOTOC__'''Inherits:''' [[WebSocketMultiplayerPeer GD|WebSocketMultiplayerPeer]] '''<''' [[NetworkedMultiplayerPeer GD|NetworkedMultiplayerPeer]] '''<''' [[PacketPeer GD|PacketPeer]] '''<''' [[Reference GD|Reference]] '''<''' [[Object GD|Object]]A WebSocket client implementation.== Description ==This class implements a WebSocket client compatible with any RFC 6455-compliant WebSocket server.This client can be optionally used as a network peer for the [[MultiplayerAPI GD|MultiplayerAPI]].After starting the client ([[#connect_to_url|connect_to_url]]), you will need to [[NetworkedMultiplayerPeer GD#poll|NetworkedMultiplayerPeer.poll()]] it at regular intervals (e.g. inside [[Node GD#_process|_process]]).You will receive appropriate signals when connecting, disconnecting, or when new data is available.== Properties =={| class="wikitable | [[X509Certificate GD|X509Certificate]]|| [[#trusted_ssl_certificate|trusted_ssl_certificate]] |-| bool|| [[#verify_ssl|verify_ssl]]                           |}== Methods =={| class="wikitable | [[@GlobalScope GD#Error|Error]]|| [[#connect_to_url|connect_to_url]] '''(''' [[String GD|String]] url, [[PackedStringArray GD|PackedStringArray]] protocols=PackedStringArray(  ), bool gd_mp_api=false, [[PackedStringArray GD|PackedStringArray]] custom_headers=PackedStringArray(  ) ''')''' |-| void|| [[#disconnect_from_host|disconnect_from_host]] '''(''' int code=1000, [[String GD|String]] reason="" ''')'''                                                                                                                                                                  |-| [[String GD|String]]|| [[#get_connected_host|get_connected_host]] '''(''' ''')''' const                                                                                                                                                                                                                                       |-| int|| [[#get_connected_port|get_connected_port]] '''(''' ''')''' const                                                                                                                                                                                                                                       |}== Signals ===== connection_closed ===*  '''connection_closed''' '''(''' bool was_clean_close ''')'''Emitted when the connection to the server is closed. {{Span|was_clean_close}} will be {{Span|true}} if the connection was shutdown cleanly.=== connection_error ===*  '''connection_error ( )'''Emitted when the connection to the server fails.=== connection_established ===*  '''connection_established''' '''(''' [[String GD|String]] protocol ''')'''Emitted when a connection with the server is established, {{Span|protocol}} will contain the sub-protocol agreed with the server.=== data_received ===*  '''data_received ( )'''Emitted when a WebSocket message is received.'''Note:''' This signal is ''not'' emitted when used as high-level multiplayer peer.=== server_close_request ===*  '''server_close_request''' '''(''' int code, [[String GD|String]] reason ''')'''Emitted when the server requests a clean close. You should keep polling until you get a [[#connection_closed|connection_closed]] signal to achieve the clean close. See [[WebSocketPeer GD#close|WebSocketPeer.close()]] for more details.== Property Descriptions ===== trusted_ssl_certificate ===*  [[X509Certificate GD|X509Certificate]] '''trusted_ssl_certificate'''{| class="wikitable | ''Setter''|| set_trusted_ssl_certificate(value) |-| ''Getter''|| get_trusted_ssl_certificate()      |}If specified, this [[X509Certificate GD|X509Certificate]] will be the only one accepted when connecting to an SSL host. Any other certificate provided by the server will be regarded as invalid.'''Note:''' Specifying a custom {{Span|trusted_ssl_certificate}} is not supported in HTML5 exports due to browsers restrictions.=== verify_ssl ===*  bool '''verify_ssl'''{| class="wikitable | ''Setter''|| set_verify_ssl_enabled(value) |-| ''Getter''|| is_verify_ssl_enabled()       |}If {{Span|true}}, SSL certificate verification is enabled.'''Note:''' You must specify the certificates to be used in the Project Settings for it to work when exported.== Method Descriptions ===== connect_to_url ===*  [[@GlobalScope GD#Error|Error]] '''connect_to_url''' '''(''' [[String GD|String]] url, [[PackedStringArray GD|PackedStringArray]] protocols=PackedStringArray(  ), bool gd_mp_api=false, [[PackedStringArray GD|PackedStringArray]] custom_headers=PackedStringArray(  ) ''')'''Connects to the given URL requesting one of the given {{Span|protocols}} as sub-protocol. If the list empty (default), no sub-protocol will be requested.If {{Span|true}} is passed as {{Span|gd_mp_api}}, the client will behave like a network peer for the [[MultiplayerAPI GD|MultiplayerAPI]], connections to non-Godot servers will not work, and [[#data_received|data_received]] will not be emitted.If {{Span|false}} is passed instead (default), you must call [[PacketPeer GD|PacketPeer]] functions ({{Span|put_packet}}, {{Span|get_packet}}, etc.) on the [[WebSocketPeer GD|WebSocketPeer]] returned via {{Span|get_peer(1)}} and not on this object directly (e.g. {{Span|get_peer(1).put_packet(data)}}).You can optionally pass a list of {{Span|custom_headers}} to be added to the handshake HTTP request.'''Note:''' Specifying {{Span|custom_headers}} is not supported in HTML5 exports due to browsers restrictions.=== disconnect_from_host ===*  void '''disconnect_from_host''' '''(''' int code=1000, [[String GD|String]] reason="" ''')'''Disconnects this client from the connected host. See [[WebSocketPeer GD#close|WebSocketPeer.close()]] for more information.=== get_connected_host ===*  [[String GD|String]] '''get_connected_host ( )''' constReturn the IP address of the currently connected host.=== get_connected_port ===*  int '''get_connected_port ( )''' constReturn the IP port of the currently connected host.